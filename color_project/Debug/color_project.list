
color_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008214  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080083c8  080083c8  000183c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008454  08008454  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800845c  0800845c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800845c  0800845c  0001845c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008464  08008464  00018464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000008a8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000918  20000918  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a315  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a71  00000000  00000000  0003a3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  0003ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001388  00000000  00000000  0003e290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a6c  00000000  00000000  0003f618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017477  00000000  00000000  00068084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9d81  00000000  00000000  0007f4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016927c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061d0  00000000  00000000  001692cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080083ac 	.word	0x080083ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080083ac 	.word	0x080083ac

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <powf>:
 *          Base number
 *  @param  y
 *          Exponent
 *  @return x raised to the power of y
 */
float powf(const float x, const float y) {
 8000f1c:	b5b0      	push	{r4, r5, r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f26:	edc7 0a00 	vstr	s1, [r7]
  return (float)(pow((double)x, (double)y));
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fb1c 	bl	8000568 <__aeabi_f2d>
 8000f30:	4604      	mov	r4, r0
 8000f32:	460d      	mov	r5, r1
 8000f34:	6838      	ldr	r0, [r7, #0]
 8000f36:	f7ff fb17 	bl	8000568 <__aeabi_f2d>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	ec43 2b11 	vmov	d1, r2, r3
 8000f42:	ec45 4b10 	vmov	d0, r4, r5
 8000f46:	f005 fe77 	bl	8006c38 <pow>
 8000f4a:	ec53 2b10 	vmov	r2, r3, d0
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff fe11 	bl	8000b78 <__aeabi_d2f>
 8000f56:	4603      	mov	r3, r0
 8000f58:	ee07 3a90 	vmov	s15, r3
}
 8000f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000f68 <_ZN17Adafruit_TCS347256write8Ehm>:
/*!
 *  @brief  Writes a register and an 8 bit value over I2C
 *  @param  reg
 *  @param  value
 */
void Adafruit_TCS34725::write8(uint8_t reg, uint32_t value) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af04      	add	r7, sp, #16
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	460b      	mov	r3, r1
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	72fb      	strb	r3, [r7, #11]
    uint8_t data =value & 0xFF;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	75fb      	strb	r3, [r7, #23]
    if(HAL_I2C_Mem_Write(&hi2c1, (uint16_t)_i2caddr<<1, TCS34725_COMMAND_BIT | reg, 1, &data, 1, 100) != HAL_OK){
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	791b      	ldrb	r3, [r3, #4]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	b299      	uxth	r1, r3
 8000f86:	7afb      	ldrb	r3, [r7, #11]
 8000f88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	2364      	movs	r3, #100	; 0x64
 8000f92:	9302      	str	r3, [sp, #8]
 8000f94:	2301      	movs	r3, #1
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	f107 0317 	add.w	r3, r7, #23
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <_ZN17Adafruit_TCS347256write8Ehm+0x58>)
 8000fa2:	f002 fb67 	bl	8003674 <HAL_I2C_Mem_Write>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	bf14      	ite	ne
 8000fac:	2301      	movne	r3, #1
 8000fae:	2300      	moveq	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d000      	beq.n	8000fb8 <_ZN17Adafruit_TCS347256write8Ehm+0x50>
        while(1);
 8000fb6:	e7fe      	b.n	8000fb6 <_ZN17Adafruit_TCS347256write8Ehm+0x4e>
    }
}
 8000fb8:	bf00      	nop
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200002b4 	.word	0x200002b4

08000fc4 <_ZN17Adafruit_TCS347255read8Eh>:
/*!
 *  @brief  Reads an 8 bit value over I2C
 *  @param  reg
 *  @return value
 */
uint8_t Adafruit_TCS34725::read8(uint8_t reg) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af04      	add	r7, sp, #16
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
    uint8_t data =0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
    if(HAL_I2C_Mem_Read(&hi2c1, (uint16_t)_i2caddr<<1, TCS34725_COMMAND_BIT | reg, 1, &data, 1, 100) != HAL_OK){
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	791b      	ldrb	r3, [r3, #4]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	b299      	uxth	r1, r3
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	2364      	movs	r3, #100	; 0x64
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	2301      	movs	r3, #1
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	f107 030f 	add.w	r3, r7, #15
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <_ZN17Adafruit_TCS347255read8Eh+0x58>)
 8000ffa:	f002 fc35 	bl	8003868 <HAL_I2C_Mem_Read>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	bf14      	ite	ne
 8001004:	2301      	movne	r3, #1
 8001006:	2300      	moveq	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d000      	beq.n	8001010 <_ZN17Adafruit_TCS347255read8Eh+0x4c>
        while(1);
 800100e:	e7fe      	b.n	800100e <_ZN17Adafruit_TCS347255read8Eh+0x4a>
    }
    return data;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200002b4 	.word	0x200002b4

08001020 <_ZN17Adafruit_TCS347256read16Eh>:
/*!
 *  @brief  Reads a 16 bit values over I2C
 *  @param  reg
 *  @return value
 */
uint16_t Adafruit_TCS34725::read16(uint8_t reg) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af04      	add	r7, sp, #16
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
  uint16_t x;
  uint16_t t;
  uint8_t data[2];
  if(HAL_I2C_Mem_Read(_hi2c, (uint16_t)_i2caddr<<1, TCS34725_COMMAND_BIT | reg, 1, data, 2, 100) != HAL_OK){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	791b      	ldrb	r3, [r3, #4]
 8001034:	b29b      	uxth	r3, r3
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	b299      	uxth	r1, r3
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001040:	b2db      	uxtb	r3, r3
 8001042:	b29a      	uxth	r2, r3
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2302      	movs	r3, #2
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	f002 fc08 	bl	8003868 <HAL_I2C_Mem_Read>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	bf14      	ite	ne
 800105e:	2301      	movne	r3, #1
 8001060:	2300      	moveq	r3, #0
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d000      	beq.n	800106a <_ZN17Adafruit_TCS347256read16Eh+0x4a>
      while(1);
 8001068:	e7fe      	b.n	8001068 <_ZN17Adafruit_TCS347256read16Eh+0x48>
  }
  t = (uint16_t) data[0];
 800106a:	7a3b      	ldrb	r3, [r7, #8]
 800106c:	81fb      	strh	r3, [r7, #14]
  x = (uint16_t) data[1];
 800106e:	7a7b      	ldrb	r3, [r7, #9]
 8001070:	81bb      	strh	r3, [r7, #12]
  x <<= 8;
 8001072:	89bb      	ldrh	r3, [r7, #12]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	81bb      	strh	r3, [r7, #12]
  x |= t;
 8001078:	89ba      	ldrh	r2, [r7, #12]
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	4313      	orrs	r3, r2
 800107e:	81bb      	strh	r3, [r7, #12]
  return x;
 8001080:	89bb      	ldrh	r3, [r7, #12]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_ZN17Adafruit_TCS347256enableEv>:

/*!
 *  @brief  Enables the device
 */
void Adafruit_TCS34725::enable() {
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  write8(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 8001092:	2201      	movs	r2, #1
 8001094:	2100      	movs	r1, #0
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff66 	bl	8000f68 <_ZN17Adafruit_TCS347256write8Ehm>
  HAL_Delay(3);
 800109c:	2003      	movs	r0, #3
 800109e:	f001 fa65 	bl	800256c <HAL_Delay>
  write8(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 80010a2:	2203      	movs	r2, #3
 80010a4:	2100      	movs	r1, #0
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff5e 	bl	8000f68 <_ZN17Adafruit_TCS347256write8Ehm>
    This is only necessary in the case where enabling and then
    immediately trying to read values back. This is because setting
    AEN triggers an automatic integration, so if a read RGBC is
    performed too quickly, the data is not yet valid and all 0's are
    returned */
  switch (_tcs34725IntegrationTime) {
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	79db      	ldrb	r3, [r3, #7]
 80010b0:	2bff      	cmp	r3, #255	; 0xff
 80010b2:	d012      	beq.n	80010da <_ZN17Adafruit_TCS347256enableEv+0x50>
 80010b4:	2bff      	cmp	r3, #255	; 0xff
 80010b6:	dc29      	bgt.n	800110c <_ZN17Adafruit_TCS347256enableEv+0x82>
 80010b8:	2bf6      	cmp	r3, #246	; 0xf6
 80010ba:	d012      	beq.n	80010e2 <_ZN17Adafruit_TCS347256enableEv+0x58>
 80010bc:	2bf6      	cmp	r3, #246	; 0xf6
 80010be:	dc25      	bgt.n	800110c <_ZN17Adafruit_TCS347256enableEv+0x82>
 80010c0:	2beb      	cmp	r3, #235	; 0xeb
 80010c2:	d012      	beq.n	80010ea <_ZN17Adafruit_TCS347256enableEv+0x60>
 80010c4:	2beb      	cmp	r3, #235	; 0xeb
 80010c6:	dc21      	bgt.n	800110c <_ZN17Adafruit_TCS347256enableEv+0x82>
 80010c8:	2bd5      	cmp	r3, #213	; 0xd5
 80010ca:	d012      	beq.n	80010f2 <_ZN17Adafruit_TCS347256enableEv+0x68>
 80010cc:	2bd5      	cmp	r3, #213	; 0xd5
 80010ce:	dc1d      	bgt.n	800110c <_ZN17Adafruit_TCS347256enableEv+0x82>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d016      	beq.n	8001102 <_ZN17Adafruit_TCS347256enableEv+0x78>
 80010d4:	2bc0      	cmp	r3, #192	; 0xc0
 80010d6:	d010      	beq.n	80010fa <_ZN17Adafruit_TCS347256enableEv+0x70>
    break;
  case TCS34725_INTEGRATIONTIME_700MS:
    HAL_Delay(700);
    break;
  }
}
 80010d8:	e018      	b.n	800110c <_ZN17Adafruit_TCS347256enableEv+0x82>
    HAL_Delay(3);
 80010da:	2003      	movs	r0, #3
 80010dc:	f001 fa46 	bl	800256c <HAL_Delay>
    break;
 80010e0:	e014      	b.n	800110c <_ZN17Adafruit_TCS347256enableEv+0x82>
    HAL_Delay(24);
 80010e2:	2018      	movs	r0, #24
 80010e4:	f001 fa42 	bl	800256c <HAL_Delay>
    break;
 80010e8:	e010      	b.n	800110c <_ZN17Adafruit_TCS347256enableEv+0x82>
    HAL_Delay(50);
 80010ea:	2032      	movs	r0, #50	; 0x32
 80010ec:	f001 fa3e 	bl	800256c <HAL_Delay>
    break;
 80010f0:	e00c      	b.n	800110c <_ZN17Adafruit_TCS347256enableEv+0x82>
    HAL_Delay(101);
 80010f2:	2065      	movs	r0, #101	; 0x65
 80010f4:	f001 fa3a 	bl	800256c <HAL_Delay>
    break;
 80010f8:	e008      	b.n	800110c <_ZN17Adafruit_TCS347256enableEv+0x82>
    HAL_Delay(154);
 80010fa:	209a      	movs	r0, #154	; 0x9a
 80010fc:	f001 fa36 	bl	800256c <HAL_Delay>
    break;
 8001100:	e004      	b.n	800110c <_ZN17Adafruit_TCS347256enableEv+0x82>
    HAL_Delay(700);
 8001102:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001106:	f001 fa31 	bl	800256c <HAL_Delay>
    break;
 800110a:	bf00      	nop
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_ZN17Adafruit_TCS34725C1E25tcs34725IntegrationTime_t14tcs34725Gain_t>:
 *  @param  it
 *          Integration Time
 *  @param  gain
 *          Gain
 */
Adafruit_TCS34725::Adafruit_TCS34725(tcs34725IntegrationTime_t it,
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
 8001120:	4613      	mov	r3, r2
 8001122:	70bb      	strb	r3, [r7, #2]
                                     tcs34725Gain_t gain) {
  _tcs34725Initialised = false;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	715a      	strb	r2, [r3, #5]
  _tcs34725IntegrationTime = it;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	78fa      	ldrb	r2, [r7, #3]
 800112e:	71da      	strb	r2, [r3, #7]
  _tcs34725Gain = gain;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	78ba      	ldrb	r2, [r7, #2]
 8001134:	719a      	strb	r2, [r3, #6]
}
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_ZN17Adafruit_TCS347255beginEv>:

/*!
 *  @brief  Initializes I2C and configures the sensor
 *  @return True if initialization was successful, otherwise false.
 */
bool Adafruit_TCS34725::begin() {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  _i2caddr = TCS34725_ADDRESS;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2229      	movs	r2, #41	; 0x29
 8001150:	711a      	strb	r2, [r3, #4]
  _hi2c = &hi2c1;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <_ZN17Adafruit_TCS347255beginEv+0x24>)
 8001156:	601a      	str	r2, [r3, #0]

  return init();
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 f807 	bl	800116c <_ZN17Adafruit_TCS347254initEv>
 800115e:	4603      	mov	r3, r0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200002b4 	.word	0x200002b4

0800116c <_ZN17Adafruit_TCS347254initEv>:

/*!
 *  @brief  Part of begin
 *  @return True if initialization was successful, otherwise false.
 */
bool Adafruit_TCS34725::init() {
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  /* Make sure we're actually connected */

  uint8_t x = read8(TCS34725_ID);
 8001174:	2112      	movs	r1, #18
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff24 	bl	8000fc4 <_ZN17Adafruit_TCS347255read8Eh>
 800117c:	4603      	mov	r3, r0
 800117e:	73fb      	strb	r3, [r7, #15]
  if ((x != 0x44) && (x != 0x10)) {
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	2b44      	cmp	r3, #68	; 0x44
 8001184:	d004      	beq.n	8001190 <_ZN17Adafruit_TCS347254initEv+0x24>
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	2b10      	cmp	r3, #16
 800118a:	d001      	beq.n	8001190 <_ZN17Adafruit_TCS347254initEv+0x24>
    return false;
 800118c:	2300      	movs	r3, #0
 800118e:	e012      	b.n	80011b6 <_ZN17Adafruit_TCS347254initEv+0x4a>
  }
  _tcs34725Initialised = true;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	715a      	strb	r2, [r3, #5]

  /* Set default integration time and gain */
  setIntegrationTime(_tcs34725IntegrationTime);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	79db      	ldrb	r3, [r3, #7]
 800119a:	4619      	mov	r1, r3
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f80e 	bl	80011be <_ZN17Adafruit_TCS3472518setIntegrationTimeE25tcs34725IntegrationTime_t>
  setGain(_tcs34725Gain);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	799b      	ldrb	r3, [r3, #6]
 80011a6:	4619      	mov	r1, r3
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f825 	bl	80011f8 <_ZN17Adafruit_TCS347257setGainE14tcs34725Gain_t>

  /* Note: by default, the device is in power down mode on bootup */
  enable();
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ff6b 	bl	800108a <_ZN17Adafruit_TCS347256enableEv>

  return true;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZN17Adafruit_TCS3472518setIntegrationTimeE25tcs34725IntegrationTime_t>:
/*!
 *  @brief  Sets the integration time for the TC34725
 *  @param  it
 *          Integration Time
 */
void Adafruit_TCS34725::setIntegrationTime(tcs34725IntegrationTime_t it) {
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	460b      	mov	r3, r1
 80011c8:	70fb      	strb	r3, [r7, #3]
  if (!_tcs34725Initialised)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	795b      	ldrb	r3, [r3, #5]
 80011ce:	f083 0301 	eor.w	r3, r3, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <_ZN17Adafruit_TCS3472518setIntegrationTimeE25tcs34725IntegrationTime_t+0x20>
    begin();
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ffb3 	bl	8001144 <_ZN17Adafruit_TCS347255beginEv>

  /* Update the timing register */
  write8(TCS34725_ATIME, it);
 80011de:	78fb      	ldrb	r3, [r7, #3]
 80011e0:	461a      	mov	r2, r3
 80011e2:	2101      	movs	r1, #1
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff febf 	bl	8000f68 <_ZN17Adafruit_TCS347256write8Ehm>

  /* Update value placeholders */
  _tcs34725IntegrationTime = it;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	78fa      	ldrb	r2, [r7, #3]
 80011ee:	71da      	strb	r2, [r3, #7]
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_ZN17Adafruit_TCS347257setGainE14tcs34725Gain_t>:
/*!
 *  @brief  Adjusts the gain on the TCS34725
 *  @param  gain
 *          Gain (sensitivity to light)
 */
void Adafruit_TCS34725::setGain(tcs34725Gain_t gain) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	70fb      	strb	r3, [r7, #3]
  if (!_tcs34725Initialised)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	795b      	ldrb	r3, [r3, #5]
 8001208:	f083 0301 	eor.w	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <_ZN17Adafruit_TCS347257setGainE14tcs34725Gain_t+0x20>
    begin();
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff96 	bl	8001144 <_ZN17Adafruit_TCS347255beginEv>

  /* Update the timing register */
  write8(TCS34725_CONTROL, gain);
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	461a      	mov	r2, r3
 800121c:	210f      	movs	r1, #15
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fea2 	bl	8000f68 <_ZN17Adafruit_TCS347256write8Ehm>

  /* Update value placeholders */
  _tcs34725Gain = gain;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	78fa      	ldrb	r2, [r7, #3]
 8001228:	719a      	strb	r2, [r3, #6]
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt>:
 *  @param  b
 *          Blue value
 *  @return Color temperature in degrees Kelvin
 */
uint16_t Adafruit_TCS34725::calculateColorTemperature(uint16_t r, uint16_t g,
                                                      uint16_t b) {
 8001234:	b580      	push	{r7, lr}
 8001236:	ed2d 8b02 	vpush	{d8}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	4608      	mov	r0, r1
 8001242:	4611      	mov	r1, r2
 8001244:	461a      	mov	r2, r3
 8001246:	4603      	mov	r3, r0
 8001248:	817b      	strh	r3, [r7, #10]
 800124a:	460b      	mov	r3, r1
 800124c:	813b      	strh	r3, [r7, #8]
 800124e:	4613      	mov	r3, r2
 8001250:	80fb      	strh	r3, [r7, #6]
  float X, Y, Z; /* RGB to XYZ correlation      */
  float xc, yc;  /* Chromaticity co-ordinates   */
  float n;       /* McCamy's formula            */
  float cct;

  if (r == 0 && g == 0 && b == 0) {
 8001252:	897b      	ldrh	r3, [r7, #10]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d107      	bne.n	8001268 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x34>
 8001258:	893b      	ldrh	r3, [r7, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d104      	bne.n	8001268 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x34>
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x34>
    return 0;
 8001264:	2300      	movs	r3, #0
 8001266:	e0c1      	b.n	80013ec <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1b8>

  /* 1. Map RGB values to their XYZ counterparts.    */
  /* Based on 6500K fluorescent, 3000K fluorescent   */
  /* and 60W incandescent values for a wide range.   */
  /* Note: Y = Illuminance or lux                    */
  X = (-0.14282F * r) + (1.54924F * g) + (-0.95641F * b);
 8001268:	897b      	ldrh	r3, [r7, #10]
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001272:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80013f8 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1c4>
 8001276:	ee27 7a87 	vmul.f32	s14, s15, s14
 800127a:	893b      	ldrh	r3, [r7, #8]
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001284:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80013fc <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1c8>
 8001288:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800128c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129a:	eddf 6a59 	vldr	s13, [pc, #356]	; 8001400 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1cc>
 800129e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  Y = (-0.32466F * r) + (1.57837F * g) + (-0.73191F * b);
 80012aa:	897b      	ldrh	r3, [r7, #10]
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b4:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001404 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1d0>
 80012b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012bc:	893b      	ldrh	r3, [r7, #8]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c6:	eddf 6a50 	vldr	s13, [pc, #320]	; 8001408 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1d4>
 80012ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	ee07 3a90 	vmov	s15, r3
 80012d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012dc:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800140c <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1d8>
 80012e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  Z = (-0.68202F * r) + (0.77073F * g) + (0.56332F * b);
 80012ec:	897b      	ldrh	r3, [r7, #10]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001410 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1dc>
 80012fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012fe:	893b      	ldrh	r3, [r7, #8]
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001308:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001414 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1e0>
 800130c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001310:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	ee07 3a90 	vmov	s15, r3
 800131a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131e:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001418 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1e4>
 8001322:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  /* 2. Calculate the chromaticity co-ordinates      */
  xc = (X) / (X + Y + Z);
 800132e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001332:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001336:	ee37 7a27 	vadd.f32	s14, s14, s15
 800133a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800133e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001342:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134a:	edc7 7a08 	vstr	s15, [r7, #32]
  yc = (Y) / (X + Y + Z);
 800134e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001352:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800135e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001362:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800136a:	edc7 7a07 	vstr	s15, [r7, #28]

  /* 3. Use McCamy's formula to determine the CCT    */
  n = (xc - 0.3320F) / (0.1858F - yc);
 800136e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001372:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800141c <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1e8>
 8001376:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800137a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001420 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1ec>
 800137e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001382:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138a:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculate the final CCT */
  cct =
      (449.0F * powf(n, 3)) + (3525.0F * powf(n, 2)) + (6823.3F * n) + 5520.33F;
 800138e:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001392:	ed97 0a06 	vldr	s0, [r7, #24]
 8001396:	f7ff fdc1 	bl	8000f1c <powf>
 800139a:	eef0 7a40 	vmov.f32	s15, s0
 800139e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001424 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1f0>
 80013a2:	ee27 8a87 	vmul.f32	s16, s15, s14
 80013a6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80013aa:	ed97 0a06 	vldr	s0, [r7, #24]
 80013ae:	f7ff fdb5 	bl	8000f1c <powf>
 80013b2:	eef0 7a40 	vmov.f32	s15, s0
 80013b6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001428 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1f4>
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	ee38 7a27 	vadd.f32	s14, s16, s15
 80013c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80013c6:	eddf 6a19 	vldr	s13, [pc, #100]	; 800142c <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1f8>
 80013ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013ce:	ee77 7a27 	vadd.f32	s15, s14, s15
  cct =
 80013d2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001430 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt+0x1fc>
 80013d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013da:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Return the results in degrees Kelvin */
  return (uint16_t)cct;
 80013de:	edd7 7a05 	vldr	s15, [r7, #20]
 80013e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e6:	ee17 3a90 	vmov	r3, s15
 80013ea:	b29b      	uxth	r3, r3
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3730      	adds	r7, #48	; 0x30
 80013f0:	46bd      	mov	sp, r7
 80013f2:	ecbd 8b02 	vpop	{d8}
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	be123f68 	.word	0xbe123f68
 80013fc:	3fc64d7f 	.word	0x3fc64d7f
 8001400:	bf74d749 	.word	0xbf74d749
 8001404:	bea639d6 	.word	0xbea639d6
 8001408:	3fca0807 	.word	0x3fca0807
 800140c:	bf3b5e74 	.word	0xbf3b5e74
 8001410:	bf2e98dd 	.word	0xbf2e98dd
 8001414:	3f454e90 	.word	0x3f454e90
 8001418:	3f1035bd 	.word	0x3f1035bd
 800141c:	3ea9fbe7 	.word	0x3ea9fbe7
 8001420:	3e3e425b 	.word	0x3e3e425b
 8001424:	43e08000 	.word	0x43e08000
 8001428:	455c5000 	.word	0x455c5000
 800142c:	45d53a66 	.word	0x45d53a66
 8001430:	45ac82a4 	.word	0x45ac82a4

08001434 <_ZN17Adafruit_TCS3472512calculateLuxEttt>:
 *          Green value
 *  @param  b
 *          Blue value
 *  @return Lux value
 */
uint16_t Adafruit_TCS34725::calculateLux(uint16_t r, uint16_t g, uint16_t b) {
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	4608      	mov	r0, r1
 800143e:	4611      	mov	r1, r2
 8001440:	461a      	mov	r2, r3
 8001442:	4603      	mov	r3, r0
 8001444:	817b      	strh	r3, [r7, #10]
 8001446:	460b      	mov	r3, r1
 8001448:	813b      	strh	r3, [r7, #8]
 800144a:	4613      	mov	r3, r2
 800144c:	80fb      	strh	r3, [r7, #6]
  float illuminance;

  /* This only uses RGB ... how can we integrate clear or calculate lux */
  /* based exclusively on clear since this might be more reliable?      */
  illuminance = (-0.32466F * r) + (1.57837F * g) + (-0.73191F * b);
 800144e:	897b      	ldrh	r3, [r7, #10]
 8001450:	ee07 3a90 	vmov	s15, r3
 8001454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001458:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80014ac <_ZN17Adafruit_TCS3472512calculateLuxEttt+0x78>
 800145c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001460:	893b      	ldrh	r3, [r7, #8]
 8001462:	ee07 3a90 	vmov	s15, r3
 8001466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146a:	eddf 6a11 	vldr	s13, [pc, #68]	; 80014b0 <_ZN17Adafruit_TCS3472512calculateLuxEttt+0x7c>
 800146e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001472:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001480:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80014b4 <_ZN17Adafruit_TCS3472512calculateLuxEttt+0x80>
 8001484:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148c:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint16_t)illuminance;
 8001490:	edd7 7a05 	vldr	s15, [r7, #20]
 8001494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001498:	ee17 3a90 	vmov	r3, s15
 800149c:	b29b      	uxth	r3, r3
}
 800149e:	4618      	mov	r0, r3
 80014a0:	371c      	adds	r7, #28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	bea639d6 	.word	0xbea639d6
 80014b0:	3fca0807 	.word	0x3fca0807
 80014b4:	bf3b5e74 	.word	0xbf3b5e74

080014b8 <_ZN17Adafruit_TCS3472512setInterruptEb>:
/*!
 *  @brief  Sets inerrupt for TCS34725
 *  @param  i
 *          Interrupt (True/False)
 */
void Adafruit_TCS34725::setInterrupt(bool i) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70fb      	strb	r3, [r7, #3]
  uint8_t r = read8(TCS34725_ENABLE);
 80014c4:	2100      	movs	r1, #0
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fd7c 	bl	8000fc4 <_ZN17Adafruit_TCS347255read8Eh>
 80014cc:	4603      	mov	r3, r0
 80014ce:	73fb      	strb	r3, [r7, #15]
  if (i) {
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d004      	beq.n	80014e0 <_ZN17Adafruit_TCS3472512setInterruptEb+0x28>
    r |= TCS34725_ENABLE_AIEN;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	f043 0310 	orr.w	r3, r3, #16
 80014dc:	73fb      	strb	r3, [r7, #15]
 80014de:	e003      	b.n	80014e8 <_ZN17Adafruit_TCS3472512setInterruptEb+0x30>
  } else {
    r &= ~TCS34725_ENABLE_AIEN;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	f023 0310 	bic.w	r3, r3, #16
 80014e6:	73fb      	strb	r3, [r7, #15]
  }
  write8(TCS34725_ENABLE, r);
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	461a      	mov	r2, r3
 80014ec:	2100      	movs	r1, #0
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fd3a 	bl	8000f68 <_ZN17Adafruit_TCS347256write8Ehm>
}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_ZN17Adafruit_TCS3472514clearInterruptEv>:

/*!
 *  @brief  Clears inerrupt for TCS34725
 */
void Adafruit_TCS34725::clearInterrupt() {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af02      	add	r7, sp, #8
 8001502:	6078      	str	r0, [r7, #4]
    uint8_t data = TCS34725_COMMAND_BIT | 0x66;
 8001504:	23e6      	movs	r3, #230	; 0xe6
 8001506:	73fb      	strb	r3, [r7, #15]
    if(HAL_I2C_Master_Transmit(_hi2c, (uint16_t)_i2caddr<<1, &data, 1, 100) != HAL_OK){
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	791b      	ldrb	r3, [r3, #4]
 8001510:	b29b      	uxth	r3, r3
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	b299      	uxth	r1, r3
 8001516:	f107 020f 	add.w	r2, r7, #15
 800151a:	2364      	movs	r3, #100	; 0x64
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2301      	movs	r3, #1
 8001520:	f001 ffaa 	bl	8003478 <HAL_I2C_Master_Transmit>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	bf14      	ite	ne
 800152a:	2301      	movne	r3, #1
 800152c:	2300      	moveq	r3, #0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d000      	beq.n	8001536 <_ZN17Adafruit_TCS3472514clearInterruptEv+0x3a>
        while(1);
 8001534:	e7fe      	b.n	8001534 <_ZN17Adafruit_TCS3472514clearInterruptEv+0x38>
    }
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <_Z18getRawData_noDelayPtS_S_S_>:
//		else
//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
//	}
//}

void getRawData_noDelay(uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	603b      	str	r3, [r7, #0]
	*c = tcs.read16(TCS34725_CDATAL);
 800154e:	2114      	movs	r1, #20
 8001550:	4811      	ldr	r0, [pc, #68]	; (8001598 <_Z18getRawData_noDelayPtS_S_S_+0x58>)
 8001552:	f7ff fd65 	bl	8001020 <_ZN17Adafruit_TCS347256read16Eh>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	801a      	strh	r2, [r3, #0]
	*r = tcs.read16(TCS34725_RDATAL);
 800155e:	2116      	movs	r1, #22
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <_Z18getRawData_noDelayPtS_S_S_+0x58>)
 8001562:	f7ff fd5d 	bl	8001020 <_ZN17Adafruit_TCS347256read16Eh>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	801a      	strh	r2, [r3, #0]
	*g = tcs.read16(TCS34725_GDATAL);
 800156e:	2118      	movs	r1, #24
 8001570:	4809      	ldr	r0, [pc, #36]	; (8001598 <_Z18getRawData_noDelayPtS_S_S_+0x58>)
 8001572:	f7ff fd55 	bl	8001020 <_ZN17Adafruit_TCS347256read16Eh>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	801a      	strh	r2, [r3, #0]
	*b = tcs.read16(TCS34725_BDATAL);
 800157e:	211a      	movs	r1, #26
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <_Z18getRawData_noDelayPtS_S_S_+0x58>)
 8001582:	f7ff fd4d 	bl	8001020 <_ZN17Adafruit_TCS347256read16Eh>
 8001586:	4603      	mov	r3, r0
 8001588:	461a      	mov	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	801a      	strh	r2, [r3, #0]
}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200008f0 	.word	0x200008f0

0800159c <_Z3maplllll>:

//map
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	69b9      	ldr	r1, [r7, #24]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	1a8a      	subs	r2, r1, r2
 80015b6:	fb03 f202 	mul.w	r2, r3, r2
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	1acb      	subs	r3, r1, r3
 80015c0:	fb92 f2f3 	sdiv	r2, r2, r3
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	4413      	add	r3, r2
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_GPIO_EXTI_Callback>:
	for(int i = 0; i < len; i++)
		ITM_SendChar((*ptr++));
	return;
}*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin) {
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015e4:	d10d      	bne.n	8001602 <HAL_GPIO_EXTI_Callback+0x2e>
		flag = !flag;
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_GPIO_EXTI_Callback+0x38>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bf0c      	ite	eq
 80015ee:	2301      	moveq	r3, #1
 80015f0:	2300      	movne	r3, #0
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_GPIO_EXTI_Callback+0x38>)
 80015f8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80015fa:	2101      	movs	r1, #1
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <HAL_GPIO_EXTI_Callback+0x3c>)
 80015fe:	f001 fdc4 	bl	800318a <HAL_GPIO_TogglePin>
	}
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200008e8 	.word	0x200008e8
 8001610:	40020400 	.word	0x40020400

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b094      	sub	sp, #80	; 0x50
 8001618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161a:	f000 ff35 	bl	8002488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161e:	f000 f8e5 	bl	80017ec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001622:	f000 fb47 	bl	8001cb4 <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 8001626:	f000 f955 	bl	80018d4 <_ZL11MX_ETH_Initv>
  MX_USART3_UART_Init();
 800162a:	f000 fae3 	bl	8001bf4 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 800162e:	f000 fb0f 	bl	8001c50 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_I2C1_Init();
 8001632:	f000 f9a1 	bl	8001978 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 8001636:	f000 f9ed 	bl	8001a14 <_ZL12MX_TIM3_Initv>
  MX_TIM6_Init();
 800163a:	f000 fa9b 	bl	8001b74 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 800163e:	4863      	ldr	r0, [pc, #396]	; (80017cc <main+0x1b8>)
 8001640:	f003 fd96 	bl	8005170 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001644:	2100      	movs	r1, #0
 8001646:	4862      	ldr	r0, [pc, #392]	; (80017d0 <main+0x1bc>)
 8001648:	f003 fe54 	bl	80052f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800164c:	2104      	movs	r1, #4
 800164e:	4860      	ldr	r0, [pc, #384]	; (80017d0 <main+0x1bc>)
 8001650:	f003 fe50 	bl	80052f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001654:	2108      	movs	r1, #8
 8001656:	485e      	ldr	r0, [pc, #376]	; (80017d0 <main+0x1bc>)
 8001658:	f003 fe4c 	bl	80052f4 <HAL_TIM_PWM_Start>

  if(tcs.begin()) debugStatus = 0x55;
 800165c:	485d      	ldr	r0, [pc, #372]	; (80017d4 <main+0x1c0>)
 800165e:	f7ff fd71 	bl	8001144 <_ZN17Adafruit_TCS347255beginEv>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00c      	beq.n	8001682 <main+0x6e>
 8001668:	4b5b      	ldr	r3, [pc, #364]	; (80017d8 <main+0x1c4>)
 800166a:	2255      	movs	r2, #85	; 0x55
 800166c:	701a      	strb	r2, [r3, #0]
  else {
	  debugStatus = 0xAA;
	  while(1);
  }

  tcs.write8(TCS34725_PERS, TCS34725_PERS_NONE);
 800166e:	2200      	movs	r2, #0
 8001670:	210c      	movs	r1, #12
 8001672:	4858      	ldr	r0, [pc, #352]	; (80017d4 <main+0x1c0>)
 8001674:	f7ff fc78 	bl	8000f68 <_ZN17Adafruit_TCS347256write8Ehm>
  tcs.setInterrupt(true);
 8001678:	2101      	movs	r1, #1
 800167a:	4856      	ldr	r0, [pc, #344]	; (80017d4 <main+0x1c0>)
 800167c:	f7ff ff1c 	bl	80014b8 <_ZN17Adafruit_TCS3472512setInterruptEb>
 8001680:	e003      	b.n	800168a <main+0x76>
	  debugStatus = 0xAA;
 8001682:	4b55      	ldr	r3, [pc, #340]	; (80017d8 <main+0x1c4>)
 8001684:	22aa      	movs	r2, #170	; 0xaa
 8001686:	701a      	strb	r2, [r3, #0]
	  while(1);
 8001688:	e7fe      	b.n	8001688 <main+0x74>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  getRawData_noDelay(&r, &g, &b, &c);
 800168a:	f107 0320 	add.w	r3, r7, #32
 800168e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001692:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001696:	f107 0026 	add.w	r0, r7, #38	; 0x26
 800169a:	f7ff ff51 	bl	8001540 <_Z18getRawData_noDelayPtS_S_S_>
	  colorTemp = tcs.calculateColorTemperature(r, g, b);
 800169e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80016a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80016a4:	484b      	ldr	r0, [pc, #300]	; (80017d4 <main+0x1c0>)
 80016a6:	f7ff fdc5 	bl	8001234 <_ZN17Adafruit_TCS3472525calculateColorTemperatureEttt>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  lux = tcs.calculateLux(r, g, b);
 80016b0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80016b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80016b6:	4847      	ldr	r0, [pc, #284]	; (80017d4 <main+0x1c0>)
 80016b8:	f7ff febc 	bl	8001434 <_ZN17Adafruit_TCS3472512calculateLuxEttt>
 80016bc:	4603      	mov	r3, r0
 80016be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	  char txt[30] = {0};
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	615a      	str	r2, [r3, #20]
 80016d6:	831a      	strh	r2, [r3, #24]

	  int r_led = map(r, 0, 21504, 0, 10000);
 80016d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016da:	4618      	mov	r0, r3
 80016dc:	f242 7310 	movw	r3, #10000	; 0x2710
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2300      	movs	r3, #0
 80016e4:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 80016e8:	2100      	movs	r1, #0
 80016ea:	f7ff ff57 	bl	800159c <_Z3maplllll>
 80016ee:	6438      	str	r0, [r7, #64]	; 0x40
	  int g_led = map(g, 0, 21504, 0, 10000);
 80016f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016f2:	4618      	mov	r0, r3
 80016f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2300      	movs	r3, #0
 80016fc:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 8001700:	2100      	movs	r1, #0
 8001702:	f7ff ff4b 	bl	800159c <_Z3maplllll>
 8001706:	63f8      	str	r0, [r7, #60]	; 0x3c
	  int b_led = map(b, 0, 21504, 0, 10000);
 8001708:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800170a:	4618      	mov	r0, r3
 800170c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2300      	movs	r3, #0
 8001714:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 8001718:	2100      	movs	r1, #0
 800171a:	f7ff ff3f 	bl	800159c <_Z3maplllll>
 800171e:	63b8      	str	r0, [r7, #56]	; 0x38

	  TIM3->CCR1 = r_led;
 8001720:	4a2e      	ldr	r2, [pc, #184]	; (80017dc <main+0x1c8>)
 8001722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001724:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM3->CCR2 = g_led;
 8001726:	4a2d      	ldr	r2, [pc, #180]	; (80017dc <main+0x1c8>)
 8001728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800172a:	6393      	str	r3, [r2, #56]	; 0x38
	  TIM3->CCR3 = b_led;
 800172c:	4a2b      	ldr	r2, [pc, #172]	; (80017dc <main+0x1c8>)
 800172e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001730:	63d3      	str	r3, [r2, #60]	; 0x3c

	  int red = map(r, 0, 21504, 0, 255);
 8001732:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001734:	4618      	mov	r0, r3
 8001736:	23ff      	movs	r3, #255	; 0xff
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2300      	movs	r3, #0
 800173c:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 8001740:	2100      	movs	r1, #0
 8001742:	f7ff ff2b 	bl	800159c <_Z3maplllll>
 8001746:	6378      	str	r0, [r7, #52]	; 0x34
	  int green = map(g, 0, 21504, 0, 255);
 8001748:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800174a:	4618      	mov	r0, r3
 800174c:	23ff      	movs	r3, #255	; 0xff
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2300      	movs	r3, #0
 8001752:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 8001756:	2100      	movs	r1, #0
 8001758:	f7ff ff20 	bl	800159c <_Z3maplllll>
 800175c:	6338      	str	r0, [r7, #48]	; 0x30
	  int blue = map(b, 0, 21504, 0, 255);
 800175e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001760:	4618      	mov	r0, r3
 8001762:	23ff      	movs	r3, #255	; 0xff
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2300      	movs	r3, #0
 8001768:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 800176c:	2100      	movs	r1, #0
 800176e:	f7ff ff15 	bl	800159c <_Z3maplllll>
 8001772:	62f8      	str	r0, [r7, #44]	; 0x2c
	  int clear = map(c, 0, 21504, 0, 255);
 8001774:	8c3b      	ldrh	r3, [r7, #32]
 8001776:	4618      	mov	r0, r3
 8001778:	23ff      	movs	r3, #255	; 0xff
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2300      	movs	r3, #0
 800177e:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
 8001782:	2100      	movs	r1, #0
 8001784:	f7ff ff0a 	bl	800159c <_Z3maplllll>
 8001788:	62b8      	str	r0, [r7, #40]	; 0x28

	  if(flag == 1) {
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <main+0x1cc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d114      	bne.n	80017bc <main+0x1a8>
		  sprintf(txt, "%d:%d:%d:%dL", red, green, blue, clear);
 8001792:	4638      	mov	r0, r7
 8001794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800179e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017a0:	4910      	ldr	r1, [pc, #64]	; (80017e4 <main+0x1d0>)
 80017a2:	f006 f995 	bl	8007ad0 <siprintf>
		  HAL_UART_Transmit(&huart3, (const uint8_t*)txt, strlen(txt), 20);
 80017a6:	463b      	mov	r3, r7
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fd21 	bl	80001f0 <strlen>
 80017ae:	4603      	mov	r3, r0
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4639      	mov	r1, r7
 80017b4:	2314      	movs	r3, #20
 80017b6:	480c      	ldr	r0, [pc, #48]	; (80017e8 <main+0x1d4>)
 80017b8:	f004 fbc7 	bl	8005f4a <HAL_UART_Transmit>
	  }

	  tcs.clearInterrupt();
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <main+0x1c0>)
 80017be:	f7ff fe9d 	bl	80014fc <_ZN17Adafruit_TCS3472514clearInterruptEv>
	  HAL_Delay(3000);
 80017c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017c6:	f000 fed1 	bl	800256c <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80017ca:	e75e      	b.n	800168a <main+0x76>
 80017cc:	20000350 	.word	0x20000350
 80017d0:	20000308 	.word	0x20000308
 80017d4:	200008f0 	.word	0x200008f0
 80017d8:	200008ec 	.word	0x200008ec
 80017dc:	40000400 	.word	0x40000400
 80017e0:	200008e8 	.word	0x200008e8
 80017e4:	080083c8 	.word	0x080083c8
 80017e8:	20000398 	.word	0x20000398

080017ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b094      	sub	sp, #80	; 0x50
 80017f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f2:	f107 0320 	add.w	r3, r7, #32
 80017f6:	2230      	movs	r2, #48	; 0x30
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f006 f960 	bl	8007ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <_Z18SystemClock_Configv+0xe0>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	4a2c      	ldr	r2, [pc, #176]	; (80018cc <_Z18SystemClock_Configv+0xe0>)
 800181a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181e:	6413      	str	r3, [r2, #64]	; 0x40
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <_Z18SystemClock_Configv+0xe0>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800182c:	2300      	movs	r3, #0
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <_Z18SystemClock_Configv+0xe4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <_Z18SystemClock_Configv+0xe4>)
 8001836:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <_Z18SystemClock_Configv+0xe4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001848:	2301      	movs	r3, #1
 800184a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800184c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001852:	2302      	movs	r3, #2
 8001854:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001856:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800185a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800185c:	2304      	movs	r3, #4
 800185e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001860:	23a8      	movs	r3, #168	; 0xa8
 8001862:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001864:	2302      	movs	r3, #2
 8001866:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001868:	2307      	movs	r3, #7
 800186a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186c:	f107 0320 	add.w	r3, r7, #32
 8001870:	4618      	mov	r0, r3
 8001872:	f002 ff95 	bl	80047a0 <HAL_RCC_OscConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf14      	ite	ne
 800187c:	2301      	movne	r3, #1
 800187e:	2300      	moveq	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001886:	f000 facb 	bl	8001e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800188a:	230f      	movs	r3, #15
 800188c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188e:	2302      	movs	r3, #2
 8001890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001896:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800189a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800189c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	2105      	movs	r1, #5
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 f9f1 	bl	8004c90 <HAL_RCC_ClockConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80018be:	f000 faaf 	bl	8001e20 <Error_Handler>
  }
}
 80018c2:	bf00      	nop
 80018c4:	3750      	adds	r7, #80	; 0x50
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40007000 	.word	0x40007000

080018d4 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <_ZL11MX_ETH_Initv+0x8c>)
 80018da:	4a22      	ldr	r2, [pc, #136]	; (8001964 <_ZL11MX_ETH_Initv+0x90>)
 80018dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <_ZL11MX_ETH_Initv+0x94>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <_ZL11MX_ETH_Initv+0x94>)
 80018e6:	2280      	movs	r2, #128	; 0x80
 80018e8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <_ZL11MX_ETH_Initv+0x94>)
 80018ec:	22e1      	movs	r2, #225	; 0xe1
 80018ee:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <_ZL11MX_ETH_Initv+0x94>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <_ZL11MX_ETH_Initv+0x94>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <_ZL11MX_ETH_Initv+0x94>)
 80018fe:	2200      	movs	r2, #0
 8001900:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <_ZL11MX_ETH_Initv+0x8c>)
 8001904:	4a18      	ldr	r2, [pc, #96]	; (8001968 <_ZL11MX_ETH_Initv+0x94>)
 8001906:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <_ZL11MX_ETH_Initv+0x8c>)
 800190a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800190e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <_ZL11MX_ETH_Initv+0x8c>)
 8001912:	4a16      	ldr	r2, [pc, #88]	; (800196c <_ZL11MX_ETH_Initv+0x98>)
 8001914:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <_ZL11MX_ETH_Initv+0x8c>)
 8001918:	4a15      	ldr	r2, [pc, #84]	; (8001970 <_ZL11MX_ETH_Initv+0x9c>)
 800191a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <_ZL11MX_ETH_Initv+0x8c>)
 800191e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001922:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001924:	480e      	ldr	r0, [pc, #56]	; (8001960 <_ZL11MX_ETH_Initv+0x8c>)
 8001926:	f000 ff57 	bl	80027d8 <HAL_ETH_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <_ZL11MX_ETH_Initv+0x6a>
  {
    Error_Handler();
 800193a:	f000 fa71 	bl	8001e20 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800193e:	2238      	movs	r2, #56	; 0x38
 8001940:	2100      	movs	r1, #0
 8001942:	480c      	ldr	r0, [pc, #48]	; (8001974 <_ZL11MX_ETH_Initv+0xa0>)
 8001944:	f006 f8bc 	bl	8007ac0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <_ZL11MX_ETH_Initv+0xa0>)
 800194a:	2221      	movs	r2, #33	; 0x21
 800194c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <_ZL11MX_ETH_Initv+0xa0>)
 8001950:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001954:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <_ZL11MX_ETH_Initv+0xa0>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000204 	.word	0x20000204
 8001964:	40028000 	.word	0x40028000
 8001968:	200008f8 	.word	0x200008f8
 800196c:	20000164 	.word	0x20000164
 8001970:	200000c4 	.word	0x200000c4
 8001974:	2000008c 	.word	0x2000008c

08001978 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800197c:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <_ZL12MX_I2C1_Initv+0x94>)
 800197e:	4a24      	ldr	r2, [pc, #144]	; (8001a10 <_ZL12MX_I2C1_Initv+0x98>)
 8001980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <_ZL12MX_I2C1_Initv+0x94>)
 8001984:	f242 7210 	movw	r2, #10000	; 0x2710
 8001988:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800198a:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <_ZL12MX_I2C1_Initv+0x94>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001990:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <_ZL12MX_I2C1_Initv+0x94>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <_ZL12MX_I2C1_Initv+0x94>)
 8001998:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800199c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800199e:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <_ZL12MX_I2C1_Initv+0x94>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <_ZL12MX_I2C1_Initv+0x94>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <_ZL12MX_I2C1_Initv+0x94>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <_ZL12MX_I2C1_Initv+0x94>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019b6:	4815      	ldr	r0, [pc, #84]	; (8001a0c <_ZL12MX_I2C1_Initv+0x94>)
 80019b8:	f001 fc1a 	bl	80031f0 <HAL_I2C_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bf14      	ite	ne
 80019c2:	2301      	movne	r3, #1
 80019c4:	2300      	moveq	r3, #0
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <_ZL12MX_I2C1_Initv+0x58>
  {
    Error_Handler();
 80019cc:	f000 fa28 	bl	8001e20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019d0:	2100      	movs	r1, #0
 80019d2:	480e      	ldr	r0, [pc, #56]	; (8001a0c <_ZL12MX_I2C1_Initv+0x94>)
 80019d4:	f002 fd4b 	bl	800446e <HAL_I2CEx_ConfigAnalogFilter>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bf14      	ite	ne
 80019de:	2301      	movne	r3, #1
 80019e0:	2300      	moveq	r3, #0
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <_ZL12MX_I2C1_Initv+0x74>
  {
    Error_Handler();
 80019e8:	f000 fa1a 	bl	8001e20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019ec:	2100      	movs	r1, #0
 80019ee:	4807      	ldr	r0, [pc, #28]	; (8001a0c <_ZL12MX_I2C1_Initv+0x94>)
 80019f0:	f002 fd79 	bl	80044e6 <HAL_I2CEx_ConfigDigitalFilter>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	bf14      	ite	ne
 80019fa:	2301      	movne	r3, #1
 80019fc:	2300      	moveq	r3, #0
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <_ZL12MX_I2C1_Initv+0x90>
  {
    Error_Handler();
 8001a04:	f000 fa0c 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200002b4 	.word	0x200002b4
 8001a10:	40005400 	.word	0x40005400

08001a14 <_ZL12MX_TIM3_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08e      	sub	sp, #56	; 0x38
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a28:	f107 0320 	add.w	r3, r7, #32
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	615a      	str	r2, [r3, #20]
 8001a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a44:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <_ZL12MX_TIM3_Initv+0x158>)
 8001a46:	4a4a      	ldr	r2, [pc, #296]	; (8001b70 <_ZL12MX_TIM3_Initv+0x15c>)
 8001a48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 8001a4a:	4b48      	ldr	r3, [pc, #288]	; (8001b6c <_ZL12MX_TIM3_Initv+0x158>)
 8001a4c:	22a7      	movs	r2, #167	; 0xa7
 8001a4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b46      	ldr	r3, [pc, #280]	; (8001b6c <_ZL12MX_TIM3_Initv+0x158>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001a56:	4b45      	ldr	r3, [pc, #276]	; (8001b6c <_ZL12MX_TIM3_Initv+0x158>)
 8001a58:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <_ZL12MX_TIM3_Initv+0x158>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a64:	4b41      	ldr	r3, [pc, #260]	; (8001b6c <_ZL12MX_TIM3_Initv+0x158>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a6a:	4840      	ldr	r0, [pc, #256]	; (8001b6c <_ZL12MX_TIM3_Initv+0x158>)
 8001a6c:	f003 fb30 	bl	80050d0 <HAL_TIM_Base_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	bf14      	ite	ne
 8001a76:	2301      	movne	r3, #1
 8001a78:	2300      	moveq	r3, #0
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8001a80:	f000 f9ce 	bl	8001e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4836      	ldr	r0, [pc, #216]	; (8001b6c <_ZL12MX_TIM3_Initv+0x158>)
 8001a92:	f003 fdb9 	bl	8005608 <HAL_TIM_ConfigClockSource>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf14      	ite	ne
 8001a9c:	2301      	movne	r3, #1
 8001a9e:	2300      	moveq	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8001aa6:	f000 f9bb 	bl	8001e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001aaa:	4830      	ldr	r0, [pc, #192]	; (8001b6c <_ZL12MX_TIM3_Initv+0x158>)
 8001aac:	f003 fbc8 	bl	8005240 <HAL_TIM_PWM_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bf14      	ite	ne
 8001ab6:	2301      	movne	r3, #1
 8001ab8:	2300      	moveq	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8001ac0:	f000 f9ae 	bl	8001e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001acc:	f107 0320 	add.w	r3, r7, #32
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4826      	ldr	r0, [pc, #152]	; (8001b6c <_ZL12MX_TIM3_Initv+0x158>)
 8001ad4:	f004 f970 	bl	8005db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf14      	ite	ne
 8001ade:	2301      	movne	r3, #1
 8001ae0:	2300      	moveq	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001ae8:	f000 f99a 	bl	8001e20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aec:	2360      	movs	r3, #96	; 0x60
 8001aee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	2200      	movs	r2, #0
 8001b00:	4619      	mov	r1, r3
 8001b02:	481a      	ldr	r0, [pc, #104]	; (8001b6c <_ZL12MX_TIM3_Initv+0x158>)
 8001b04:	f003 fcbe 	bl	8005484 <HAL_TIM_PWM_ConfigChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	bf14      	ite	ne
 8001b0e:	2301      	movne	r3, #1
 8001b10:	2300      	moveq	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8001b18:	f000 f982 	bl	8001e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	2204      	movs	r2, #4
 8001b20:	4619      	mov	r1, r3
 8001b22:	4812      	ldr	r0, [pc, #72]	; (8001b6c <_ZL12MX_TIM3_Initv+0x158>)
 8001b24:	f003 fcae 	bl	8005484 <HAL_TIM_PWM_ConfigChannel>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf14      	ite	ne
 8001b2e:	2301      	movne	r3, #1
 8001b30:	2300      	moveq	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8001b38:	f000 f972 	bl	8001e20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	2208      	movs	r2, #8
 8001b40:	4619      	mov	r1, r3
 8001b42:	480a      	ldr	r0, [pc, #40]	; (8001b6c <_ZL12MX_TIM3_Initv+0x158>)
 8001b44:	f003 fc9e 	bl	8005484 <HAL_TIM_PWM_ConfigChannel>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	bf14      	ite	ne
 8001b4e:	2301      	movne	r3, #1
 8001b50:	2300      	moveq	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <_ZL12MX_TIM3_Initv+0x148>
  {
    Error_Handler();
 8001b58:	f000 f962 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b5c:	4803      	ldr	r0, [pc, #12]	; (8001b6c <_ZL12MX_TIM3_Initv+0x158>)
 8001b5e:	f000 faf3 	bl	8002148 <HAL_TIM_MspPostInit>

}
 8001b62:	bf00      	nop
 8001b64:	3738      	adds	r7, #56	; 0x38
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000308 	.word	0x20000308
 8001b70:	40000400 	.word	0x40000400

08001b74 <_ZL12MX_TIM6_Initv>:

static void MX_TIM6_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <_ZL12MX_TIM6_Initv+0x78>)
 8001b84:	4a1a      	ldr	r2, [pc, #104]	; (8001bf0 <_ZL12MX_TIM6_Initv+0x7c>)
 8001b86:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1679;
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <_ZL12MX_TIM6_Initv+0x78>)
 8001b8a:	f240 628f 	movw	r2, #1679	; 0x68f
 8001b8e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <_ZL12MX_TIM6_Initv+0x78>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <_ZL12MX_TIM6_Initv+0x78>)
 8001b98:	2263      	movs	r2, #99	; 0x63
 8001b9a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <_ZL12MX_TIM6_Initv+0x78>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ba2:	4812      	ldr	r0, [pc, #72]	; (8001bec <_ZL12MX_TIM6_Initv+0x78>)
 8001ba4:	f003 fa94 	bl	80050d0 <HAL_TIM_Base_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	bf14      	ite	ne
 8001bae:	2301      	movne	r3, #1
 8001bb0:	2300      	moveq	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <_ZL12MX_TIM6_Initv+0x48>
  {
    Error_Handler();
 8001bb8:	f000 f932 	bl	8001e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4808      	ldr	r0, [pc, #32]	; (8001bec <_ZL12MX_TIM6_Initv+0x78>)
 8001bca:	f004 f8f5 	bl	8005db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <_ZL12MX_TIM6_Initv+0x6e>
  {
    Error_Handler();
 8001bde:	f000 f91f 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000350 	.word	0x20000350
 8001bf0:	40001000 	.word	0x40001000

08001bf4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001bfa:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <_ZL19MX_USART3_UART_Initv+0x58>)
 8001bfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c2a:	4807      	ldr	r0, [pc, #28]	; (8001c48 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001c2c:	f004 f940 	bl	8005eb0 <HAL_UART_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001c40:	f000 f8ee 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000398 	.word	0x20000398
 8001c4c:	40004800 	.word	0x40004800

08001c50 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001c56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001c5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001c5e:	2204      	movs	r2, #4
 8001c60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001c64:	2202      	movs	r2, #2
 8001c66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001c70:	2202      	movs	r2, #2
 8001c72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c92:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001c94:	f002 fc66 	bl	8004564 <HAL_PCD_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bf14      	ite	ne
 8001c9e:	2301      	movne	r3, #1
 8001ca0:	2300      	moveq	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8001ca8:	f000 f8ba 	bl	8001e20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200003dc 	.word	0x200003dc

08001cb4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	; 0x30
 8001cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	4b50      	ldr	r3, [pc, #320]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a48      	ldr	r2, [pc, #288]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	4b42      	ldr	r3, [pc, #264]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a41      	ldr	r2, [pc, #260]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a3a      	ldr	r2, [pc, #232]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b38      	ldr	r3, [pc, #224]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a33      	ldr	r2, [pc, #204]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001d44:	f043 0308 	orr.w	r3, r3, #8
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a2c      	ldr	r2, [pc, #176]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <_ZL12MX_GPIO_Initv+0x15c>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	f244 0181 	movw	r1, #16513	; 0x4081
 8001d78:	4826      	ldr	r0, [pc, #152]	; (8001e14 <_ZL12MX_GPIO_Initv+0x160>)
 8001d7a:	f001 f9ed 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2140      	movs	r1, #64	; 0x40
 8001d82:	4825      	ldr	r0, [pc, #148]	; (8001e18 <_ZL12MX_GPIO_Initv+0x164>)
 8001d84:	f001 f9e8 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	481f      	ldr	r0, [pc, #124]	; (8001e1c <_ZL12MX_GPIO_Initv+0x168>)
 8001da0:	f001 f82e 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001da4:	f244 0381 	movw	r3, #16513	; 0x4081
 8001da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db6:	f107 031c 	add.w	r3, r7, #28
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4815      	ldr	r0, [pc, #84]	; (8001e14 <_ZL12MX_GPIO_Initv+0x160>)
 8001dbe:	f001 f81f 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001dc2:	2340      	movs	r3, #64	; 0x40
 8001dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f107 031c 	add.w	r3, r7, #28
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480f      	ldr	r0, [pc, #60]	; (8001e18 <_ZL12MX_GPIO_Initv+0x164>)
 8001dda:	f001 f811 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001dea:	f107 031c 	add.w	r3, r7, #28
 8001dee:	4619      	mov	r1, r3
 8001df0:	4809      	ldr	r0, [pc, #36]	; (8001e18 <_ZL12MX_GPIO_Initv+0x164>)
 8001df2:	f001 f805 	bl	8002e00 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2028      	movs	r0, #40	; 0x28
 8001dfc:	f000 fcb5 	bl	800276a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e00:	2028      	movs	r0, #40	; 0x28
 8001e02:	f000 fcce 	bl	80027a2 <HAL_NVIC_EnableIRQ>

}
 8001e06:	bf00      	nop
 8001e08:	3730      	adds	r7, #48	; 0x30
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40021800 	.word	0x40021800
 8001e1c:	40020800 	.word	0x40020800

08001e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e24:	b672      	cpsid	i
}
 8001e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <Error_Handler+0x8>
	...

08001e2c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d109      	bne.n	8001e50 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d104      	bne.n	8001e50 <_Z41__static_initialization_and_destruction_0ii+0x24>
Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_700MS, TCS34725_GAIN_1X);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4803      	ldr	r0, [pc, #12]	; (8001e58 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001e4c:	f7ff f962 	bl	8001114 <_ZN17Adafruit_TCS34725C1E25tcs34725IntegrationTime_t14tcs34725Gain_t>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200008f0 	.word	0x200008f0

08001e5c <_GLOBAL__sub_I_sMasterConfig>:
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e64:	2001      	movs	r0, #1
 8001e66:	f7ff ffe1 	bl	8001e2c <_Z41__static_initialization_and_destruction_0ii>
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_MspInit+0x4c>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800

08001ebc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08e      	sub	sp, #56	; 0x38
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a55      	ldr	r2, [pc, #340]	; (8002030 <HAL_ETH_MspInit+0x174>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	f040 80a4 	bne.w	8002028 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	623b      	str	r3, [r7, #32]
 8001ee4:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	4a52      	ldr	r2, [pc, #328]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001eea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eee:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef0:	4b50      	ldr	r3, [pc, #320]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	623b      	str	r3, [r7, #32]
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	4a4b      	ldr	r2, [pc, #300]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0c:	4b49      	ldr	r3, [pc, #292]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	4b45      	ldr	r3, [pc, #276]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	4a44      	ldr	r2, [pc, #272]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f26:	6313      	str	r3, [r2, #48]	; 0x30
 8001f28:	4b42      	ldr	r3, [pc, #264]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	4b3e      	ldr	r3, [pc, #248]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	4a3d      	ldr	r2, [pc, #244]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f3e:	f043 0304 	orr.w	r3, r3, #4
 8001f42:	6313      	str	r3, [r2, #48]	; 0x30
 8001f44:	4b3b      	ldr	r3, [pc, #236]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	4b37      	ldr	r3, [pc, #220]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	4a36      	ldr	r2, [pc, #216]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f60:	4b34      	ldr	r3, [pc, #208]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	4a2f      	ldr	r2, [pc, #188]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f76:	f043 0302 	orr.w	r3, r3, #2
 8001f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	4b29      	ldr	r3, [pc, #164]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	4a28      	ldr	r2, [pc, #160]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f96:	6313      	str	r3, [r2, #48]	; 0x30
 8001f98:	4b26      	ldr	r3, [pc, #152]	; (8002034 <HAL_ETH_MspInit+0x178>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001fa4:	2332      	movs	r3, #50	; 0x32
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fb4:	230b      	movs	r3, #11
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	481e      	ldr	r0, [pc, #120]	; (8002038 <HAL_ETH_MspInit+0x17c>)
 8001fc0:	f000 ff1e 	bl	8002e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001fc4:	2386      	movs	r3, #134	; 0x86
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fd4:	230b      	movs	r3, #11
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4817      	ldr	r0, [pc, #92]	; (800203c <HAL_ETH_MspInit+0x180>)
 8001fe0:	f000 ff0e 	bl	8002e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ff6:	230b      	movs	r3, #11
 8001ff8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffe:	4619      	mov	r1, r3
 8002000:	480f      	ldr	r0, [pc, #60]	; (8002040 <HAL_ETH_MspInit+0x184>)
 8002002:	f000 fefd 	bl	8002e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002006:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002018:	230b      	movs	r3, #11
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800201c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002020:	4619      	mov	r1, r3
 8002022:	4808      	ldr	r0, [pc, #32]	; (8002044 <HAL_ETH_MspInit+0x188>)
 8002024:	f000 feec 	bl	8002e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002028:	bf00      	nop
 800202a:	3738      	adds	r7, #56	; 0x38
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40028000 	.word	0x40028000
 8002034:	40023800 	.word	0x40023800
 8002038:	40020800 	.word	0x40020800
 800203c:	40020000 	.word	0x40020000
 8002040:	40020400 	.word	0x40020400
 8002044:	40021800 	.word	0x40021800

08002048 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a19      	ldr	r2, [pc, #100]	; (80020cc <HAL_I2C_MspInit+0x84>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d12c      	bne.n	80020c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <HAL_I2C_MspInit+0x88>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_I2C_MspInit+0x88>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_I2C_MspInit+0x88>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002086:	f44f 7310 	mov.w	r3, #576	; 0x240
 800208a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208c:	2312      	movs	r3, #18
 800208e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002098:	2304      	movs	r3, #4
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	480c      	ldr	r0, [pc, #48]	; (80020d4 <HAL_I2C_MspInit+0x8c>)
 80020a4:	f000 feac 	bl	8002e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_I2C_MspInit+0x88>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <HAL_I2C_MspInit+0x88>)
 80020b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020b6:	6413      	str	r3, [r2, #64]	; 0x40
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_I2C_MspInit+0x88>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020c4:	bf00      	nop
 80020c6:	3728      	adds	r7, #40	; 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40005400 	.word	0x40005400
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020400 	.word	0x40020400

080020d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a15      	ldr	r2, [pc, #84]	; (800213c <HAL_TIM_Base_MspInit+0x64>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d10e      	bne.n	8002108 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <HAL_TIM_Base_MspInit+0x68>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a13      	ldr	r2, [pc, #76]	; (8002140 <HAL_TIM_Base_MspInit+0x68>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <HAL_TIM_Base_MspInit+0x68>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002106:	e012      	b.n	800212e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <HAL_TIM_Base_MspInit+0x6c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d10d      	bne.n	800212e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_TIM_Base_MspInit+0x68>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a09      	ldr	r2, [pc, #36]	; (8002140 <HAL_TIM_Base_MspInit+0x68>)
 800211c:	f043 0310 	orr.w	r3, r3, #16
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_TIM_Base_MspInit+0x68>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40000400 	.word	0x40000400
 8002140:	40023800 	.word	0x40023800
 8002144:	40001000 	.word	0x40001000

08002148 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a21      	ldr	r2, [pc, #132]	; (80021ec <HAL_TIM_MspPostInit+0xa4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d13c      	bne.n	80021e4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_TIM_MspPostInit+0xa8>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <HAL_TIM_MspPostInit+0xa8>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_TIM_MspPostInit+0xa8>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_TIM_MspPostInit+0xa8>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <HAL_TIM_MspPostInit+0xa8>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_TIM_MspPostInit+0xa8>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021a2:	2340      	movs	r3, #64	; 0x40
 80021a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021b2:	2302      	movs	r3, #2
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	480d      	ldr	r0, [pc, #52]	; (80021f4 <HAL_TIM_MspPostInit+0xac>)
 80021be:	f000 fe1f 	bl	8002e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80021c2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80021c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021d4:	2302      	movs	r3, #2
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4619      	mov	r1, r3
 80021de:	4806      	ldr	r0, [pc, #24]	; (80021f8 <HAL_TIM_MspPostInit+0xb0>)
 80021e0:	f000 fe0e 	bl	8002e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021e4:	bf00      	nop
 80021e6:	3728      	adds	r7, #40	; 0x28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40020800 	.word	0x40020800

080021fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a19      	ldr	r2, [pc, #100]	; (8002280 <HAL_UART_MspInit+0x84>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d12c      	bne.n	8002278 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_UART_MspInit+0x88>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4a17      	ldr	r2, [pc, #92]	; (8002284 <HAL_UART_MspInit+0x88>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222c:	6413      	str	r3, [r2, #64]	; 0x40
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_UART_MspInit+0x88>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <HAL_UART_MspInit+0x88>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a10      	ldr	r2, [pc, #64]	; (8002284 <HAL_UART_MspInit+0x88>)
 8002244:	f043 0308 	orr.w	r3, r3, #8
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <HAL_UART_MspInit+0x88>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002256:	f44f 7340 	mov.w	r3, #768	; 0x300
 800225a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002264:	2303      	movs	r3, #3
 8002266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002268:	2307      	movs	r3, #7
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	4619      	mov	r1, r3
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <HAL_UART_MspInit+0x8c>)
 8002274:	f000 fdc4 	bl	8002e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002278:	bf00      	nop
 800227a:	3728      	adds	r7, #40	; 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40004800 	.word	0x40004800
 8002284:	40023800 	.word	0x40023800
 8002288:	40020c00 	.word	0x40020c00

0800228c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022ac:	d13f      	bne.n	800232e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_PCD_MspInit+0xac>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a20      	ldr	r2, [pc, #128]	; (8002338 <HAL_PCD_MspInit+0xac>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_PCD_MspInit+0xac>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80022ca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022dc:	230a      	movs	r3, #10
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	4815      	ldr	r0, [pc, #84]	; (800233c <HAL_PCD_MspInit+0xb0>)
 80022e8:	f000 fd8a 	bl	8002e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80022ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4619      	mov	r1, r3
 8002300:	480e      	ldr	r0, [pc, #56]	; (800233c <HAL_PCD_MspInit+0xb0>)
 8002302:	f000 fd7d 	bl	8002e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_PCD_MspInit+0xac>)
 8002308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230a:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <HAL_PCD_MspInit+0xac>)
 800230c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002310:	6353      	str	r3, [r2, #52]	; 0x34
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_PCD_MspInit+0xac>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4a07      	ldr	r2, [pc, #28]	; (8002338 <HAL_PCD_MspInit+0xac>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_PCD_MspInit+0xac>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800232e:	bf00      	nop
 8002330:	3728      	adds	r7, #40	; 0x28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40020000 	.word	0x40020000

08002340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <NMI_Handler+0x4>

08002346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234a:	e7fe      	b.n	800234a <HardFault_Handler+0x4>

0800234c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <MemManage_Handler+0x4>

08002352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002356:	e7fe      	b.n	8002356 <BusFault_Handler+0x4>

08002358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800235c:	e7fe      	b.n	800235c <UsageFault_Handler+0x4>

0800235e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800238c:	f000 f8ce 	bl	800252c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}

08002394 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002398:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800239c:	f000 ff10 	bl	80031c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ac:	4a14      	ldr	r2, [pc, #80]	; (8002400 <_sbrk+0x5c>)
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <_sbrk+0x60>)
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <_sbrk+0x64>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <_sbrk+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d207      	bcs.n	80023e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d4:	f005 fb4a 	bl	8007a6c <__errno>
 80023d8:	4603      	mov	r3, r0
 80023da:	220c      	movs	r2, #12
 80023dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	e009      	b.n	80023f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <_sbrk+0x64>)
 80023f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20030000 	.word	0x20030000
 8002404:	00000400 	.word	0x00000400
 8002408:	20000900 	.word	0x20000900
 800240c:	20000918 	.word	0x20000918

08002410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <SystemInit+0x20>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <SystemInit+0x20>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800246c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002438:	480d      	ldr	r0, [pc, #52]	; (8002470 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800243a:	490e      	ldr	r1, [pc, #56]	; (8002474 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800243c:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800243e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002440:	e002      	b.n	8002448 <LoopCopyDataInit>

08002442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002446:	3304      	adds	r3, #4

08002448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800244c:	d3f9      	bcc.n	8002442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244e:	4a0b      	ldr	r2, [pc, #44]	; (800247c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002450:	4c0b      	ldr	r4, [pc, #44]	; (8002480 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002454:	e001      	b.n	800245a <LoopFillZerobss>

08002456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002458:	3204      	adds	r2, #4

0800245a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800245c:	d3fb      	bcc.n	8002456 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800245e:	f7ff ffd7 	bl	8002410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002462:	f005 fb09 	bl	8007a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002466:	f7ff f8d5 	bl	8001614 <main>
  bx  lr    
 800246a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800246c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002474:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002478:	08008468 	.word	0x08008468
  ldr r2, =_sbss
 800247c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002480:	20000918 	.word	0x20000918

08002484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <ADC_IRQHandler>
	...

08002488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <HAL_Init+0x40>)
 8002492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_Init+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_Init+0x40>)
 800249e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_Init+0x40>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_Init+0x40>)
 80024aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b0:	2003      	movs	r0, #3
 80024b2:	f000 f94f 	bl	8002754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b6:	2000      	movs	r0, #0
 80024b8:	f000 f808 	bl	80024cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024bc:	f7ff fcd6 	bl	8001e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023c00 	.word	0x40023c00

080024cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_InitTick+0x54>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_InitTick+0x58>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4619      	mov	r1, r3
 80024de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f967 	bl	80027be <HAL_SYSTICK_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00e      	b.n	8002518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b0f      	cmp	r3, #15
 80024fe:	d80a      	bhi.n	8002516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002500:	2200      	movs	r2, #0
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f000 f92f 	bl	800276a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800250c:	4a06      	ldr	r2, [pc, #24]	; (8002528 <HAL_InitTick+0x5c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000000 	.word	0x20000000
 8002524:	20000008 	.word	0x20000008
 8002528:	20000004 	.word	0x20000004

0800252c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_IncTick+0x20>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_IncTick+0x24>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4413      	add	r3, r2
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_IncTick+0x24>)
 800253e:	6013      	str	r3, [r2, #0]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000008 	.word	0x20000008
 8002550:	20000904 	.word	0x20000904

08002554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return uwTick;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <HAL_GetTick+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000904 	.word	0x20000904

0800256c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7ff ffee 	bl	8002554 <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002584:	d005      	beq.n	8002592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_Delay+0x44>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002592:	bf00      	nop
 8002594:	f7ff ffde 	bl	8002554 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d8f7      	bhi.n	8002594 <HAL_Delay+0x28>
  {
  }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000008 	.word	0x20000008

080025b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d0:	4013      	ands	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e6:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	60d3      	str	r3, [r2, #12]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002600:	4b04      	ldr	r3, [pc, #16]	; (8002614 <__NVIC_GetPriorityGrouping+0x18>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	f003 0307 	and.w	r3, r3, #7
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	2b00      	cmp	r3, #0
 8002628:	db0b      	blt.n	8002642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	f003 021f 	and.w	r2, r3, #31
 8002630:	4907      	ldr	r1, [pc, #28]	; (8002650 <__NVIC_EnableIRQ+0x38>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	2001      	movs	r0, #1
 800263a:	fa00 f202 	lsl.w	r2, r0, r2
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000e100 	.word	0xe000e100

08002654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	2b00      	cmp	r3, #0
 8002666:	db0a      	blt.n	800267e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	490c      	ldr	r1, [pc, #48]	; (80026a0 <__NVIC_SetPriority+0x4c>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	0112      	lsls	r2, r2, #4
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	440b      	add	r3, r1
 8002678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800267c:	e00a      	b.n	8002694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4908      	ldr	r1, [pc, #32]	; (80026a4 <__NVIC_SetPriority+0x50>)
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	3b04      	subs	r3, #4
 800268c:	0112      	lsls	r2, r2, #4
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	440b      	add	r3, r1
 8002692:	761a      	strb	r2, [r3, #24]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f1c3 0307 	rsb	r3, r3, #7
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	bf28      	it	cs
 80026c6:	2304      	movcs	r3, #4
 80026c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2b06      	cmp	r3, #6
 80026d0:	d902      	bls.n	80026d8 <NVIC_EncodePriority+0x30>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3b03      	subs	r3, #3
 80026d6:	e000      	b.n	80026da <NVIC_EncodePriority+0x32>
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	f04f 32ff 	mov.w	r2, #4294967295
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	401a      	ands	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43d9      	mvns	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	4313      	orrs	r3, r2
         );
}
 8002702:	4618      	mov	r0, r3
 8002704:	3724      	adds	r7, #36	; 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002720:	d301      	bcc.n	8002726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002722:	2301      	movs	r3, #1
 8002724:	e00f      	b.n	8002746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <SysTick_Config+0x40>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800272e:	210f      	movs	r1, #15
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	f7ff ff8e 	bl	8002654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <SysTick_Config+0x40>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273e:	4b04      	ldr	r3, [pc, #16]	; (8002750 <SysTick_Config+0x40>)
 8002740:	2207      	movs	r2, #7
 8002742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	e000e010 	.word	0xe000e010

08002754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ff29 	bl	80025b4 <__NVIC_SetPriorityGrouping>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800277c:	f7ff ff3e 	bl	80025fc <__NVIC_GetPriorityGrouping>
 8002780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	6978      	ldr	r0, [r7, #20]
 8002788:	f7ff ff8e 	bl	80026a8 <NVIC_EncodePriority>
 800278c:	4602      	mov	r2, r0
 800278e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff5d 	bl	8002654 <__NVIC_SetPriority>
}
 800279a:	bf00      	nop
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff31 	bl	8002618 <__NVIC_EnableIRQ>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ffa2 	bl	8002710 <SysTick_Config>
 80027cc:	4603      	mov	r3, r0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e06c      	b.n	80028c4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2223      	movs	r2, #35	; 0x23
 80027f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff fb5d 	bl	8001ebc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b31      	ldr	r3, [pc, #196]	; (80028cc <HAL_ETH_Init+0xf4>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a30      	ldr	r2, [pc, #192]	; (80028cc <HAL_ETH_Init+0xf4>)
 800280c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b2e      	ldr	r3, [pc, #184]	; (80028cc <HAL_ETH_Init+0xf4>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800281e:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <HAL_ETH_Init+0xf8>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a2b      	ldr	r2, [pc, #172]	; (80028d0 <HAL_ETH_Init+0xf8>)
 8002824:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002828:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800282a:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <HAL_ETH_Init+0xf8>)
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	4927      	ldr	r1, [pc, #156]	; (80028d0 <HAL_ETH_Init+0xf8>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002838:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <HAL_ETH_Init+0xf8>)
 800283a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6812      	ldr	r2, [r2, #0]
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002852:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002854:	f7ff fe7e 	bl	8002554 <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800285a:	e011      	b.n	8002880 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800285c:	f7ff fe7a 	bl	8002554 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800286a:	d909      	bls.n	8002880 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2204      	movs	r2, #4
 8002870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	22e0      	movs	r2, #224	; 0xe0
 8002878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e021      	b.n	80028c4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1e4      	bne.n	800285c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f944 	bl	8002b20 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f9eb 	bl	8002c74 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fa41 	bl	8002d26 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	461a      	mov	r2, r3
 80028aa:	2100      	movs	r1, #0
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f9a9 	bl	8002c04 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2210      	movs	r2, #16
 80028be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40013800 	.word	0x40013800

080028d4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <ETH_SetMACConfig+0x134>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	7c1b      	ldrb	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d102      	bne.n	80028fc <ETH_SetMACConfig+0x28>
 80028f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80028fa:	e000      	b.n	80028fe <ETH_SetMACConfig+0x2a>
 80028fc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	7c5b      	ldrb	r3, [r3, #17]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <ETH_SetMACConfig+0x38>
 8002906:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800290a:	e000      	b.n	800290e <ETH_SetMACConfig+0x3a>
 800290c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800290e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002914:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	7fdb      	ldrb	r3, [r3, #31]
 800291a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800291c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002922:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	7f92      	ldrb	r2, [r2, #30]
 8002928:	2a00      	cmp	r2, #0
 800292a:	d102      	bne.n	8002932 <ETH_SetMACConfig+0x5e>
 800292c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002930:	e000      	b.n	8002934 <ETH_SetMACConfig+0x60>
 8002932:	2200      	movs	r2, #0
                        macconf->Speed |
 8002934:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	7f1b      	ldrb	r3, [r3, #28]
 800293a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800293c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002942:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	791b      	ldrb	r3, [r3, #4]
 8002948:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800294a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002952:	2a00      	cmp	r2, #0
 8002954:	d102      	bne.n	800295c <ETH_SetMACConfig+0x88>
 8002956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800295a:	e000      	b.n	800295e <ETH_SetMACConfig+0x8a>
 800295c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800295e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	7bdb      	ldrb	r3, [r3, #15]
 8002964:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002966:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800296c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002974:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002976:	4313      	orrs	r3, r2
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800298e:	2001      	movs	r0, #1
 8002990:	f7ff fdec 	bl	800256c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80029aa:	4013      	ands	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029ba:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 80029c0:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80029c8:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80029d0:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029d8:	4313      	orrs	r3, r2
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029f0:	2001      	movs	r0, #1
 80029f2:	f7ff fdbb 	bl	800256c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	619a      	str	r2, [r3, #24]
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	ff20810f 	.word	0xff20810f

08002a0c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4b3d      	ldr	r3, [pc, #244]	; (8002b1c <ETH_SetDMAConfig+0x110>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	7b1b      	ldrb	r3, [r3, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d102      	bne.n	8002a38 <ETH_SetDMAConfig+0x2c>
 8002a32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a36:	e000      	b.n	8002a3a <ETH_SetDMAConfig+0x2e>
 8002a38:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	7b5b      	ldrb	r3, [r3, #13]
 8002a3e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a40:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	7f52      	ldrb	r2, [r2, #29]
 8002a46:	2a00      	cmp	r2, #0
 8002a48:	d102      	bne.n	8002a50 <ETH_SetDMAConfig+0x44>
 8002a4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a4e:	e000      	b.n	8002a52 <ETH_SetDMAConfig+0x46>
 8002a50:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a52:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	7b9b      	ldrb	r3, [r3, #14]
 8002a58:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a5a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	7f1b      	ldrb	r3, [r3, #28]
 8002a66:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002a68:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	7f9b      	ldrb	r3, [r3, #30]
 8002a6e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a70:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a76:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a7e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a80:	4313      	orrs	r3, r2
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a90:	461a      	mov	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	f7ff fd62 	bl	800256c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	791b      	ldrb	r3, [r3, #4]
 8002aba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ac0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002ac6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002acc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ad4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002ad6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ade:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ae4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002aee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002af2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b00:	2001      	movs	r0, #1
 8002b02:	f7ff fd33 	bl	800256c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6013      	str	r3, [r2, #0]
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	f8de3f23 	.word	0xf8de3f23

08002b20 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b0a6      	sub	sp, #152	; 0x98
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002b34:	2300      	movs	r3, #0
 8002b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b86:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b98:	4619      	mov	r1, r3
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff fe9a 	bl	80028d4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bd4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002bd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bda:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002be0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002bf0:	f107 0308 	add.w	r3, r7, #8
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff ff08 	bl	8002a0c <ETH_SetDMAConfig>
}
 8002bfc:	bf00      	nop
 8002bfe:	3798      	adds	r7, #152	; 0x98
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3305      	adds	r3, #5
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	3204      	adds	r2, #4
 8002c1c:	7812      	ldrb	r2, [r2, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <ETH_MACAddressConfig+0x68>)
 8002c26:	4413      	add	r3, r2
 8002c28:	461a      	mov	r2, r3
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3303      	adds	r3, #3
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	061a      	lsls	r2, r3, #24
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3302      	adds	r3, #2
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	041b      	lsls	r3, r3, #16
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3301      	adds	r3, #1
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	7812      	ldrb	r2, [r2, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <ETH_MACAddressConfig+0x6c>)
 8002c56:	4413      	add	r3, r2
 8002c58:	461a      	mov	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	6013      	str	r3, [r2, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40028040 	.word	0x40028040
 8002c70:	40028044 	.word	0x40028044

08002c74 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	e03e      	b.n	8002d00 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68d9      	ldr	r1, [r3, #12]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	3206      	adds	r2, #6
 8002cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d80c      	bhi.n	8002ce4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68d9      	ldr	r1, [r3, #12]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	461a      	mov	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	e004      	b.n	8002cee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d9bd      	bls.n	8002c82 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d18:	611a      	str	r2, [r3, #16]
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	e046      	b.n	8002dc2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6919      	ldr	r1, [r3, #16]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	440b      	add	r3, r1
 8002d44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2200      	movs	r2, #0
 8002d62:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2200      	movs	r2, #0
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d70:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002d78:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	3212      	adds	r2, #18
 8002d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d80c      	bhi.n	8002db2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6919      	ldr	r1, [r3, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	461a      	mov	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	60da      	str	r2, [r3, #12]
 8002db0:	e004      	b.n	8002dbc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	461a      	mov	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d9b5      	bls.n	8002d34 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df2:	60da      	str	r2, [r3, #12]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b089      	sub	sp, #36	; 0x24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	e177      	b.n	800310c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	f040 8166 	bne.w	8003106 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d005      	beq.n	8002e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d130      	bne.n	8002eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e88:	2201      	movs	r2, #1
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 0201 	and.w	r2, r3, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d017      	beq.n	8002ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d123      	bne.n	8002f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	08da      	lsrs	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3208      	adds	r2, #8
 8002f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	220f      	movs	r2, #15
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	08da      	lsrs	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3208      	adds	r2, #8
 8002f3e:	69b9      	ldr	r1, [r7, #24]
 8002f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	2203      	movs	r2, #3
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0203 	and.w	r2, r3, #3
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80c0 	beq.w	8003106 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	4b66      	ldr	r3, [pc, #408]	; (8003124 <HAL_GPIO_Init+0x324>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	4a65      	ldr	r2, [pc, #404]	; (8003124 <HAL_GPIO_Init+0x324>)
 8002f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f94:	6453      	str	r3, [r2, #68]	; 0x44
 8002f96:	4b63      	ldr	r3, [pc, #396]	; (8003124 <HAL_GPIO_Init+0x324>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fa2:	4a61      	ldr	r2, [pc, #388]	; (8003128 <HAL_GPIO_Init+0x328>)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	3302      	adds	r3, #2
 8002faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	220f      	movs	r2, #15
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_GPIO_Init+0x32c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d037      	beq.n	800303e <HAL_GPIO_Init+0x23e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a57      	ldr	r2, [pc, #348]	; (8003130 <HAL_GPIO_Init+0x330>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d031      	beq.n	800303a <HAL_GPIO_Init+0x23a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a56      	ldr	r2, [pc, #344]	; (8003134 <HAL_GPIO_Init+0x334>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d02b      	beq.n	8003036 <HAL_GPIO_Init+0x236>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a55      	ldr	r2, [pc, #340]	; (8003138 <HAL_GPIO_Init+0x338>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d025      	beq.n	8003032 <HAL_GPIO_Init+0x232>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a54      	ldr	r2, [pc, #336]	; (800313c <HAL_GPIO_Init+0x33c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01f      	beq.n	800302e <HAL_GPIO_Init+0x22e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a53      	ldr	r2, [pc, #332]	; (8003140 <HAL_GPIO_Init+0x340>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d019      	beq.n	800302a <HAL_GPIO_Init+0x22a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a52      	ldr	r2, [pc, #328]	; (8003144 <HAL_GPIO_Init+0x344>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d013      	beq.n	8003026 <HAL_GPIO_Init+0x226>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a51      	ldr	r2, [pc, #324]	; (8003148 <HAL_GPIO_Init+0x348>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00d      	beq.n	8003022 <HAL_GPIO_Init+0x222>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a50      	ldr	r2, [pc, #320]	; (800314c <HAL_GPIO_Init+0x34c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <HAL_GPIO_Init+0x21e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4f      	ldr	r2, [pc, #316]	; (8003150 <HAL_GPIO_Init+0x350>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d101      	bne.n	800301a <HAL_GPIO_Init+0x21a>
 8003016:	2309      	movs	r3, #9
 8003018:	e012      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800301a:	230a      	movs	r3, #10
 800301c:	e010      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800301e:	2308      	movs	r3, #8
 8003020:	e00e      	b.n	8003040 <HAL_GPIO_Init+0x240>
 8003022:	2307      	movs	r3, #7
 8003024:	e00c      	b.n	8003040 <HAL_GPIO_Init+0x240>
 8003026:	2306      	movs	r3, #6
 8003028:	e00a      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800302a:	2305      	movs	r3, #5
 800302c:	e008      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800302e:	2304      	movs	r3, #4
 8003030:	e006      	b.n	8003040 <HAL_GPIO_Init+0x240>
 8003032:	2303      	movs	r3, #3
 8003034:	e004      	b.n	8003040 <HAL_GPIO_Init+0x240>
 8003036:	2302      	movs	r3, #2
 8003038:	e002      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800303e:	2300      	movs	r3, #0
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	f002 0203 	and.w	r2, r2, #3
 8003046:	0092      	lsls	r2, r2, #2
 8003048:	4093      	lsls	r3, r2
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003050:	4935      	ldr	r1, [pc, #212]	; (8003128 <HAL_GPIO_Init+0x328>)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	3302      	adds	r3, #2
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800305e:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <HAL_GPIO_Init+0x354>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003082:	4a34      	ldr	r2, [pc, #208]	; (8003154 <HAL_GPIO_Init+0x354>)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003088:	4b32      	ldr	r3, [pc, #200]	; (8003154 <HAL_GPIO_Init+0x354>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030ac:	4a29      	ldr	r2, [pc, #164]	; (8003154 <HAL_GPIO_Init+0x354>)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030b2:	4b28      	ldr	r3, [pc, #160]	; (8003154 <HAL_GPIO_Init+0x354>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030d6:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <HAL_GPIO_Init+0x354>)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030dc:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_GPIO_Init+0x354>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003100:	4a14      	ldr	r2, [pc, #80]	; (8003154 <HAL_GPIO_Init+0x354>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3301      	adds	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b0f      	cmp	r3, #15
 8003110:	f67f ae84 	bls.w	8002e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3724      	adds	r7, #36	; 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	40013800 	.word	0x40013800
 800312c:	40020000 	.word	0x40020000
 8003130:	40020400 	.word	0x40020400
 8003134:	40020800 	.word	0x40020800
 8003138:	40020c00 	.word	0x40020c00
 800313c:	40021000 	.word	0x40021000
 8003140:	40021400 	.word	0x40021400
 8003144:	40021800 	.word	0x40021800
 8003148:	40021c00 	.word	0x40021c00
 800314c:	40022000 	.word	0x40022000
 8003150:	40022400 	.word	0x40022400
 8003154:	40013c00 	.word	0x40013c00

08003158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
 8003164:	4613      	mov	r3, r2
 8003166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003168:	787b      	ldrb	r3, [r7, #1]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800316e:	887a      	ldrh	r2, [r7, #2]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003174:	e003      	b.n	800317e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003176:	887b      	ldrh	r3, [r7, #2]
 8003178:	041a      	lsls	r2, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	619a      	str	r2, [r3, #24]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800318a:	b480      	push	{r7}
 800318c:	b085      	sub	sp, #20
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	460b      	mov	r3, r1
 8003194:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800319c:	887a      	ldrh	r2, [r7, #2]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4013      	ands	r3, r2
 80031a2:	041a      	lsls	r2, r3, #16
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	43d9      	mvns	r1, r3
 80031a8:	887b      	ldrh	r3, [r7, #2]
 80031aa:	400b      	ands	r3, r1
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	619a      	str	r2, [r3, #24]
}
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031ca:	4b08      	ldr	r3, [pc, #32]	; (80031ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d006      	beq.n	80031e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031d6:	4a05      	ldr	r2, [pc, #20]	; (80031ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe f9f8 	bl	80015d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40013c00 	.word	0x40013c00

080031f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e12b      	b.n	800345a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fe ff16 	bl	8002048 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2224      	movs	r2, #36	; 0x24
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003242:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003252:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003254:	f001 ff14 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 8003258:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4a81      	ldr	r2, [pc, #516]	; (8003464 <HAL_I2C_Init+0x274>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d807      	bhi.n	8003274 <HAL_I2C_Init+0x84>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4a80      	ldr	r2, [pc, #512]	; (8003468 <HAL_I2C_Init+0x278>)
 8003268:	4293      	cmp	r3, r2
 800326a:	bf94      	ite	ls
 800326c:	2301      	movls	r3, #1
 800326e:	2300      	movhi	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	e006      	b.n	8003282 <HAL_I2C_Init+0x92>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a7d      	ldr	r2, [pc, #500]	; (800346c <HAL_I2C_Init+0x27c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	bf94      	ite	ls
 800327c:	2301      	movls	r3, #1
 800327e:	2300      	movhi	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e0e7      	b.n	800345a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4a78      	ldr	r2, [pc, #480]	; (8003470 <HAL_I2C_Init+0x280>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	0c9b      	lsrs	r3, r3, #18
 8003294:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4a6a      	ldr	r2, [pc, #424]	; (8003464 <HAL_I2C_Init+0x274>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d802      	bhi.n	80032c4 <HAL_I2C_Init+0xd4>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	3301      	adds	r3, #1
 80032c2:	e009      	b.n	80032d8 <HAL_I2C_Init+0xe8>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	4a69      	ldr	r2, [pc, #420]	; (8003474 <HAL_I2C_Init+0x284>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	099b      	lsrs	r3, r3, #6
 80032d6:	3301      	adds	r3, #1
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	430b      	orrs	r3, r1
 80032de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	495c      	ldr	r1, [pc, #368]	; (8003464 <HAL_I2C_Init+0x274>)
 80032f4:	428b      	cmp	r3, r1
 80032f6:	d819      	bhi.n	800332c <HAL_I2C_Init+0x13c>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1e59      	subs	r1, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	fbb1 f3f3 	udiv	r3, r1, r3
 8003306:	1c59      	adds	r1, r3, #1
 8003308:	f640 73fc 	movw	r3, #4092	; 0xffc
 800330c:	400b      	ands	r3, r1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_I2C_Init+0x138>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1e59      	subs	r1, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003320:	3301      	adds	r3, #1
 8003322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003326:	e051      	b.n	80033cc <HAL_I2C_Init+0x1dc>
 8003328:	2304      	movs	r3, #4
 800332a:	e04f      	b.n	80033cc <HAL_I2C_Init+0x1dc>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d111      	bne.n	8003358 <HAL_I2C_Init+0x168>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1e58      	subs	r0, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	440b      	add	r3, r1
 8003342:	fbb0 f3f3 	udiv	r3, r0, r3
 8003346:	3301      	adds	r3, #1
 8003348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf0c      	ite	eq
 8003350:	2301      	moveq	r3, #1
 8003352:	2300      	movne	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	e012      	b.n	800337e <HAL_I2C_Init+0x18e>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1e58      	subs	r0, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	0099      	lsls	r1, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	fbb0 f3f3 	udiv	r3, r0, r3
 800336e:	3301      	adds	r3, #1
 8003370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_Init+0x196>
 8003382:	2301      	movs	r3, #1
 8003384:	e022      	b.n	80033cc <HAL_I2C_Init+0x1dc>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10e      	bne.n	80033ac <HAL_I2C_Init+0x1bc>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1e58      	subs	r0, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6859      	ldr	r1, [r3, #4]
 8003396:	460b      	mov	r3, r1
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	440b      	add	r3, r1
 800339c:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a0:	3301      	adds	r3, #1
 80033a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033aa:	e00f      	b.n	80033cc <HAL_I2C_Init+0x1dc>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1e58      	subs	r0, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	0099      	lsls	r1, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c2:	3301      	adds	r3, #1
 80033c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	6809      	ldr	r1, [r1, #0]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6911      	ldr	r1, [r2, #16]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68d2      	ldr	r2, [r2, #12]
 8003406:	4311      	orrs	r1, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	430b      	orrs	r3, r1
 800340e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	000186a0 	.word	0x000186a0
 8003468:	001e847f 	.word	0x001e847f
 800346c:	003d08ff 	.word	0x003d08ff
 8003470:	431bde83 	.word	0x431bde83
 8003474:	10624dd3 	.word	0x10624dd3

08003478 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	461a      	mov	r2, r3
 8003484:	460b      	mov	r3, r1
 8003486:	817b      	strh	r3, [r7, #10]
 8003488:	4613      	mov	r3, r2
 800348a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7ff f862 	bl	8002554 <HAL_GetTick>
 8003490:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b20      	cmp	r3, #32
 800349c:	f040 80e0 	bne.w	8003660 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2319      	movs	r3, #25
 80034a6:	2201      	movs	r2, #1
 80034a8:	4970      	ldr	r1, [pc, #448]	; (800366c <HAL_I2C_Master_Transmit+0x1f4>)
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fe02 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
 80034b8:	e0d3      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_I2C_Master_Transmit+0x50>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e0cc      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d007      	beq.n	80034ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2221      	movs	r2, #33	; 0x21
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2210      	movs	r2, #16
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	893a      	ldrh	r2, [r7, #8]
 800351e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a50      	ldr	r2, [pc, #320]	; (8003670 <HAL_I2C_Master_Transmit+0x1f8>)
 800352e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003530:	8979      	ldrh	r1, [r7, #10]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	6a3a      	ldr	r2, [r7, #32]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 fbbc 	bl	8003cb4 <I2C_MasterRequestWrite>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e08d      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800355c:	e066      	b.n	800362c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	6a39      	ldr	r1, [r7, #32]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fe7c 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00d      	beq.n	800358a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	2b04      	cmp	r3, #4
 8003574:	d107      	bne.n	8003586 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003584:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e06b      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d11b      	bne.n	8003600 <HAL_I2C_Master_Transmit+0x188>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d017      	beq.n	8003600 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	781a      	ldrb	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	6a39      	ldr	r1, [r7, #32]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fe6c 	bl	80042e2 <I2C_WaitOnBTFFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00d      	beq.n	800362c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	2b04      	cmp	r3, #4
 8003616:	d107      	bne.n	8003628 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003626:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e01a      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003630:	2b00      	cmp	r3, #0
 8003632:	d194      	bne.n	800355e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e000      	b.n	8003662 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
  }
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	00100002 	.word	0x00100002
 8003670:	ffff0000 	.word	0xffff0000

08003674 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	4608      	mov	r0, r1
 800367e:	4611      	mov	r1, r2
 8003680:	461a      	mov	r2, r3
 8003682:	4603      	mov	r3, r0
 8003684:	817b      	strh	r3, [r7, #10]
 8003686:	460b      	mov	r3, r1
 8003688:	813b      	strh	r3, [r7, #8]
 800368a:	4613      	mov	r3, r2
 800368c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800368e:	f7fe ff61 	bl	8002554 <HAL_GetTick>
 8003692:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b20      	cmp	r3, #32
 800369e:	f040 80d9 	bne.w	8003854 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	2319      	movs	r3, #25
 80036a8:	2201      	movs	r2, #1
 80036aa:	496d      	ldr	r1, [pc, #436]	; (8003860 <HAL_I2C_Mem_Write+0x1ec>)
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fd01 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036b8:	2302      	movs	r3, #2
 80036ba:	e0cc      	b.n	8003856 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_I2C_Mem_Write+0x56>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e0c5      	b.n	8003856 <HAL_I2C_Mem_Write+0x1e2>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d007      	beq.n	80036f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2221      	movs	r2, #33	; 0x21
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2240      	movs	r2, #64	; 0x40
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a3a      	ldr	r2, [r7, #32]
 800371a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003720:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a4d      	ldr	r2, [pc, #308]	; (8003864 <HAL_I2C_Mem_Write+0x1f0>)
 8003730:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003732:	88f8      	ldrh	r0, [r7, #6]
 8003734:	893a      	ldrh	r2, [r7, #8]
 8003736:	8979      	ldrh	r1, [r7, #10]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	4603      	mov	r3, r0
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fb38 	bl	8003db8 <I2C_RequestMemoryWrite>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d052      	beq.n	80037f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e081      	b.n	8003856 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 fd82 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00d      	beq.n	800377e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b04      	cmp	r3, #4
 8003768:	d107      	bne.n	800377a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003778:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e06b      	b.n	8003856 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d11b      	bne.n	80037f4 <HAL_I2C_Mem_Write+0x180>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d017      	beq.n	80037f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	781a      	ldrb	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1aa      	bne.n	8003752 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fd6e 	bl	80042e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00d      	beq.n	8003828 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	2b04      	cmp	r3, #4
 8003812:	d107      	bne.n	8003824 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003822:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e016      	b.n	8003856 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	e000      	b.n	8003856 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
  }
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	00100002 	.word	0x00100002
 8003864:	ffff0000 	.word	0xffff0000

08003868 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08c      	sub	sp, #48	; 0x30
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	4608      	mov	r0, r1
 8003872:	4611      	mov	r1, r2
 8003874:	461a      	mov	r2, r3
 8003876:	4603      	mov	r3, r0
 8003878:	817b      	strh	r3, [r7, #10]
 800387a:	460b      	mov	r3, r1
 800387c:	813b      	strh	r3, [r7, #8]
 800387e:	4613      	mov	r3, r2
 8003880:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003882:	f7fe fe67 	bl	8002554 <HAL_GetTick>
 8003886:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b20      	cmp	r3, #32
 8003892:	f040 8208 	bne.w	8003ca6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	2319      	movs	r3, #25
 800389c:	2201      	movs	r2, #1
 800389e:	497b      	ldr	r1, [pc, #492]	; (8003a8c <HAL_I2C_Mem_Read+0x224>)
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fc07 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038ac:	2302      	movs	r3, #2
 80038ae:	e1fb      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_I2C_Mem_Read+0x56>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e1f4      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d007      	beq.n	80038e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2222      	movs	r2, #34	; 0x22
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2240      	movs	r2, #64	; 0x40
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800390e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a5b      	ldr	r2, [pc, #364]	; (8003a90 <HAL_I2C_Mem_Read+0x228>)
 8003924:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003926:	88f8      	ldrh	r0, [r7, #6]
 8003928:	893a      	ldrh	r2, [r7, #8]
 800392a:	8979      	ldrh	r1, [r7, #10]
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	4603      	mov	r3, r0
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fad4 	bl	8003ee4 <I2C_RequestMemoryRead>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e1b0      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394a:	2b00      	cmp	r3, #0
 800394c:	d113      	bne.n	8003976 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394e:	2300      	movs	r3, #0
 8003950:	623b      	str	r3, [r7, #32]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	623b      	str	r3, [r7, #32]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	623b      	str	r3, [r7, #32]
 8003962:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	e184      	b.n	8003c80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397a:	2b01      	cmp	r3, #1
 800397c:	d11b      	bne.n	80039b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e164      	b.n	8003c80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d11b      	bne.n	80039f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039de:	2300      	movs	r3, #0
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	e144      	b.n	8003c80 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a0c:	e138      	b.n	8003c80 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	f200 80f1 	bhi.w	8003bfa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d123      	bne.n	8003a68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fc9d 	bl	8004364 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e139      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a66:	e10b      	b.n	8003c80 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d14e      	bne.n	8003b0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	2200      	movs	r2, #0
 8003a78:	4906      	ldr	r1, [pc, #24]	; (8003a94 <HAL_I2C_Mem_Read+0x22c>)
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fb1a 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d008      	beq.n	8003a98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e10e      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
 8003a8a:	bf00      	nop
 8003a8c:	00100002 	.word	0x00100002
 8003a90:	ffff0000 	.word	0xffff0000
 8003a94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b0c:	e0b8      	b.n	8003c80 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b14:	2200      	movs	r2, #0
 8003b16:	4966      	ldr	r1, [pc, #408]	; (8003cb0 <HAL_I2C_Mem_Read+0x448>)
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 facb 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0bf      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b70:	2200      	movs	r2, #0
 8003b72:	494f      	ldr	r1, [pc, #316]	; (8003cb0 <HAL_I2C_Mem_Read+0x448>)
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fa9d 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e091      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bf8:	e042      	b.n	8003c80 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 fbb0 	bl	8004364 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e04c      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d118      	bne.n	8003c80 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f47f aec2 	bne.w	8003a0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e000      	b.n	8003ca8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
  }
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3728      	adds	r7, #40	; 0x28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	00010004 	.word	0x00010004

08003cb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d006      	beq.n	8003cde <I2C_MasterRequestWrite+0x2a>
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d003      	beq.n	8003cde <I2C_MasterRequestWrite+0x2a>
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cdc:	d108      	bne.n	8003cf0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e00b      	b.n	8003d08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	2b12      	cmp	r3, #18
 8003cf6:	d107      	bne.n	8003d08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f9cd 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2e:	d103      	bne.n	8003d38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e035      	b.n	8003da8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d44:	d108      	bne.n	8003d58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d46:	897b      	ldrh	r3, [r7, #10]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d54:	611a      	str	r2, [r3, #16]
 8003d56:	e01b      	b.n	8003d90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d58:	897b      	ldrh	r3, [r7, #10]
 8003d5a:	11db      	asrs	r3, r3, #7
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f003 0306 	and.w	r3, r3, #6
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f063 030f 	orn	r3, r3, #15
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	490e      	ldr	r1, [pc, #56]	; (8003db0 <I2C_MasterRequestWrite+0xfc>)
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 f9f3 	bl	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e010      	b.n	8003da8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d86:	897b      	ldrh	r3, [r7, #10]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4907      	ldr	r1, [pc, #28]	; (8003db4 <I2C_MasterRequestWrite+0x100>)
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f9e3 	bl	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	00010008 	.word	0x00010008
 8003db4:	00010002 	.word	0x00010002

08003db8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	817b      	strh	r3, [r7, #10]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	813b      	strh	r3, [r7, #8]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f960 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e08:	d103      	bne.n	8003e12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e05f      	b.n	8003ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e16:	897b      	ldrh	r3, [r7, #10]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	6a3a      	ldr	r2, [r7, #32]
 8003e2a:	492d      	ldr	r1, [pc, #180]	; (8003ee0 <I2C_RequestMemoryWrite+0x128>)
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f998 	bl	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e04c      	b.n	8003ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e54:	6a39      	ldr	r1, [r7, #32]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fa02 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d107      	bne.n	8003e7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e02b      	b.n	8003ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d105      	bne.n	8003e90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e84:	893b      	ldrh	r3, [r7, #8]
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	611a      	str	r2, [r3, #16]
 8003e8e:	e021      	b.n	8003ed4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e90:	893b      	ldrh	r3, [r7, #8]
 8003e92:	0a1b      	lsrs	r3, r3, #8
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea0:	6a39      	ldr	r1, [r7, #32]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f9dc 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00d      	beq.n	8003eca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d107      	bne.n	8003ec6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e005      	b.n	8003ed6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eca:	893b      	ldrh	r3, [r7, #8]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	00010002 	.word	0x00010002

08003ee4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	4608      	mov	r0, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	817b      	strh	r3, [r7, #10]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	813b      	strh	r3, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f8c2 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f44:	d103      	bne.n	8003f4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0aa      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f52:	897b      	ldrh	r3, [r7, #10]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	6a3a      	ldr	r2, [r7, #32]
 8003f66:	4952      	ldr	r1, [pc, #328]	; (80040b0 <I2C_RequestMemoryRead+0x1cc>)
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f8fa 	bl	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e097      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f90:	6a39      	ldr	r1, [r7, #32]
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f964 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00d      	beq.n	8003fba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d107      	bne.n	8003fb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e076      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d105      	bne.n	8003fcc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc0:	893b      	ldrh	r3, [r7, #8]
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	611a      	str	r2, [r3, #16]
 8003fca:	e021      	b.n	8004010 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fcc:	893b      	ldrh	r3, [r7, #8]
 8003fce:	0a1b      	lsrs	r3, r3, #8
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fdc:	6a39      	ldr	r1, [r7, #32]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f93e 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d107      	bne.n	8004002 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004000:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e050      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004006:	893b      	ldrh	r3, [r7, #8]
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004012:	6a39      	ldr	r1, [r7, #32]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f923 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00d      	beq.n	800403c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	2b04      	cmp	r3, #4
 8004026:	d107      	bne.n	8004038 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004036:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e035      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800404a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	2200      	movs	r2, #0
 8004054:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f82b 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00d      	beq.n	8004080 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004072:	d103      	bne.n	800407c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800407a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e013      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004080:	897b      	ldrh	r3, [r7, #10]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	6a3a      	ldr	r2, [r7, #32]
 8004094:	4906      	ldr	r1, [pc, #24]	; (80040b0 <I2C_RequestMemoryRead+0x1cc>)
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f863 	bl	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	00010002 	.word	0x00010002

080040b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c4:	e025      	b.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d021      	beq.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fe fa41 	bl	8002554 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d116      	bne.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e023      	b.n	800415a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	0c1b      	lsrs	r3, r3, #16
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d10d      	bne.n	8004138 <I2C_WaitOnFlagUntilTimeout+0x84>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	43da      	mvns	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4013      	ands	r3, r2
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	bf0c      	ite	eq
 800412e:	2301      	moveq	r3, #1
 8004130:	2300      	movne	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	e00c      	b.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	43da      	mvns	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4013      	ands	r3, r2
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf0c      	ite	eq
 800414a:	2301      	moveq	r3, #1
 800414c:	2300      	movne	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	429a      	cmp	r2, r3
 8004156:	d0b6      	beq.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004170:	e051      	b.n	8004216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004180:	d123      	bne.n	80041ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004190:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800419a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f043 0204 	orr.w	r2, r3, #4
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e046      	b.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d0:	d021      	beq.n	8004216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d2:	f7fe f9bf 	bl	8002554 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d302      	bcc.n	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d116      	bne.n	8004216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f043 0220 	orr.w	r2, r3, #32
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e020      	b.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	0c1b      	lsrs	r3, r3, #16
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d10c      	bne.n	800423a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	43da      	mvns	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4013      	ands	r3, r2
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	bf14      	ite	ne
 8004232:	2301      	movne	r3, #1
 8004234:	2300      	moveq	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	e00b      	b.n	8004252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	43da      	mvns	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4013      	ands	r3, r2
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d18d      	bne.n	8004172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800426c:	e02d      	b.n	80042ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f8ce 	bl	8004410 <I2C_IsAcknowledgeFailed>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e02d      	b.n	80042da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004284:	d021      	beq.n	80042ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004286:	f7fe f965 	bl	8002554 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	429a      	cmp	r2, r3
 8004294:	d302      	bcc.n	800429c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d116      	bne.n	80042ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f043 0220 	orr.w	r2, r3, #32
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e007      	b.n	80042da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d4:	2b80      	cmp	r3, #128	; 0x80
 80042d6:	d1ca      	bne.n	800426e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042ee:	e02d      	b.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f88d 	bl	8004410 <I2C_IsAcknowledgeFailed>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e02d      	b.n	800435c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d021      	beq.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004308:	f7fe f924 	bl	8002554 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	d302      	bcc.n	800431e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d116      	bne.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e007      	b.n	800435c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b04      	cmp	r3, #4
 8004358:	d1ca      	bne.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004370:	e042      	b.n	80043f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b10      	cmp	r3, #16
 800437e:	d119      	bne.n	80043b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0210 	mvn.w	r2, #16
 8004388:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e029      	b.n	8004408 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b4:	f7fe f8ce 	bl	8002554 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d302      	bcc.n	80043ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d116      	bne.n	80043f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	f043 0220 	orr.w	r2, r3, #32
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e007      	b.n	8004408 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d1b5      	bne.n	8004372 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004426:	d11b      	bne.n	8004460 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004430:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	f043 0204 	orr.w	r2, r3, #4
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b20      	cmp	r3, #32
 8004482:	d129      	bne.n	80044d8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2224      	movs	r2, #36	; 0x24
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0201 	bic.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0210 	bic.w	r2, r2, #16
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	e000      	b.n	80044da <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80044d8:	2302      	movs	r3, #2
  }
}
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d12a      	bne.n	8004556 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2224      	movs	r2, #36	; 0x24
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0201 	bic.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004520:	89fb      	ldrh	r3, [r7, #14]
 8004522:	f023 030f 	bic.w	r3, r3, #15
 8004526:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	b29a      	uxth	r2, r3
 800452c:	89fb      	ldrh	r3, [r7, #14]
 800452e:	4313      	orrs	r3, r2
 8004530:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	89fa      	ldrh	r2, [r7, #14]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	e000      	b.n	8004558 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004556:	2302      	movs	r3, #2
  }
}
 8004558:	4618      	mov	r0, r3
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004566:	b08f      	sub	sp, #60	; 0x3c
 8004568:	af0a      	add	r7, sp, #40	; 0x28
 800456a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e10f      	b.n	8004796 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d106      	bne.n	8004596 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7fd fe7b 	bl	800228c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2203      	movs	r2, #3
 800459a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d102      	bne.n	80045b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f002 f89e 	bl	80066f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	687e      	ldr	r6, [r7, #4]
 80045c2:	466d      	mov	r5, sp
 80045c4:	f106 0410 	add.w	r4, r6, #16
 80045c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80045d8:	1d33      	adds	r3, r6, #4
 80045da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045dc:	6838      	ldr	r0, [r7, #0]
 80045de:	f002 f829 	bl	8006634 <USB_CoreInit>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0d0      	b.n	8004796 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2100      	movs	r1, #0
 80045fa:	4618      	mov	r0, r3
 80045fc:	f002 f88c 	bl	8006718 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004600:	2300      	movs	r3, #0
 8004602:	73fb      	strb	r3, [r7, #15]
 8004604:	e04a      	b.n	800469c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004606:	7bfa      	ldrb	r2, [r7, #15]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	333d      	adds	r3, #61	; 0x3d
 8004616:	2201      	movs	r2, #1
 8004618:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800461a:	7bfa      	ldrb	r2, [r7, #15]
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	333c      	adds	r3, #60	; 0x3c
 800462a:	7bfa      	ldrb	r2, [r7, #15]
 800462c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800462e:	7bfa      	ldrb	r2, [r7, #15]
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	b298      	uxth	r0, r3
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	3344      	adds	r3, #68	; 0x44
 8004642:	4602      	mov	r2, r0
 8004644:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004646:	7bfa      	ldrb	r2, [r7, #15]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	3340      	adds	r3, #64	; 0x40
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800465a:	7bfa      	ldrb	r2, [r7, #15]
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	3348      	adds	r3, #72	; 0x48
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800466e:	7bfa      	ldrb	r2, [r7, #15]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	334c      	adds	r3, #76	; 0x4c
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004682:	7bfa      	ldrb	r2, [r7, #15]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	3354      	adds	r3, #84	; 0x54
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	3301      	adds	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
 800469c:	7bfa      	ldrb	r2, [r7, #15]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d3af      	bcc.n	8004606 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046a6:	2300      	movs	r3, #0
 80046a8:	73fb      	strb	r3, [r7, #15]
 80046aa:	e044      	b.n	8004736 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046ac:	7bfa      	ldrb	r2, [r7, #15]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046c2:	7bfa      	ldrb	r2, [r7, #15]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80046d4:	7bfa      	ldrb	r2, [r7, #15]
 80046d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046d8:	7bfa      	ldrb	r2, [r7, #15]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80046ea:	2200      	movs	r2, #0
 80046ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046ee:	7bfa      	ldrb	r2, [r7, #15]
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004704:	7bfa      	ldrb	r2, [r7, #15]
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	4613      	mov	r3, r2
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800471a:	7bfa      	ldrb	r2, [r7, #15]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	3301      	adds	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	7bfa      	ldrb	r2, [r7, #15]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	429a      	cmp	r2, r3
 800473e:	d3b5      	bcc.n	80046ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	603b      	str	r3, [r7, #0]
 8004746:	687e      	ldr	r6, [r7, #4]
 8004748:	466d      	mov	r5, sp
 800474a:	f106 0410 	add.w	r4, r6, #16
 800474e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004756:	e894 0003 	ldmia.w	r4, {r0, r1}
 800475a:	e885 0003 	stmia.w	r5, {r0, r1}
 800475e:	1d33      	adds	r3, r6, #4
 8004760:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004762:	6838      	ldr	r0, [r7, #0]
 8004764:	f002 f824 	bl	80067b0 <USB_DevInit>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e00d      	b.n	8004796 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f002 f9ef 	bl	8006b72 <USB_DevDisconnect>

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080047a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e267      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d075      	beq.n	80048aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047be:	4b88      	ldr	r3, [pc, #544]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d00c      	beq.n	80047e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ca:	4b85      	ldr	r3, [pc, #532]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d112      	bne.n	80047fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047d6:	4b82      	ldr	r3, [pc, #520]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e2:	d10b      	bne.n	80047fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	4b7e      	ldr	r3, [pc, #504]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d05b      	beq.n	80048a8 <HAL_RCC_OscConfig+0x108>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d157      	bne.n	80048a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e242      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004804:	d106      	bne.n	8004814 <HAL_RCC_OscConfig+0x74>
 8004806:	4b76      	ldr	r3, [pc, #472]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a75      	ldr	r2, [pc, #468]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 800480c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	e01d      	b.n	8004850 <HAL_RCC_OscConfig+0xb0>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800481c:	d10c      	bne.n	8004838 <HAL_RCC_OscConfig+0x98>
 800481e:	4b70      	ldr	r3, [pc, #448]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a6f      	ldr	r2, [pc, #444]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 8004824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	4b6d      	ldr	r3, [pc, #436]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a6c      	ldr	r2, [pc, #432]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 8004830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	e00b      	b.n	8004850 <HAL_RCC_OscConfig+0xb0>
 8004838:	4b69      	ldr	r3, [pc, #420]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a68      	ldr	r2, [pc, #416]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 800483e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	4b66      	ldr	r3, [pc, #408]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a65      	ldr	r2, [pc, #404]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 800484a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d013      	beq.n	8004880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004858:	f7fd fe7c 	bl	8002554 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004860:	f7fd fe78 	bl	8002554 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	; 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e207      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004872:	4b5b      	ldr	r3, [pc, #364]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0xc0>
 800487e:	e014      	b.n	80048aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004880:	f7fd fe68 	bl	8002554 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004888:	f7fd fe64 	bl	8002554 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	; 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e1f3      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800489a:	4b51      	ldr	r3, [pc, #324]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0xe8>
 80048a6:	e000      	b.n	80048aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d063      	beq.n	800497e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048b6:	4b4a      	ldr	r3, [pc, #296]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00b      	beq.n	80048da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048c2:	4b47      	ldr	r3, [pc, #284]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d11c      	bne.n	8004908 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ce:	4b44      	ldr	r3, [pc, #272]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d116      	bne.n	8004908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048da:	4b41      	ldr	r3, [pc, #260]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_RCC_OscConfig+0x152>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d001      	beq.n	80048f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e1c7      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f2:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4937      	ldr	r1, [pc, #220]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 8004902:	4313      	orrs	r3, r2
 8004904:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004906:	e03a      	b.n	800497e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d020      	beq.n	8004952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004910:	4b34      	ldr	r3, [pc, #208]	; (80049e4 <HAL_RCC_OscConfig+0x244>)
 8004912:	2201      	movs	r2, #1
 8004914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004916:	f7fd fe1d 	bl	8002554 <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800491e:	f7fd fe19 	bl	8002554 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e1a8      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004930:	4b2b      	ldr	r3, [pc, #172]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0f0      	beq.n	800491e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800493c:	4b28      	ldr	r3, [pc, #160]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4925      	ldr	r1, [pc, #148]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 800494c:	4313      	orrs	r3, r2
 800494e:	600b      	str	r3, [r1, #0]
 8004950:	e015      	b.n	800497e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004952:	4b24      	ldr	r3, [pc, #144]	; (80049e4 <HAL_RCC_OscConfig+0x244>)
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fd fdfc 	bl	8002554 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004960:	f7fd fdf8 	bl	8002554 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e187      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004972:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f0      	bne.n	8004960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d036      	beq.n	80049f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d016      	beq.n	80049c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004992:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <HAL_RCC_OscConfig+0x248>)
 8004994:	2201      	movs	r2, #1
 8004996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004998:	f7fd fddc 	bl	8002554 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049a0:	f7fd fdd8 	bl	8002554 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e167      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCC_OscConfig+0x240>)
 80049b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0f0      	beq.n	80049a0 <HAL_RCC_OscConfig+0x200>
 80049be:	e01b      	b.n	80049f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049c0:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <HAL_RCC_OscConfig+0x248>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c6:	f7fd fdc5 	bl	8002554 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049cc:	e00e      	b.n	80049ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049ce:	f7fd fdc1 	bl	8002554 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d907      	bls.n	80049ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e150      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
 80049e0:	40023800 	.word	0x40023800
 80049e4:	42470000 	.word	0x42470000
 80049e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ec:	4b88      	ldr	r3, [pc, #544]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 80049ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1ea      	bne.n	80049ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 8097 	beq.w	8004b34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a06:	2300      	movs	r3, #0
 8004a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a0a:	4b81      	ldr	r3, [pc, #516]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10f      	bne.n	8004a36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	4b7d      	ldr	r3, [pc, #500]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	4a7c      	ldr	r2, [pc, #496]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a24:	6413      	str	r3, [r2, #64]	; 0x40
 8004a26:	4b7a      	ldr	r3, [pc, #488]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a32:	2301      	movs	r3, #1
 8004a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a36:	4b77      	ldr	r3, [pc, #476]	; (8004c14 <HAL_RCC_OscConfig+0x474>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d118      	bne.n	8004a74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a42:	4b74      	ldr	r3, [pc, #464]	; (8004c14 <HAL_RCC_OscConfig+0x474>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a73      	ldr	r2, [pc, #460]	; (8004c14 <HAL_RCC_OscConfig+0x474>)
 8004a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a4e:	f7fd fd81 	bl	8002554 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a56:	f7fd fd7d 	bl	8002554 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e10c      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a68:	4b6a      	ldr	r3, [pc, #424]	; (8004c14 <HAL_RCC_OscConfig+0x474>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d106      	bne.n	8004a8a <HAL_RCC_OscConfig+0x2ea>
 8004a7c:	4b64      	ldr	r3, [pc, #400]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	4a63      	ldr	r2, [pc, #396]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	6713      	str	r3, [r2, #112]	; 0x70
 8004a88:	e01c      	b.n	8004ac4 <HAL_RCC_OscConfig+0x324>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2b05      	cmp	r3, #5
 8004a90:	d10c      	bne.n	8004aac <HAL_RCC_OscConfig+0x30c>
 8004a92:	4b5f      	ldr	r3, [pc, #380]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a5e      	ldr	r2, [pc, #376]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004a98:	f043 0304 	orr.w	r3, r3, #4
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9e:	4b5c      	ldr	r3, [pc, #368]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	4a5b      	ldr	r2, [pc, #364]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8004aaa:	e00b      	b.n	8004ac4 <HAL_RCC_OscConfig+0x324>
 8004aac:	4b58      	ldr	r3, [pc, #352]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	4a57      	ldr	r2, [pc, #348]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab8:	4b55      	ldr	r3, [pc, #340]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abc:	4a54      	ldr	r2, [pc, #336]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004abe:	f023 0304 	bic.w	r3, r3, #4
 8004ac2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d015      	beq.n	8004af8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004acc:	f7fd fd42 	bl	8002554 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad2:	e00a      	b.n	8004aea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ad4:	f7fd fd3e 	bl	8002554 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e0cb      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aea:	4b49      	ldr	r3, [pc, #292]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0ee      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x334>
 8004af6:	e014      	b.n	8004b22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af8:	f7fd fd2c 	bl	8002554 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004afe:	e00a      	b.n	8004b16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b00:	f7fd fd28 	bl	8002554 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e0b5      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b16:	4b3e      	ldr	r3, [pc, #248]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1ee      	bne.n	8004b00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d105      	bne.n	8004b34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b28:	4b39      	ldr	r3, [pc, #228]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	4a38      	ldr	r2, [pc, #224]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80a1 	beq.w	8004c80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b3e:	4b34      	ldr	r3, [pc, #208]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d05c      	beq.n	8004c04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d141      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b52:	4b31      	ldr	r3, [pc, #196]	; (8004c18 <HAL_RCC_OscConfig+0x478>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b58:	f7fd fcfc 	bl	8002554 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b60:	f7fd fcf8 	bl	8002554 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e087      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b72:	4b27      	ldr	r3, [pc, #156]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69da      	ldr	r2, [r3, #28]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	019b      	lsls	r3, r3, #6
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	085b      	lsrs	r3, r3, #1
 8004b96:	3b01      	subs	r3, #1
 8004b98:	041b      	lsls	r3, r3, #16
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	061b      	lsls	r3, r3, #24
 8004ba2:	491b      	ldr	r1, [pc, #108]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ba8:	4b1b      	ldr	r3, [pc, #108]	; (8004c18 <HAL_RCC_OscConfig+0x478>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bae:	f7fd fcd1 	bl	8002554 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb6:	f7fd fccd 	bl	8002554 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e05c      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc8:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f0      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x416>
 8004bd4:	e054      	b.n	8004c80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd6:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <HAL_RCC_OscConfig+0x478>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bdc:	f7fd fcba 	bl	8002554 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004be4:	f7fd fcb6 	bl	8002554 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e045      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf6:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <HAL_RCC_OscConfig+0x470>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0x444>
 8004c02:	e03d      	b.n	8004c80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d107      	bne.n	8004c1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e038      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
 8004c10:	40023800 	.word	0x40023800
 8004c14:	40007000 	.word	0x40007000
 8004c18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	; (8004c8c <HAL_RCC_OscConfig+0x4ec>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d028      	beq.n	8004c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d121      	bne.n	8004c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d11a      	bne.n	8004c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d111      	bne.n	8004c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	3b01      	subs	r3, #1
 8004c66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d107      	bne.n	8004c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800

08004c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0cc      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca4:	4b68      	ldr	r3, [pc, #416]	; (8004e48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d90c      	bls.n	8004ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb2:	4b65      	ldr	r3, [pc, #404]	; (8004e48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cba:	4b63      	ldr	r3, [pc, #396]	; (8004e48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0b8      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d020      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ce4:	4b59      	ldr	r3, [pc, #356]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4a58      	ldr	r2, [pc, #352]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d005      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cfc:	4b53      	ldr	r3, [pc, #332]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	4a52      	ldr	r2, [pc, #328]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d08:	4b50      	ldr	r3, [pc, #320]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	494d      	ldr	r1, [pc, #308]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d044      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2e:	4b47      	ldr	r3, [pc, #284]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d119      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e07f      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d003      	beq.n	8004d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d107      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4e:	4b3f      	ldr	r3, [pc, #252]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e06f      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5e:	4b3b      	ldr	r3, [pc, #236]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e067      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d6e:	4b37      	ldr	r3, [pc, #220]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f023 0203 	bic.w	r2, r3, #3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4934      	ldr	r1, [pc, #208]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d80:	f7fd fbe8 	bl	8002554 <HAL_GetTick>
 8004d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d86:	e00a      	b.n	8004d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d88:	f7fd fbe4 	bl	8002554 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e04f      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9e:	4b2b      	ldr	r3, [pc, #172]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 020c 	and.w	r2, r3, #12
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d1eb      	bne.n	8004d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004db0:	4b25      	ldr	r3, [pc, #148]	; (8004e48 <HAL_RCC_ClockConfig+0x1b8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d20c      	bcs.n	8004dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dbe:	4b22      	ldr	r3, [pc, #136]	; (8004e48 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc6:	4b20      	ldr	r3, [pc, #128]	; (8004e48 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e032      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d008      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de4:	4b19      	ldr	r3, [pc, #100]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	4916      	ldr	r1, [pc, #88]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d009      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e02:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	490e      	ldr	r1, [pc, #56]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e16:	f000 f821 	bl	8004e5c <HAL_RCC_GetSysClockFreq>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	490a      	ldr	r1, [pc, #40]	; (8004e50 <HAL_RCC_ClockConfig+0x1c0>)
 8004e28:	5ccb      	ldrb	r3, [r1, r3]
 8004e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2e:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <HAL_RCC_ClockConfig+0x1c4>)
 8004e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <HAL_RCC_ClockConfig+0x1c8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fd fb48 	bl	80024cc <HAL_InitTick>

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40023c00 	.word	0x40023c00
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	080083d8 	.word	0x080083d8
 8004e54:	20000000 	.word	0x20000000
 8004e58:	20000004 	.word	0x20000004

08004e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e60:	b094      	sub	sp, #80	; 0x50
 8004e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	647b      	str	r3, [r7, #68]	; 0x44
 8004e68:	2300      	movs	r3, #0
 8004e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e74:	4b79      	ldr	r3, [pc, #484]	; (800505c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 030c 	and.w	r3, r3, #12
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d00d      	beq.n	8004e9c <HAL_RCC_GetSysClockFreq+0x40>
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	f200 80e1 	bhi.w	8005048 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0x34>
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d003      	beq.n	8004e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e8e:	e0db      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e90:	4b73      	ldr	r3, [pc, #460]	; (8005060 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e94:	e0db      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e96:	4b73      	ldr	r3, [pc, #460]	; (8005064 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e9a:	e0d8      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e9c:	4b6f      	ldr	r3, [pc, #444]	; (800505c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ea6:	4b6d      	ldr	r3, [pc, #436]	; (800505c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d063      	beq.n	8004f7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eb2:	4b6a      	ldr	r3, [pc, #424]	; (800505c <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	099b      	lsrs	r3, r3, #6
 8004eb8:	2200      	movs	r2, #0
 8004eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ece:	4622      	mov	r2, r4
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f04f 0100 	mov.w	r1, #0
 8004eda:	0159      	lsls	r1, r3, #5
 8004edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee0:	0150      	lsls	r0, r2, #5
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	1a51      	subs	r1, r2, r1
 8004eea:	6139      	str	r1, [r7, #16]
 8004eec:	4629      	mov	r1, r5
 8004eee:	eb63 0301 	sbc.w	r3, r3, r1
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f00:	4659      	mov	r1, fp
 8004f02:	018b      	lsls	r3, r1, #6
 8004f04:	4651      	mov	r1, sl
 8004f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f0a:	4651      	mov	r1, sl
 8004f0c:	018a      	lsls	r2, r1, #6
 8004f0e:	4651      	mov	r1, sl
 8004f10:	ebb2 0801 	subs.w	r8, r2, r1
 8004f14:	4659      	mov	r1, fp
 8004f16:	eb63 0901 	sbc.w	r9, r3, r1
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f2e:	4690      	mov	r8, r2
 8004f30:	4699      	mov	r9, r3
 8004f32:	4623      	mov	r3, r4
 8004f34:	eb18 0303 	adds.w	r3, r8, r3
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	462b      	mov	r3, r5
 8004f3c:	eb49 0303 	adc.w	r3, r9, r3
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f4e:	4629      	mov	r1, r5
 8004f50:	024b      	lsls	r3, r1, #9
 8004f52:	4621      	mov	r1, r4
 8004f54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f58:	4621      	mov	r1, r4
 8004f5a:	024a      	lsls	r2, r1, #9
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4619      	mov	r1, r3
 8004f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f62:	2200      	movs	r2, #0
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f6c:	f7fb fe54 	bl	8000c18 <__aeabi_uldivmod>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	4613      	mov	r3, r2
 8004f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f78:	e058      	b.n	800502c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f7a:	4b38      	ldr	r3, [pc, #224]	; (800505c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	099b      	lsrs	r3, r3, #6
 8004f80:	2200      	movs	r2, #0
 8004f82:	4618      	mov	r0, r3
 8004f84:	4611      	mov	r1, r2
 8004f86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f8a:	623b      	str	r3, [r7, #32]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f94:	4642      	mov	r2, r8
 8004f96:	464b      	mov	r3, r9
 8004f98:	f04f 0000 	mov.w	r0, #0
 8004f9c:	f04f 0100 	mov.w	r1, #0
 8004fa0:	0159      	lsls	r1, r3, #5
 8004fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fa6:	0150      	lsls	r0, r2, #5
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4641      	mov	r1, r8
 8004fae:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fcc:	ebb2 040a 	subs.w	r4, r2, sl
 8004fd0:	eb63 050b 	sbc.w	r5, r3, fp
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	00eb      	lsls	r3, r5, #3
 8004fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fe2:	00e2      	lsls	r2, r4, #3
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	461d      	mov	r5, r3
 8004fe8:	4643      	mov	r3, r8
 8004fea:	18e3      	adds	r3, r4, r3
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	464b      	mov	r3, r9
 8004ff0:	eb45 0303 	adc.w	r3, r5, r3
 8004ff4:	607b      	str	r3, [r7, #4]
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005002:	4629      	mov	r1, r5
 8005004:	028b      	lsls	r3, r1, #10
 8005006:	4621      	mov	r1, r4
 8005008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800500c:	4621      	mov	r1, r4
 800500e:	028a      	lsls	r2, r1, #10
 8005010:	4610      	mov	r0, r2
 8005012:	4619      	mov	r1, r3
 8005014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005016:	2200      	movs	r2, #0
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	61fa      	str	r2, [r7, #28]
 800501c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005020:	f7fb fdfa 	bl	8000c18 <__aeabi_uldivmod>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4613      	mov	r3, r2
 800502a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_RCC_GetSysClockFreq+0x200>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	0c1b      	lsrs	r3, r3, #16
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	3301      	adds	r3, #1
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800503c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800503e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005040:	fbb2 f3f3 	udiv	r3, r2, r3
 8005044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005046:	e002      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <HAL_RCC_GetSysClockFreq+0x204>)
 800504a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800504c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005050:	4618      	mov	r0, r3
 8005052:	3750      	adds	r7, #80	; 0x50
 8005054:	46bd      	mov	sp, r7
 8005056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800
 8005060:	00f42400 	.word	0x00f42400
 8005064:	007a1200 	.word	0x007a1200

08005068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800506c:	4b03      	ldr	r3, [pc, #12]	; (800507c <HAL_RCC_GetHCLKFreq+0x14>)
 800506e:	681b      	ldr	r3, [r3, #0]
}
 8005070:	4618      	mov	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20000000 	.word	0x20000000

08005080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005084:	f7ff fff0 	bl	8005068 <HAL_RCC_GetHCLKFreq>
 8005088:	4602      	mov	r2, r0
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	0a9b      	lsrs	r3, r3, #10
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	4903      	ldr	r1, [pc, #12]	; (80050a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005096:	5ccb      	ldrb	r3, [r1, r3]
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800509c:	4618      	mov	r0, r3
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40023800 	.word	0x40023800
 80050a4:	080083e8 	.word	0x080083e8

080050a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050ac:	f7ff ffdc 	bl	8005068 <HAL_RCC_GetHCLKFreq>
 80050b0:	4602      	mov	r2, r0
 80050b2:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	0b5b      	lsrs	r3, r3, #13
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	4903      	ldr	r1, [pc, #12]	; (80050cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050be:	5ccb      	ldrb	r3, [r1, r3]
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40023800 	.word	0x40023800
 80050cc:	080083e8 	.word	0x080083e8

080050d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e041      	b.n	8005166 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc ffee 	bl	80020d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f000 fb42 	bl	8005798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	d001      	beq.n	8005188 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e046      	b.n	8005216 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a23      	ldr	r2, [pc, #140]	; (8005224 <HAL_TIM_Base_Start+0xb4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d022      	beq.n	80051e0 <HAL_TIM_Base_Start+0x70>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a2:	d01d      	beq.n	80051e0 <HAL_TIM_Base_Start+0x70>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1f      	ldr	r2, [pc, #124]	; (8005228 <HAL_TIM_Base_Start+0xb8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d018      	beq.n	80051e0 <HAL_TIM_Base_Start+0x70>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1e      	ldr	r2, [pc, #120]	; (800522c <HAL_TIM_Base_Start+0xbc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d013      	beq.n	80051e0 <HAL_TIM_Base_Start+0x70>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1c      	ldr	r2, [pc, #112]	; (8005230 <HAL_TIM_Base_Start+0xc0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00e      	beq.n	80051e0 <HAL_TIM_Base_Start+0x70>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1b      	ldr	r2, [pc, #108]	; (8005234 <HAL_TIM_Base_Start+0xc4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d009      	beq.n	80051e0 <HAL_TIM_Base_Start+0x70>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a19      	ldr	r2, [pc, #100]	; (8005238 <HAL_TIM_Base_Start+0xc8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <HAL_TIM_Base_Start+0x70>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a18      	ldr	r2, [pc, #96]	; (800523c <HAL_TIM_Base_Start+0xcc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d111      	bne.n	8005204 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b06      	cmp	r3, #6
 80051f0:	d010      	beq.n	8005214 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0201 	orr.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005202:	e007      	b.n	8005214 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40010000 	.word	0x40010000
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40010400 	.word	0x40010400
 8005238:	40014000 	.word	0x40014000
 800523c:	40001800 	.word	0x40001800

08005240 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e041      	b.n	80052d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f839 	bl	80052de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3304      	adds	r3, #4
 800527c:	4619      	mov	r1, r3
 800527e:	4610      	mov	r0, r2
 8005280:	f000 fa8a 	bl	8005798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <HAL_TIM_PWM_Start+0x24>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e022      	b.n	800535e <HAL_TIM_PWM_Start+0x6a>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b04      	cmp	r3, #4
 800531c:	d109      	bne.n	8005332 <HAL_TIM_PWM_Start+0x3e>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	bf14      	ite	ne
 800532a:	2301      	movne	r3, #1
 800532c:	2300      	moveq	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	e015      	b.n	800535e <HAL_TIM_PWM_Start+0x6a>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d109      	bne.n	800534c <HAL_TIM_PWM_Start+0x58>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b01      	cmp	r3, #1
 8005342:	bf14      	ite	ne
 8005344:	2301      	movne	r3, #1
 8005346:	2300      	moveq	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	e008      	b.n	800535e <HAL_TIM_PWM_Start+0x6a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	bf14      	ite	ne
 8005358:	2301      	movne	r3, #1
 800535a:	2300      	moveq	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e07c      	b.n	8005460 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d104      	bne.n	8005376 <HAL_TIM_PWM_Start+0x82>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005374:	e013      	b.n	800539e <HAL_TIM_PWM_Start+0xaa>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b04      	cmp	r3, #4
 800537a:	d104      	bne.n	8005386 <HAL_TIM_PWM_Start+0x92>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005384:	e00b      	b.n	800539e <HAL_TIM_PWM_Start+0xaa>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d104      	bne.n	8005396 <HAL_TIM_PWM_Start+0xa2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005394:	e003      	b.n	800539e <HAL_TIM_PWM_Start+0xaa>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2202      	movs	r2, #2
 800539a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2201      	movs	r2, #1
 80053a4:	6839      	ldr	r1, [r7, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fce0 	bl	8005d6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a2d      	ldr	r2, [pc, #180]	; (8005468 <HAL_TIM_PWM_Start+0x174>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d004      	beq.n	80053c0 <HAL_TIM_PWM_Start+0xcc>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a2c      	ldr	r2, [pc, #176]	; (800546c <HAL_TIM_PWM_Start+0x178>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d101      	bne.n	80053c4 <HAL_TIM_PWM_Start+0xd0>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <HAL_TIM_PWM_Start+0xd2>
 80053c4:	2300      	movs	r3, #0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d007      	beq.n	80053da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a22      	ldr	r2, [pc, #136]	; (8005468 <HAL_TIM_PWM_Start+0x174>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d022      	beq.n	800542a <HAL_TIM_PWM_Start+0x136>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ec:	d01d      	beq.n	800542a <HAL_TIM_PWM_Start+0x136>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a1f      	ldr	r2, [pc, #124]	; (8005470 <HAL_TIM_PWM_Start+0x17c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d018      	beq.n	800542a <HAL_TIM_PWM_Start+0x136>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <HAL_TIM_PWM_Start+0x180>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d013      	beq.n	800542a <HAL_TIM_PWM_Start+0x136>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a1c      	ldr	r2, [pc, #112]	; (8005478 <HAL_TIM_PWM_Start+0x184>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00e      	beq.n	800542a <HAL_TIM_PWM_Start+0x136>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a16      	ldr	r2, [pc, #88]	; (800546c <HAL_TIM_PWM_Start+0x178>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d009      	beq.n	800542a <HAL_TIM_PWM_Start+0x136>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a18      	ldr	r2, [pc, #96]	; (800547c <HAL_TIM_PWM_Start+0x188>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d004      	beq.n	800542a <HAL_TIM_PWM_Start+0x136>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a16      	ldr	r2, [pc, #88]	; (8005480 <HAL_TIM_PWM_Start+0x18c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d111      	bne.n	800544e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b06      	cmp	r3, #6
 800543a:	d010      	beq.n	800545e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544c:	e007      	b.n	800545e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40010000 	.word	0x40010000
 800546c:	40010400 	.word	0x40010400
 8005470:	40000400 	.word	0x40000400
 8005474:	40000800 	.word	0x40000800
 8005478:	40000c00 	.word	0x40000c00
 800547c:	40014000 	.word	0x40014000
 8005480:	40001800 	.word	0x40001800

08005484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800549e:	2302      	movs	r3, #2
 80054a0:	e0ae      	b.n	8005600 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b0c      	cmp	r3, #12
 80054ae:	f200 809f 	bhi.w	80055f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080054ed 	.word	0x080054ed
 80054bc:	080055f1 	.word	0x080055f1
 80054c0:	080055f1 	.word	0x080055f1
 80054c4:	080055f1 	.word	0x080055f1
 80054c8:	0800552d 	.word	0x0800552d
 80054cc:	080055f1 	.word	0x080055f1
 80054d0:	080055f1 	.word	0x080055f1
 80054d4:	080055f1 	.word	0x080055f1
 80054d8:	0800556f 	.word	0x0800556f
 80054dc:	080055f1 	.word	0x080055f1
 80054e0:	080055f1 	.word	0x080055f1
 80054e4:	080055f1 	.word	0x080055f1
 80054e8:	080055af 	.word	0x080055af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f9f0 	bl	80058d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0208 	orr.w	r2, r2, #8
 8005506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0204 	bic.w	r2, r2, #4
 8005516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6999      	ldr	r1, [r3, #24]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	619a      	str	r2, [r3, #24]
      break;
 800552a:	e064      	b.n	80055f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fa40 	bl	80059b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6999      	ldr	r1, [r3, #24]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	021a      	lsls	r2, r3, #8
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	619a      	str	r2, [r3, #24]
      break;
 800556c:	e043      	b.n	80055f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fa95 	bl	8005aa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0208 	orr.w	r2, r2, #8
 8005588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0204 	bic.w	r2, r2, #4
 8005598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69d9      	ldr	r1, [r3, #28]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	61da      	str	r2, [r3, #28]
      break;
 80055ac:	e023      	b.n	80055f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fae9 	bl	8005b8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69d9      	ldr	r1, [r3, #28]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	021a      	lsls	r2, r3, #8
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	61da      	str	r2, [r3, #28]
      break;
 80055ee:	e002      	b.n	80055f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	75fb      	strb	r3, [r7, #23]
      break;
 80055f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_TIM_ConfigClockSource+0x1c>
 8005620:	2302      	movs	r3, #2
 8005622:	e0b4      	b.n	800578e <HAL_TIM_ConfigClockSource+0x186>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800564a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800565c:	d03e      	beq.n	80056dc <HAL_TIM_ConfigClockSource+0xd4>
 800565e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005662:	f200 8087 	bhi.w	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 8005666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566a:	f000 8086 	beq.w	800577a <HAL_TIM_ConfigClockSource+0x172>
 800566e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005672:	d87f      	bhi.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 8005674:	2b70      	cmp	r3, #112	; 0x70
 8005676:	d01a      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0xa6>
 8005678:	2b70      	cmp	r3, #112	; 0x70
 800567a:	d87b      	bhi.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 800567c:	2b60      	cmp	r3, #96	; 0x60
 800567e:	d050      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x11a>
 8005680:	2b60      	cmp	r3, #96	; 0x60
 8005682:	d877      	bhi.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 8005684:	2b50      	cmp	r3, #80	; 0x50
 8005686:	d03c      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0xfa>
 8005688:	2b50      	cmp	r3, #80	; 0x50
 800568a:	d873      	bhi.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 800568c:	2b40      	cmp	r3, #64	; 0x40
 800568e:	d058      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x13a>
 8005690:	2b40      	cmp	r3, #64	; 0x40
 8005692:	d86f      	bhi.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 8005694:	2b30      	cmp	r3, #48	; 0x30
 8005696:	d064      	beq.n	8005762 <HAL_TIM_ConfigClockSource+0x15a>
 8005698:	2b30      	cmp	r3, #48	; 0x30
 800569a:	d86b      	bhi.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 800569c:	2b20      	cmp	r3, #32
 800569e:	d060      	beq.n	8005762 <HAL_TIM_ConfigClockSource+0x15a>
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d867      	bhi.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d05c      	beq.n	8005762 <HAL_TIM_ConfigClockSource+0x15a>
 80056a8:	2b10      	cmp	r3, #16
 80056aa:	d05a      	beq.n	8005762 <HAL_TIM_ConfigClockSource+0x15a>
 80056ac:	e062      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6899      	ldr	r1, [r3, #8]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f000 fb35 	bl	8005d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	609a      	str	r2, [r3, #8]
      break;
 80056da:	e04f      	b.n	800577c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	6899      	ldr	r1, [r3, #8]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f000 fb1e 	bl	8005d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056fe:	609a      	str	r2, [r3, #8]
      break;
 8005700:	e03c      	b.n	800577c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6859      	ldr	r1, [r3, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	461a      	mov	r2, r3
 8005710:	f000 fa92 	bl	8005c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2150      	movs	r1, #80	; 0x50
 800571a:	4618      	mov	r0, r3
 800571c:	f000 faeb 	bl	8005cf6 <TIM_ITRx_SetConfig>
      break;
 8005720:	e02c      	b.n	800577c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	6859      	ldr	r1, [r3, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	461a      	mov	r2, r3
 8005730:	f000 fab1 	bl	8005c96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2160      	movs	r1, #96	; 0x60
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fadb 	bl	8005cf6 <TIM_ITRx_SetConfig>
      break;
 8005740:	e01c      	b.n	800577c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6859      	ldr	r1, [r3, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	461a      	mov	r2, r3
 8005750:	f000 fa72 	bl	8005c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2140      	movs	r1, #64	; 0x40
 800575a:	4618      	mov	r0, r3
 800575c:	f000 facb 	bl	8005cf6 <TIM_ITRx_SetConfig>
      break;
 8005760:	e00c      	b.n	800577c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4619      	mov	r1, r3
 800576c:	4610      	mov	r0, r2
 800576e:	f000 fac2 	bl	8005cf6 <TIM_ITRx_SetConfig>
      break;
 8005772:	e003      	b.n	800577c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
      break;
 8005778:	e000      	b.n	800577c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800577a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a40      	ldr	r2, [pc, #256]	; (80058ac <TIM_Base_SetConfig+0x114>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b6:	d00f      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a3d      	ldr	r2, [pc, #244]	; (80058b0 <TIM_Base_SetConfig+0x118>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00b      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a3c      	ldr	r2, [pc, #240]	; (80058b4 <TIM_Base_SetConfig+0x11c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a3b      	ldr	r2, [pc, #236]	; (80058b8 <TIM_Base_SetConfig+0x120>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a3a      	ldr	r2, [pc, #232]	; (80058bc <TIM_Base_SetConfig+0x124>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d108      	bne.n	80057ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a2f      	ldr	r2, [pc, #188]	; (80058ac <TIM_Base_SetConfig+0x114>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d02b      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f8:	d027      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2c      	ldr	r2, [pc, #176]	; (80058b0 <TIM_Base_SetConfig+0x118>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d023      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2b      	ldr	r2, [pc, #172]	; (80058b4 <TIM_Base_SetConfig+0x11c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01f      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a2a      	ldr	r2, [pc, #168]	; (80058b8 <TIM_Base_SetConfig+0x120>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01b      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a29      	ldr	r2, [pc, #164]	; (80058bc <TIM_Base_SetConfig+0x124>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d017      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a28      	ldr	r2, [pc, #160]	; (80058c0 <TIM_Base_SetConfig+0x128>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d013      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a27      	ldr	r2, [pc, #156]	; (80058c4 <TIM_Base_SetConfig+0x12c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00f      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a26      	ldr	r2, [pc, #152]	; (80058c8 <TIM_Base_SetConfig+0x130>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00b      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a25      	ldr	r2, [pc, #148]	; (80058cc <TIM_Base_SetConfig+0x134>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d007      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a24      	ldr	r2, [pc, #144]	; (80058d0 <TIM_Base_SetConfig+0x138>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d003      	beq.n	800584a <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a23      	ldr	r2, [pc, #140]	; (80058d4 <TIM_Base_SetConfig+0x13c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d108      	bne.n	800585c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a0a      	ldr	r2, [pc, #40]	; (80058ac <TIM_Base_SetConfig+0x114>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_Base_SetConfig+0xf8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a0c      	ldr	r2, [pc, #48]	; (80058bc <TIM_Base_SetConfig+0x124>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d103      	bne.n	8005898 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	615a      	str	r2, [r3, #20]
}
 800589e:	bf00      	nop
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40000400 	.word	0x40000400
 80058b4:	40000800 	.word	0x40000800
 80058b8:	40000c00 	.word	0x40000c00
 80058bc:	40010400 	.word	0x40010400
 80058c0:	40014000 	.word	0x40014000
 80058c4:	40014400 	.word	0x40014400
 80058c8:	40014800 	.word	0x40014800
 80058cc:	40001800 	.word	0x40001800
 80058d0:	40001c00 	.word	0x40001c00
 80058d4:	40002000 	.word	0x40002000

080058d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f023 0201 	bic.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f023 0302 	bic.w	r3, r3, #2
 8005920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a20      	ldr	r2, [pc, #128]	; (80059b0 <TIM_OC1_SetConfig+0xd8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_OC1_SetConfig+0x64>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a1f      	ldr	r2, [pc, #124]	; (80059b4 <TIM_OC1_SetConfig+0xdc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d10c      	bne.n	8005956 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f023 0308 	bic.w	r3, r3, #8
 8005942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f023 0304 	bic.w	r3, r3, #4
 8005954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <TIM_OC1_SetConfig+0xd8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d003      	beq.n	8005966 <TIM_OC1_SetConfig+0x8e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a14      	ldr	r2, [pc, #80]	; (80059b4 <TIM_OC1_SetConfig+0xdc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d111      	bne.n	800598a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800596c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	621a      	str	r2, [r3, #32]
}
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40010400 	.word	0x40010400

080059b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	f023 0210 	bic.w	r2, r3, #16
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f023 0320 	bic.w	r3, r3, #32
 8005a02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a22      	ldr	r2, [pc, #136]	; (8005a9c <TIM_OC2_SetConfig+0xe4>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d003      	beq.n	8005a20 <TIM_OC2_SetConfig+0x68>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a21      	ldr	r2, [pc, #132]	; (8005aa0 <TIM_OC2_SetConfig+0xe8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d10d      	bne.n	8005a3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a17      	ldr	r2, [pc, #92]	; (8005a9c <TIM_OC2_SetConfig+0xe4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d003      	beq.n	8005a4c <TIM_OC2_SetConfig+0x94>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a16      	ldr	r2, [pc, #88]	; (8005aa0 <TIM_OC2_SetConfig+0xe8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d113      	bne.n	8005a74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40010400 	.word	0x40010400

08005aa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a21      	ldr	r2, [pc, #132]	; (8005b84 <TIM_OC3_SetConfig+0xe0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_OC3_SetConfig+0x66>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a20      	ldr	r2, [pc, #128]	; (8005b88 <TIM_OC3_SetConfig+0xe4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d10d      	bne.n	8005b26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a16      	ldr	r2, [pc, #88]	; (8005b84 <TIM_OC3_SetConfig+0xe0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_OC3_SetConfig+0x92>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <TIM_OC3_SetConfig+0xe4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d113      	bne.n	8005b5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	621a      	str	r2, [r3, #32]
}
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40010400 	.word	0x40010400

08005b8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	031b      	lsls	r3, r3, #12
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <TIM_OC4_SetConfig+0xa4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_OC4_SetConfig+0x68>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a11      	ldr	r2, [pc, #68]	; (8005c34 <TIM_OC4_SetConfig+0xa8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d109      	bne.n	8005c08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	019b      	lsls	r3, r3, #6
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40010000 	.word	0x40010000
 8005c34:	40010400 	.word	0x40010400

08005c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f023 0201 	bic.w	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f023 030a 	bic.w	r3, r3, #10
 8005c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b087      	sub	sp, #28
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f023 0210 	bic.w	r2, r3, #16
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	031b      	lsls	r3, r3, #12
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	621a      	str	r2, [r3, #32]
}
 8005cea:	bf00      	nop
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f043 0307 	orr.w	r3, r3, #7
 8005d18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	609a      	str	r2, [r3, #8]
}
 8005d20:	bf00      	nop
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	021a      	lsls	r2, r3, #8
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	609a      	str	r2, [r3, #8]
}
 8005d60:	bf00      	nop
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	2201      	movs	r2, #1
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a1a      	ldr	r2, [r3, #32]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	401a      	ands	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a1a      	ldr	r2, [r3, #32]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	fa01 f303 	lsl.w	r3, r1, r3
 8005da4:	431a      	orrs	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e05a      	b.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d022      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1c:	d01d      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a1d      	ldr	r2, [pc, #116]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d018      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1b      	ldr	r2, [pc, #108]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d013      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1a      	ldr	r2, [pc, #104]	; (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00e      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a18      	ldr	r2, [pc, #96]	; (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d009      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a17      	ldr	r2, [pc, #92]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d004      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a15      	ldr	r2, [pc, #84]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d10c      	bne.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40010000 	.word	0x40010000
 8005e98:	40000400 	.word	0x40000400
 8005e9c:	40000800 	.word	0x40000800
 8005ea0:	40000c00 	.word	0x40000c00
 8005ea4:	40010400 	.word	0x40010400
 8005ea8:	40014000 	.word	0x40014000
 8005eac:	40001800 	.word	0x40001800

08005eb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e03f      	b.n	8005f42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fc f990 	bl	80021fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2224      	movs	r2, #36	; 0x24
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ef2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f929 	bl	800614c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695a      	ldr	r2, [r3, #20]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b08a      	sub	sp, #40	; 0x28
 8005f4e:	af02      	add	r7, sp, #8
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	603b      	str	r3, [r7, #0]
 8005f56:	4613      	mov	r3, r2
 8005f58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	d17c      	bne.n	8006064 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <HAL_UART_Transmit+0x2c>
 8005f70:	88fb      	ldrh	r3, [r7, #6]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e075      	b.n	8006066 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_UART_Transmit+0x3e>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e06e      	b.n	8006066 <HAL_UART_Transmit+0x11c>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2221      	movs	r2, #33	; 0x21
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f9e:	f7fc fad9 	bl	8002554 <HAL_GetTick>
 8005fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	88fa      	ldrh	r2, [r7, #6]
 8005fa8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	88fa      	ldrh	r2, [r7, #6]
 8005fae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb8:	d108      	bne.n	8005fcc <HAL_UART_Transmit+0x82>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d104      	bne.n	8005fcc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	e003      	b.n	8005fd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005fdc:	e02a      	b.n	8006034 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2180      	movs	r1, #128	; 0x80
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 f840 	bl	800606e <UART_WaitOnFlagUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e036      	b.n	8006066 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10b      	bne.n	8006016 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800600c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	3302      	adds	r3, #2
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	e007      	b.n	8006026 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	3301      	adds	r3, #1
 8006024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1cf      	bne.n	8005fde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2200      	movs	r2, #0
 8006046:	2140      	movs	r1, #64	; 0x40
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f810 	bl	800606e <UART_WaitOnFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e006      	b.n	8006066 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	e000      	b.n	8006066 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006064:	2302      	movs	r3, #2
  }
}
 8006066:	4618      	mov	r0, r3
 8006068:	3720      	adds	r7, #32
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b090      	sub	sp, #64	; 0x40
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	603b      	str	r3, [r7, #0]
 800607a:	4613      	mov	r3, r2
 800607c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800607e:	e050      	b.n	8006122 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006086:	d04c      	beq.n	8006122 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800608a:	2b00      	cmp	r3, #0
 800608c:	d007      	beq.n	800609e <UART_WaitOnFlagUntilTimeout+0x30>
 800608e:	f7fc fa61 	bl	8002554 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800609a:	429a      	cmp	r2, r3
 800609c:	d241      	bcs.n	8006122 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	330c      	adds	r3, #12
 80060a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	330c      	adds	r3, #12
 80060bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060be:	637a      	str	r2, [r7, #52]	; 0x34
 80060c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e5      	bne.n	800609e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3314      	adds	r3, #20
 80060d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	613b      	str	r3, [r7, #16]
   return(result);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3314      	adds	r3, #20
 80060f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060f2:	623a      	str	r2, [r7, #32]
 80060f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	69f9      	ldr	r1, [r7, #28]
 80060f8:	6a3a      	ldr	r2, [r7, #32]
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e5      	bne.n	80060d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e00f      	b.n	8006142 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4013      	ands	r3, r2
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	429a      	cmp	r2, r3
 8006130:	bf0c      	ite	eq
 8006132:	2301      	moveq	r3, #1
 8006134:	2300      	movne	r3, #0
 8006136:	b2db      	uxtb	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	429a      	cmp	r2, r3
 800613e:	d09f      	beq.n	8006080 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3740      	adds	r7, #64	; 0x40
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800614c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006150:	b0c0      	sub	sp, #256	; 0x100
 8006152:	af00      	add	r7, sp, #0
 8006154:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006168:	68d9      	ldr	r1, [r3, #12]
 800616a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	ea40 0301 	orr.w	r3, r0, r1
 8006174:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	431a      	orrs	r2, r3
 8006184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	431a      	orrs	r2, r3
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	4313      	orrs	r3, r2
 8006194:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061a4:	f021 010c 	bic.w	r1, r1, #12
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061b2:	430b      	orrs	r3, r1
 80061b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80061c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c6:	6999      	ldr	r1, [r3, #24]
 80061c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	ea40 0301 	orr.w	r3, r0, r1
 80061d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4b8f      	ldr	r3, [pc, #572]	; (8006418 <UART_SetConfig+0x2cc>)
 80061dc:	429a      	cmp	r2, r3
 80061de:	d005      	beq.n	80061ec <UART_SetConfig+0xa0>
 80061e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b8d      	ldr	r3, [pc, #564]	; (800641c <UART_SetConfig+0x2d0>)
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d104      	bne.n	80061f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061ec:	f7fe ff5c 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 80061f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061f4:	e003      	b.n	80061fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061f6:	f7fe ff43 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 80061fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006208:	f040 810c 	bne.w	8006424 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800620c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006210:	2200      	movs	r2, #0
 8006212:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006216:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800621a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800621e:	4622      	mov	r2, r4
 8006220:	462b      	mov	r3, r5
 8006222:	1891      	adds	r1, r2, r2
 8006224:	65b9      	str	r1, [r7, #88]	; 0x58
 8006226:	415b      	adcs	r3, r3
 8006228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800622a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800622e:	4621      	mov	r1, r4
 8006230:	eb12 0801 	adds.w	r8, r2, r1
 8006234:	4629      	mov	r1, r5
 8006236:	eb43 0901 	adc.w	r9, r3, r1
 800623a:	f04f 0200 	mov.w	r2, #0
 800623e:	f04f 0300 	mov.w	r3, #0
 8006242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800624a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800624e:	4690      	mov	r8, r2
 8006250:	4699      	mov	r9, r3
 8006252:	4623      	mov	r3, r4
 8006254:	eb18 0303 	adds.w	r3, r8, r3
 8006258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800625c:	462b      	mov	r3, r5
 800625e:	eb49 0303 	adc.w	r3, r9, r3
 8006262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006272:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006276:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800627a:	460b      	mov	r3, r1
 800627c:	18db      	adds	r3, r3, r3
 800627e:	653b      	str	r3, [r7, #80]	; 0x50
 8006280:	4613      	mov	r3, r2
 8006282:	eb42 0303 	adc.w	r3, r2, r3
 8006286:	657b      	str	r3, [r7, #84]	; 0x54
 8006288:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800628c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006290:	f7fa fcc2 	bl	8000c18 <__aeabi_uldivmod>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4b61      	ldr	r3, [pc, #388]	; (8006420 <UART_SetConfig+0x2d4>)
 800629a:	fba3 2302 	umull	r2, r3, r3, r2
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	011c      	lsls	r4, r3, #4
 80062a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80062b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80062b4:	4642      	mov	r2, r8
 80062b6:	464b      	mov	r3, r9
 80062b8:	1891      	adds	r1, r2, r2
 80062ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80062bc:	415b      	adcs	r3, r3
 80062be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062c4:	4641      	mov	r1, r8
 80062c6:	eb12 0a01 	adds.w	sl, r2, r1
 80062ca:	4649      	mov	r1, r9
 80062cc:	eb43 0b01 	adc.w	fp, r3, r1
 80062d0:	f04f 0200 	mov.w	r2, #0
 80062d4:	f04f 0300 	mov.w	r3, #0
 80062d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062e4:	4692      	mov	sl, r2
 80062e6:	469b      	mov	fp, r3
 80062e8:	4643      	mov	r3, r8
 80062ea:	eb1a 0303 	adds.w	r3, sl, r3
 80062ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062f2:	464b      	mov	r3, r9
 80062f4:	eb4b 0303 	adc.w	r3, fp, r3
 80062f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006308:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800630c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006310:	460b      	mov	r3, r1
 8006312:	18db      	adds	r3, r3, r3
 8006314:	643b      	str	r3, [r7, #64]	; 0x40
 8006316:	4613      	mov	r3, r2
 8006318:	eb42 0303 	adc.w	r3, r2, r3
 800631c:	647b      	str	r3, [r7, #68]	; 0x44
 800631e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006322:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006326:	f7fa fc77 	bl	8000c18 <__aeabi_uldivmod>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	4611      	mov	r1, r2
 8006330:	4b3b      	ldr	r3, [pc, #236]	; (8006420 <UART_SetConfig+0x2d4>)
 8006332:	fba3 2301 	umull	r2, r3, r3, r1
 8006336:	095b      	lsrs	r3, r3, #5
 8006338:	2264      	movs	r2, #100	; 0x64
 800633a:	fb02 f303 	mul.w	r3, r2, r3
 800633e:	1acb      	subs	r3, r1, r3
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006346:	4b36      	ldr	r3, [pc, #216]	; (8006420 <UART_SetConfig+0x2d4>)
 8006348:	fba3 2302 	umull	r2, r3, r3, r2
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006354:	441c      	add	r4, r3
 8006356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800635a:	2200      	movs	r2, #0
 800635c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006360:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006364:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006368:	4642      	mov	r2, r8
 800636a:	464b      	mov	r3, r9
 800636c:	1891      	adds	r1, r2, r2
 800636e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006370:	415b      	adcs	r3, r3
 8006372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006374:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006378:	4641      	mov	r1, r8
 800637a:	1851      	adds	r1, r2, r1
 800637c:	6339      	str	r1, [r7, #48]	; 0x30
 800637e:	4649      	mov	r1, r9
 8006380:	414b      	adcs	r3, r1
 8006382:	637b      	str	r3, [r7, #52]	; 0x34
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006390:	4659      	mov	r1, fp
 8006392:	00cb      	lsls	r3, r1, #3
 8006394:	4651      	mov	r1, sl
 8006396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800639a:	4651      	mov	r1, sl
 800639c:	00ca      	lsls	r2, r1, #3
 800639e:	4610      	mov	r0, r2
 80063a0:	4619      	mov	r1, r3
 80063a2:	4603      	mov	r3, r0
 80063a4:	4642      	mov	r2, r8
 80063a6:	189b      	adds	r3, r3, r2
 80063a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063ac:	464b      	mov	r3, r9
 80063ae:	460a      	mov	r2, r1
 80063b0:	eb42 0303 	adc.w	r3, r2, r3
 80063b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80063c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80063cc:	460b      	mov	r3, r1
 80063ce:	18db      	adds	r3, r3, r3
 80063d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d2:	4613      	mov	r3, r2
 80063d4:	eb42 0303 	adc.w	r3, r2, r3
 80063d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063e2:	f7fa fc19 	bl	8000c18 <__aeabi_uldivmod>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4b0d      	ldr	r3, [pc, #52]	; (8006420 <UART_SetConfig+0x2d4>)
 80063ec:	fba3 1302 	umull	r1, r3, r3, r2
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	2164      	movs	r1, #100	; 0x64
 80063f4:	fb01 f303 	mul.w	r3, r1, r3
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	3332      	adds	r3, #50	; 0x32
 80063fe:	4a08      	ldr	r2, [pc, #32]	; (8006420 <UART_SetConfig+0x2d4>)
 8006400:	fba2 2303 	umull	r2, r3, r2, r3
 8006404:	095b      	lsrs	r3, r3, #5
 8006406:	f003 0207 	and.w	r2, r3, #7
 800640a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4422      	add	r2, r4
 8006412:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006414:	e105      	b.n	8006622 <UART_SetConfig+0x4d6>
 8006416:	bf00      	nop
 8006418:	40011000 	.word	0x40011000
 800641c:	40011400 	.word	0x40011400
 8006420:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006428:	2200      	movs	r2, #0
 800642a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800642e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006432:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006436:	4642      	mov	r2, r8
 8006438:	464b      	mov	r3, r9
 800643a:	1891      	adds	r1, r2, r2
 800643c:	6239      	str	r1, [r7, #32]
 800643e:	415b      	adcs	r3, r3
 8006440:	627b      	str	r3, [r7, #36]	; 0x24
 8006442:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006446:	4641      	mov	r1, r8
 8006448:	1854      	adds	r4, r2, r1
 800644a:	4649      	mov	r1, r9
 800644c:	eb43 0501 	adc.w	r5, r3, r1
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	00eb      	lsls	r3, r5, #3
 800645a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800645e:	00e2      	lsls	r2, r4, #3
 8006460:	4614      	mov	r4, r2
 8006462:	461d      	mov	r5, r3
 8006464:	4643      	mov	r3, r8
 8006466:	18e3      	adds	r3, r4, r3
 8006468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800646c:	464b      	mov	r3, r9
 800646e:	eb45 0303 	adc.w	r3, r5, r3
 8006472:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006482:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006486:	f04f 0200 	mov.w	r2, #0
 800648a:	f04f 0300 	mov.w	r3, #0
 800648e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006492:	4629      	mov	r1, r5
 8006494:	008b      	lsls	r3, r1, #2
 8006496:	4621      	mov	r1, r4
 8006498:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800649c:	4621      	mov	r1, r4
 800649e:	008a      	lsls	r2, r1, #2
 80064a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064a4:	f7fa fbb8 	bl	8000c18 <__aeabi_uldivmod>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4b60      	ldr	r3, [pc, #384]	; (8006630 <UART_SetConfig+0x4e4>)
 80064ae:	fba3 2302 	umull	r2, r3, r3, r2
 80064b2:	095b      	lsrs	r3, r3, #5
 80064b4:	011c      	lsls	r4, r3, #4
 80064b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80064c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80064c8:	4642      	mov	r2, r8
 80064ca:	464b      	mov	r3, r9
 80064cc:	1891      	adds	r1, r2, r2
 80064ce:	61b9      	str	r1, [r7, #24]
 80064d0:	415b      	adcs	r3, r3
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064d8:	4641      	mov	r1, r8
 80064da:	1851      	adds	r1, r2, r1
 80064dc:	6139      	str	r1, [r7, #16]
 80064de:	4649      	mov	r1, r9
 80064e0:	414b      	adcs	r3, r1
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064f0:	4659      	mov	r1, fp
 80064f2:	00cb      	lsls	r3, r1, #3
 80064f4:	4651      	mov	r1, sl
 80064f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064fa:	4651      	mov	r1, sl
 80064fc:	00ca      	lsls	r2, r1, #3
 80064fe:	4610      	mov	r0, r2
 8006500:	4619      	mov	r1, r3
 8006502:	4603      	mov	r3, r0
 8006504:	4642      	mov	r2, r8
 8006506:	189b      	adds	r3, r3, r2
 8006508:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800650c:	464b      	mov	r3, r9
 800650e:	460a      	mov	r2, r1
 8006510:	eb42 0303 	adc.w	r3, r2, r3
 8006514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	67bb      	str	r3, [r7, #120]	; 0x78
 8006522:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006530:	4649      	mov	r1, r9
 8006532:	008b      	lsls	r3, r1, #2
 8006534:	4641      	mov	r1, r8
 8006536:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800653a:	4641      	mov	r1, r8
 800653c:	008a      	lsls	r2, r1, #2
 800653e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006542:	f7fa fb69 	bl	8000c18 <__aeabi_uldivmod>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	4b39      	ldr	r3, [pc, #228]	; (8006630 <UART_SetConfig+0x4e4>)
 800654c:	fba3 1302 	umull	r1, r3, r3, r2
 8006550:	095b      	lsrs	r3, r3, #5
 8006552:	2164      	movs	r1, #100	; 0x64
 8006554:	fb01 f303 	mul.w	r3, r1, r3
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	3332      	adds	r3, #50	; 0x32
 800655e:	4a34      	ldr	r2, [pc, #208]	; (8006630 <UART_SetConfig+0x4e4>)
 8006560:	fba2 2303 	umull	r2, r3, r2, r3
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800656a:	441c      	add	r4, r3
 800656c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006570:	2200      	movs	r2, #0
 8006572:	673b      	str	r3, [r7, #112]	; 0x70
 8006574:	677a      	str	r2, [r7, #116]	; 0x74
 8006576:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800657a:	4642      	mov	r2, r8
 800657c:	464b      	mov	r3, r9
 800657e:	1891      	adds	r1, r2, r2
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	415b      	adcs	r3, r3
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800658a:	4641      	mov	r1, r8
 800658c:	1851      	adds	r1, r2, r1
 800658e:	6039      	str	r1, [r7, #0]
 8006590:	4649      	mov	r1, r9
 8006592:	414b      	adcs	r3, r1
 8006594:	607b      	str	r3, [r7, #4]
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	f04f 0300 	mov.w	r3, #0
 800659e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065a2:	4659      	mov	r1, fp
 80065a4:	00cb      	lsls	r3, r1, #3
 80065a6:	4651      	mov	r1, sl
 80065a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ac:	4651      	mov	r1, sl
 80065ae:	00ca      	lsls	r2, r1, #3
 80065b0:	4610      	mov	r0, r2
 80065b2:	4619      	mov	r1, r3
 80065b4:	4603      	mov	r3, r0
 80065b6:	4642      	mov	r2, r8
 80065b8:	189b      	adds	r3, r3, r2
 80065ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80065bc:	464b      	mov	r3, r9
 80065be:	460a      	mov	r2, r1
 80065c0:	eb42 0303 	adc.w	r3, r2, r3
 80065c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	663b      	str	r3, [r7, #96]	; 0x60
 80065d0:	667a      	str	r2, [r7, #100]	; 0x64
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80065de:	4649      	mov	r1, r9
 80065e0:	008b      	lsls	r3, r1, #2
 80065e2:	4641      	mov	r1, r8
 80065e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065e8:	4641      	mov	r1, r8
 80065ea:	008a      	lsls	r2, r1, #2
 80065ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065f0:	f7fa fb12 	bl	8000c18 <__aeabi_uldivmod>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4b0d      	ldr	r3, [pc, #52]	; (8006630 <UART_SetConfig+0x4e4>)
 80065fa:	fba3 1302 	umull	r1, r3, r3, r2
 80065fe:	095b      	lsrs	r3, r3, #5
 8006600:	2164      	movs	r1, #100	; 0x64
 8006602:	fb01 f303 	mul.w	r3, r1, r3
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	3332      	adds	r3, #50	; 0x32
 800660c:	4a08      	ldr	r2, [pc, #32]	; (8006630 <UART_SetConfig+0x4e4>)
 800660e:	fba2 2303 	umull	r2, r3, r2, r3
 8006612:	095b      	lsrs	r3, r3, #5
 8006614:	f003 020f 	and.w	r2, r3, #15
 8006618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4422      	add	r2, r4
 8006620:	609a      	str	r2, [r3, #8]
}
 8006622:	bf00      	nop
 8006624:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006628:	46bd      	mov	sp, r7
 800662a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800662e:	bf00      	nop
 8006630:	51eb851f 	.word	0x51eb851f

08006634 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006634:	b084      	sub	sp, #16
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	f107 001c 	add.w	r0, r7, #28
 8006642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	2b01      	cmp	r3, #1
 800664a:	d122      	bne.n	8006692 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006676:	2b01      	cmp	r3, #1
 8006678:	d105      	bne.n	8006686 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 faa2 	bl	8006bd0 <USB_CoreReset>
 800668c:	4603      	mov	r3, r0
 800668e:	73fb      	strb	r3, [r7, #15]
 8006690:	e01a      	b.n	80066c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fa96 	bl	8006bd0 <USB_CoreReset>
 80066a4:	4603      	mov	r3, r0
 80066a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80066a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38
 80066ba:	e005      	b.n	80066c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d10b      	bne.n	80066e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f043 0206 	orr.w	r2, r3, #6
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f043 0220 	orr.w	r2, r3, #32
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066f2:	b004      	add	sp, #16
 80066f4:	4770      	bx	lr

080066f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f023 0201 	bic.w	r2, r3, #1
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d115      	bne.n	8006766 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006746:	2001      	movs	r0, #1
 8006748:	f7fb ff10 	bl	800256c <HAL_Delay>
      ms++;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
 8006750:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fa2e 	bl	8006bb4 <USB_GetMode>
 8006758:	4603      	mov	r3, r0
 800675a:	2b01      	cmp	r3, #1
 800675c:	d01e      	beq.n	800679c <USB_SetCurrentMode+0x84>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2b31      	cmp	r3, #49	; 0x31
 8006762:	d9f0      	bls.n	8006746 <USB_SetCurrentMode+0x2e>
 8006764:	e01a      	b.n	800679c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006766:	78fb      	ldrb	r3, [r7, #3]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d115      	bne.n	8006798 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006778:	2001      	movs	r0, #1
 800677a:	f7fb fef7 	bl	800256c <HAL_Delay>
      ms++;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3301      	adds	r3, #1
 8006782:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fa15 	bl	8006bb4 <USB_GetMode>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d005      	beq.n	800679c <USB_SetCurrentMode+0x84>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b31      	cmp	r3, #49	; 0x31
 8006794:	d9f0      	bls.n	8006778 <USB_SetCurrentMode+0x60>
 8006796:	e001      	b.n	800679c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e005      	b.n	80067a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b32      	cmp	r3, #50	; 0x32
 80067a0:	d101      	bne.n	80067a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e000      	b.n	80067a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067b0:	b084      	sub	sp, #16
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b086      	sub	sp, #24
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067ca:	2300      	movs	r3, #0
 80067cc:	613b      	str	r3, [r7, #16]
 80067ce:	e009      	b.n	80067e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	3340      	adds	r3, #64	; 0x40
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	2200      	movs	r2, #0
 80067dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	3301      	adds	r3, #1
 80067e2:	613b      	str	r3, [r7, #16]
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b0e      	cmp	r3, #14
 80067e8:	d9f2      	bls.n	80067d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80067ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d11c      	bne.n	800682a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067fe:	f043 0302 	orr.w	r3, r3, #2
 8006802:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
 8006828:	e00b      	b.n	8006842 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006848:	461a      	mov	r2, r3
 800684a:	2300      	movs	r3, #0
 800684c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006854:	4619      	mov	r1, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685c:	461a      	mov	r2, r3
 800685e:	680b      	ldr	r3, [r1, #0]
 8006860:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006864:	2b01      	cmp	r3, #1
 8006866:	d10c      	bne.n	8006882 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	2b00      	cmp	r3, #0
 800686c:	d104      	bne.n	8006878 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800686e:	2100      	movs	r1, #0
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f965 	bl	8006b40 <USB_SetDevSpeed>
 8006876:	e008      	b.n	800688a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006878:	2101      	movs	r1, #1
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f960 	bl	8006b40 <USB_SetDevSpeed>
 8006880:	e003      	b.n	800688a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006882:	2103      	movs	r1, #3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f95b 	bl	8006b40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800688a:	2110      	movs	r1, #16
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f8f3 	bl	8006a78 <USB_FlushTxFifo>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f91f 	bl	8006ae0 <USB_FlushRxFifo>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b2:	461a      	mov	r2, r3
 80068b4:	2300      	movs	r3, #0
 80068b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068be:	461a      	mov	r2, r3
 80068c0:	2300      	movs	r3, #0
 80068c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ca:	461a      	mov	r2, r3
 80068cc:	2300      	movs	r3, #0
 80068ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068d0:	2300      	movs	r3, #0
 80068d2:	613b      	str	r3, [r7, #16]
 80068d4:	e043      	b.n	800695e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068ec:	d118      	bne.n	8006920 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006900:	461a      	mov	r2, r3
 8006902:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	e013      	b.n	8006932 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006916:	461a      	mov	r2, r3
 8006918:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	e008      	b.n	8006932 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	461a      	mov	r2, r3
 800692e:	2300      	movs	r3, #0
 8006930:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693e:	461a      	mov	r2, r3
 8006940:	2300      	movs	r3, #0
 8006942:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006950:	461a      	mov	r2, r3
 8006952:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006956:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	3301      	adds	r3, #1
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	429a      	cmp	r2, r3
 8006964:	d3b7      	bcc.n	80068d6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006966:	2300      	movs	r3, #0
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	e043      	b.n	80069f4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800697e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006982:	d118      	bne.n	80069b6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006996:	461a      	mov	r2, r3
 8006998:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	e013      	b.n	80069c8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ac:	461a      	mov	r2, r3
 80069ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	e008      	b.n	80069c8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	461a      	mov	r2, r3
 80069c4:	2300      	movs	r3, #0
 80069c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d4:	461a      	mov	r2, r3
 80069d6:	2300      	movs	r3, #0
 80069d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e6:	461a      	mov	r2, r3
 80069e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	3301      	adds	r3, #1
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d3b7      	bcc.n	800696c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d105      	bne.n	8006a30 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f043 0210 	orr.w	r2, r3, #16
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699a      	ldr	r2, [r3, #24]
 8006a34:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <USB_DevInit+0x2c4>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d005      	beq.n	8006a4e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	f043 0208 	orr.w	r2, r3, #8
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d107      	bne.n	8006a64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a5c:	f043 0304 	orr.w	r3, r3, #4
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a70:	b004      	add	sp, #16
 8006a72:	4770      	bx	lr
 8006a74:	803c3800 	.word	0x803c3800

08006a78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4a13      	ldr	r2, [pc, #76]	; (8006adc <USB_FlushTxFifo+0x64>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d901      	bls.n	8006a98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e01b      	b.n	8006ad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	daf2      	bge.n	8006a86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	019b      	lsls	r3, r3, #6
 8006aa8:	f043 0220 	orr.w	r2, r3, #32
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4a08      	ldr	r2, [pc, #32]	; (8006adc <USB_FlushTxFifo+0x64>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d901      	bls.n	8006ac2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e006      	b.n	8006ad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d0f0      	beq.n	8006ab0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	00030d40 	.word	0x00030d40

08006ae0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	3301      	adds	r3, #1
 8006af0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4a11      	ldr	r2, [pc, #68]	; (8006b3c <USB_FlushRxFifo+0x5c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d901      	bls.n	8006afe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e018      	b.n	8006b30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	daf2      	bge.n	8006aec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2210      	movs	r2, #16
 8006b0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3301      	adds	r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4a08      	ldr	r2, [pc, #32]	; (8006b3c <USB_FlushRxFifo+0x5c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d901      	bls.n	8006b22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e006      	b.n	8006b30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f003 0310 	and.w	r3, r3, #16
 8006b2a:	2b10      	cmp	r3, #16
 8006b2c:	d0f0      	beq.n	8006b10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	00030d40 	.word	0x00030d40

08006b40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	68f9      	ldr	r1, [r7, #12]
 8006b5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b60:	4313      	orrs	r3, r2
 8006b62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b8c:	f023 0303 	bic.w	r3, r3, #3
 8006b90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ba0:	f043 0302 	orr.w	r3, r3, #2
 8006ba4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	f003 0301 	and.w	r3, r3, #1
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3301      	adds	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4a13      	ldr	r2, [pc, #76]	; (8006c34 <USB_CoreReset+0x64>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d901      	bls.n	8006bee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e01b      	b.n	8006c26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	daf2      	bge.n	8006bdc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f043 0201 	orr.w	r2, r3, #1
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4a09      	ldr	r2, [pc, #36]	; (8006c34 <USB_CoreReset+0x64>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d901      	bls.n	8006c18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e006      	b.n	8006c26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d0f0      	beq.n	8006c06 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	00030d40 	.word	0x00030d40

08006c38 <pow>:
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	ed2d 8b02 	vpush	{d8}
 8006c3e:	eeb0 8a40 	vmov.f32	s16, s0
 8006c42:	eef0 8a60 	vmov.f32	s17, s1
 8006c46:	ec55 4b11 	vmov	r4, r5, d1
 8006c4a:	f000 f865 	bl	8006d18 <__ieee754_pow>
 8006c4e:	4622      	mov	r2, r4
 8006c50:	462b      	mov	r3, r5
 8006c52:	4620      	mov	r0, r4
 8006c54:	4629      	mov	r1, r5
 8006c56:	ec57 6b10 	vmov	r6, r7, d0
 8006c5a:	f7f9 ff77 	bl	8000b4c <__aeabi_dcmpun>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d13b      	bne.n	8006cda <pow+0xa2>
 8006c62:	ec51 0b18 	vmov	r0, r1, d8
 8006c66:	2200      	movs	r2, #0
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f7f9 ff3d 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c6e:	b1b8      	cbz	r0, 8006ca0 <pow+0x68>
 8006c70:	2200      	movs	r2, #0
 8006c72:	2300      	movs	r3, #0
 8006c74:	4620      	mov	r0, r4
 8006c76:	4629      	mov	r1, r5
 8006c78:	f7f9 ff36 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d146      	bne.n	8006d0e <pow+0xd6>
 8006c80:	ec45 4b10 	vmov	d0, r4, r5
 8006c84:	f000 fe61 	bl	800794a <finite>
 8006c88:	b338      	cbz	r0, 8006cda <pow+0xa2>
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	f7f9 ff33 	bl	8000afc <__aeabi_dcmplt>
 8006c96:	b300      	cbz	r0, 8006cda <pow+0xa2>
 8006c98:	f000 fee8 	bl	8007a6c <__errno>
 8006c9c:	2322      	movs	r3, #34	; 0x22
 8006c9e:	e01b      	b.n	8006cd8 <pow+0xa0>
 8006ca0:	ec47 6b10 	vmov	d0, r6, r7
 8006ca4:	f000 fe51 	bl	800794a <finite>
 8006ca8:	b9e0      	cbnz	r0, 8006ce4 <pow+0xac>
 8006caa:	eeb0 0a48 	vmov.f32	s0, s16
 8006cae:	eef0 0a68 	vmov.f32	s1, s17
 8006cb2:	f000 fe4a 	bl	800794a <finite>
 8006cb6:	b1a8      	cbz	r0, 8006ce4 <pow+0xac>
 8006cb8:	ec45 4b10 	vmov	d0, r4, r5
 8006cbc:	f000 fe45 	bl	800794a <finite>
 8006cc0:	b180      	cbz	r0, 8006ce4 <pow+0xac>
 8006cc2:	4632      	mov	r2, r6
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	4639      	mov	r1, r7
 8006cca:	f7f9 ff3f 	bl	8000b4c <__aeabi_dcmpun>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d0e2      	beq.n	8006c98 <pow+0x60>
 8006cd2:	f000 fecb 	bl	8007a6c <__errno>
 8006cd6:	2321      	movs	r3, #33	; 0x21
 8006cd8:	6003      	str	r3, [r0, #0]
 8006cda:	ecbd 8b02 	vpop	{d8}
 8006cde:	ec47 6b10 	vmov	d0, r6, r7
 8006ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4630      	mov	r0, r6
 8006cea:	4639      	mov	r1, r7
 8006cec:	f7f9 fefc 	bl	8000ae8 <__aeabi_dcmpeq>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d0f2      	beq.n	8006cda <pow+0xa2>
 8006cf4:	eeb0 0a48 	vmov.f32	s0, s16
 8006cf8:	eef0 0a68 	vmov.f32	s1, s17
 8006cfc:	f000 fe25 	bl	800794a <finite>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d0ea      	beq.n	8006cda <pow+0xa2>
 8006d04:	ec45 4b10 	vmov	d0, r4, r5
 8006d08:	f000 fe1f 	bl	800794a <finite>
 8006d0c:	e7c3      	b.n	8006c96 <pow+0x5e>
 8006d0e:	4f01      	ldr	r7, [pc, #4]	; (8006d14 <pow+0xdc>)
 8006d10:	2600      	movs	r6, #0
 8006d12:	e7e2      	b.n	8006cda <pow+0xa2>
 8006d14:	3ff00000 	.word	0x3ff00000

08006d18 <__ieee754_pow>:
 8006d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	ed2d 8b06 	vpush	{d8-d10}
 8006d20:	b089      	sub	sp, #36	; 0x24
 8006d22:	ed8d 1b00 	vstr	d1, [sp]
 8006d26:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006d2a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006d2e:	ea58 0102 	orrs.w	r1, r8, r2
 8006d32:	ec57 6b10 	vmov	r6, r7, d0
 8006d36:	d115      	bne.n	8006d64 <__ieee754_pow+0x4c>
 8006d38:	19b3      	adds	r3, r6, r6
 8006d3a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006d3e:	4152      	adcs	r2, r2
 8006d40:	4299      	cmp	r1, r3
 8006d42:	4b89      	ldr	r3, [pc, #548]	; (8006f68 <__ieee754_pow+0x250>)
 8006d44:	4193      	sbcs	r3, r2
 8006d46:	f080 84d2 	bcs.w	80076ee <__ieee754_pow+0x9d6>
 8006d4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d4e:	4630      	mov	r0, r6
 8006d50:	4639      	mov	r1, r7
 8006d52:	f7f9 faab 	bl	80002ac <__adddf3>
 8006d56:	ec41 0b10 	vmov	d0, r0, r1
 8006d5a:	b009      	add	sp, #36	; 0x24
 8006d5c:	ecbd 8b06 	vpop	{d8-d10}
 8006d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d64:	4b81      	ldr	r3, [pc, #516]	; (8006f6c <__ieee754_pow+0x254>)
 8006d66:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006d6a:	429c      	cmp	r4, r3
 8006d6c:	ee10 aa10 	vmov	sl, s0
 8006d70:	463d      	mov	r5, r7
 8006d72:	dc06      	bgt.n	8006d82 <__ieee754_pow+0x6a>
 8006d74:	d101      	bne.n	8006d7a <__ieee754_pow+0x62>
 8006d76:	2e00      	cmp	r6, #0
 8006d78:	d1e7      	bne.n	8006d4a <__ieee754_pow+0x32>
 8006d7a:	4598      	cmp	r8, r3
 8006d7c:	dc01      	bgt.n	8006d82 <__ieee754_pow+0x6a>
 8006d7e:	d10f      	bne.n	8006da0 <__ieee754_pow+0x88>
 8006d80:	b172      	cbz	r2, 8006da0 <__ieee754_pow+0x88>
 8006d82:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006d86:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006d8a:	ea55 050a 	orrs.w	r5, r5, sl
 8006d8e:	d1dc      	bne.n	8006d4a <__ieee754_pow+0x32>
 8006d90:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006d94:	18db      	adds	r3, r3, r3
 8006d96:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006d9a:	4152      	adcs	r2, r2
 8006d9c:	429d      	cmp	r5, r3
 8006d9e:	e7d0      	b.n	8006d42 <__ieee754_pow+0x2a>
 8006da0:	2d00      	cmp	r5, #0
 8006da2:	da3b      	bge.n	8006e1c <__ieee754_pow+0x104>
 8006da4:	4b72      	ldr	r3, [pc, #456]	; (8006f70 <__ieee754_pow+0x258>)
 8006da6:	4598      	cmp	r8, r3
 8006da8:	dc51      	bgt.n	8006e4e <__ieee754_pow+0x136>
 8006daa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006dae:	4598      	cmp	r8, r3
 8006db0:	f340 84ac 	ble.w	800770c <__ieee754_pow+0x9f4>
 8006db4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006db8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006dbc:	2b14      	cmp	r3, #20
 8006dbe:	dd0f      	ble.n	8006de0 <__ieee754_pow+0xc8>
 8006dc0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006dc4:	fa22 f103 	lsr.w	r1, r2, r3
 8006dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	f040 849d 	bne.w	800770c <__ieee754_pow+0x9f4>
 8006dd2:	f001 0101 	and.w	r1, r1, #1
 8006dd6:	f1c1 0302 	rsb	r3, r1, #2
 8006dda:	9304      	str	r3, [sp, #16]
 8006ddc:	b182      	cbz	r2, 8006e00 <__ieee754_pow+0xe8>
 8006dde:	e05f      	b.n	8006ea0 <__ieee754_pow+0x188>
 8006de0:	2a00      	cmp	r2, #0
 8006de2:	d15b      	bne.n	8006e9c <__ieee754_pow+0x184>
 8006de4:	f1c3 0314 	rsb	r3, r3, #20
 8006de8:	fa48 f103 	asr.w	r1, r8, r3
 8006dec:	fa01 f303 	lsl.w	r3, r1, r3
 8006df0:	4543      	cmp	r3, r8
 8006df2:	f040 8488 	bne.w	8007706 <__ieee754_pow+0x9ee>
 8006df6:	f001 0101 	and.w	r1, r1, #1
 8006dfa:	f1c1 0302 	rsb	r3, r1, #2
 8006dfe:	9304      	str	r3, [sp, #16]
 8006e00:	4b5c      	ldr	r3, [pc, #368]	; (8006f74 <__ieee754_pow+0x25c>)
 8006e02:	4598      	cmp	r8, r3
 8006e04:	d132      	bne.n	8006e6c <__ieee754_pow+0x154>
 8006e06:	f1b9 0f00 	cmp.w	r9, #0
 8006e0a:	f280 8478 	bge.w	80076fe <__ieee754_pow+0x9e6>
 8006e0e:	4959      	ldr	r1, [pc, #356]	; (8006f74 <__ieee754_pow+0x25c>)
 8006e10:	4632      	mov	r2, r6
 8006e12:	463b      	mov	r3, r7
 8006e14:	2000      	movs	r0, #0
 8006e16:	f7f9 fd29 	bl	800086c <__aeabi_ddiv>
 8006e1a:	e79c      	b.n	8006d56 <__ieee754_pow+0x3e>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9304      	str	r3, [sp, #16]
 8006e20:	2a00      	cmp	r2, #0
 8006e22:	d13d      	bne.n	8006ea0 <__ieee754_pow+0x188>
 8006e24:	4b51      	ldr	r3, [pc, #324]	; (8006f6c <__ieee754_pow+0x254>)
 8006e26:	4598      	cmp	r8, r3
 8006e28:	d1ea      	bne.n	8006e00 <__ieee754_pow+0xe8>
 8006e2a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006e2e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006e32:	ea53 030a 	orrs.w	r3, r3, sl
 8006e36:	f000 845a 	beq.w	80076ee <__ieee754_pow+0x9d6>
 8006e3a:	4b4f      	ldr	r3, [pc, #316]	; (8006f78 <__ieee754_pow+0x260>)
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	dd08      	ble.n	8006e52 <__ieee754_pow+0x13a>
 8006e40:	f1b9 0f00 	cmp.w	r9, #0
 8006e44:	f2c0 8457 	blt.w	80076f6 <__ieee754_pow+0x9de>
 8006e48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e4c:	e783      	b.n	8006d56 <__ieee754_pow+0x3e>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e7e5      	b.n	8006e1e <__ieee754_pow+0x106>
 8006e52:	f1b9 0f00 	cmp.w	r9, #0
 8006e56:	f04f 0000 	mov.w	r0, #0
 8006e5a:	f04f 0100 	mov.w	r1, #0
 8006e5e:	f6bf af7a 	bge.w	8006d56 <__ieee754_pow+0x3e>
 8006e62:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006e66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006e6a:	e774      	b.n	8006d56 <__ieee754_pow+0x3e>
 8006e6c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006e70:	d106      	bne.n	8006e80 <__ieee754_pow+0x168>
 8006e72:	4632      	mov	r2, r6
 8006e74:	463b      	mov	r3, r7
 8006e76:	4630      	mov	r0, r6
 8006e78:	4639      	mov	r1, r7
 8006e7a:	f7f9 fbcd 	bl	8000618 <__aeabi_dmul>
 8006e7e:	e76a      	b.n	8006d56 <__ieee754_pow+0x3e>
 8006e80:	4b3e      	ldr	r3, [pc, #248]	; (8006f7c <__ieee754_pow+0x264>)
 8006e82:	4599      	cmp	r9, r3
 8006e84:	d10c      	bne.n	8006ea0 <__ieee754_pow+0x188>
 8006e86:	2d00      	cmp	r5, #0
 8006e88:	db0a      	blt.n	8006ea0 <__ieee754_pow+0x188>
 8006e8a:	ec47 6b10 	vmov	d0, r6, r7
 8006e8e:	b009      	add	sp, #36	; 0x24
 8006e90:	ecbd 8b06 	vpop	{d8-d10}
 8006e94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e98:	f000 bc6c 	b.w	8007774 <__ieee754_sqrt>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9304      	str	r3, [sp, #16]
 8006ea0:	ec47 6b10 	vmov	d0, r6, r7
 8006ea4:	f000 fd48 	bl	8007938 <fabs>
 8006ea8:	ec51 0b10 	vmov	r0, r1, d0
 8006eac:	f1ba 0f00 	cmp.w	sl, #0
 8006eb0:	d129      	bne.n	8006f06 <__ieee754_pow+0x1ee>
 8006eb2:	b124      	cbz	r4, 8006ebe <__ieee754_pow+0x1a6>
 8006eb4:	4b2f      	ldr	r3, [pc, #188]	; (8006f74 <__ieee754_pow+0x25c>)
 8006eb6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d123      	bne.n	8006f06 <__ieee754_pow+0x1ee>
 8006ebe:	f1b9 0f00 	cmp.w	r9, #0
 8006ec2:	da05      	bge.n	8006ed0 <__ieee754_pow+0x1b8>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	2000      	movs	r0, #0
 8006eca:	492a      	ldr	r1, [pc, #168]	; (8006f74 <__ieee754_pow+0x25c>)
 8006ecc:	f7f9 fcce 	bl	800086c <__aeabi_ddiv>
 8006ed0:	2d00      	cmp	r5, #0
 8006ed2:	f6bf af40 	bge.w	8006d56 <__ieee754_pow+0x3e>
 8006ed6:	9b04      	ldr	r3, [sp, #16]
 8006ed8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006edc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006ee0:	4323      	orrs	r3, r4
 8006ee2:	d108      	bne.n	8006ef6 <__ieee754_pow+0x1de>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4610      	mov	r0, r2
 8006eea:	4619      	mov	r1, r3
 8006eec:	f7f9 f9dc 	bl	80002a8 <__aeabi_dsub>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	e78f      	b.n	8006e16 <__ieee754_pow+0xfe>
 8006ef6:	9b04      	ldr	r3, [sp, #16]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	f47f af2c 	bne.w	8006d56 <__ieee754_pow+0x3e>
 8006efe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f02:	4619      	mov	r1, r3
 8006f04:	e727      	b.n	8006d56 <__ieee754_pow+0x3e>
 8006f06:	0feb      	lsrs	r3, r5, #31
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	9306      	str	r3, [sp, #24]
 8006f0c:	9a06      	ldr	r2, [sp, #24]
 8006f0e:	9b04      	ldr	r3, [sp, #16]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	d102      	bne.n	8006f1a <__ieee754_pow+0x202>
 8006f14:	4632      	mov	r2, r6
 8006f16:	463b      	mov	r3, r7
 8006f18:	e7e6      	b.n	8006ee8 <__ieee754_pow+0x1d0>
 8006f1a:	4b19      	ldr	r3, [pc, #100]	; (8006f80 <__ieee754_pow+0x268>)
 8006f1c:	4598      	cmp	r8, r3
 8006f1e:	f340 80fb 	ble.w	8007118 <__ieee754_pow+0x400>
 8006f22:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006f26:	4598      	cmp	r8, r3
 8006f28:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <__ieee754_pow+0x260>)
 8006f2a:	dd0c      	ble.n	8006f46 <__ieee754_pow+0x22e>
 8006f2c:	429c      	cmp	r4, r3
 8006f2e:	dc0f      	bgt.n	8006f50 <__ieee754_pow+0x238>
 8006f30:	f1b9 0f00 	cmp.w	r9, #0
 8006f34:	da0f      	bge.n	8006f56 <__ieee754_pow+0x23e>
 8006f36:	2000      	movs	r0, #0
 8006f38:	b009      	add	sp, #36	; 0x24
 8006f3a:	ecbd 8b06 	vpop	{d8-d10}
 8006f3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f42:	f000 bcf0 	b.w	8007926 <__math_oflow>
 8006f46:	429c      	cmp	r4, r3
 8006f48:	dbf2      	blt.n	8006f30 <__ieee754_pow+0x218>
 8006f4a:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <__ieee754_pow+0x25c>)
 8006f4c:	429c      	cmp	r4, r3
 8006f4e:	dd19      	ble.n	8006f84 <__ieee754_pow+0x26c>
 8006f50:	f1b9 0f00 	cmp.w	r9, #0
 8006f54:	dcef      	bgt.n	8006f36 <__ieee754_pow+0x21e>
 8006f56:	2000      	movs	r0, #0
 8006f58:	b009      	add	sp, #36	; 0x24
 8006f5a:	ecbd 8b06 	vpop	{d8-d10}
 8006f5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f62:	f000 bcd7 	b.w	8007914 <__math_uflow>
 8006f66:	bf00      	nop
 8006f68:	fff00000 	.word	0xfff00000
 8006f6c:	7ff00000 	.word	0x7ff00000
 8006f70:	433fffff 	.word	0x433fffff
 8006f74:	3ff00000 	.word	0x3ff00000
 8006f78:	3fefffff 	.word	0x3fefffff
 8006f7c:	3fe00000 	.word	0x3fe00000
 8006f80:	41e00000 	.word	0x41e00000
 8006f84:	4b60      	ldr	r3, [pc, #384]	; (8007108 <__ieee754_pow+0x3f0>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	f7f9 f98e 	bl	80002a8 <__aeabi_dsub>
 8006f8c:	a354      	add	r3, pc, #336	; (adr r3, 80070e0 <__ieee754_pow+0x3c8>)
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	4604      	mov	r4, r0
 8006f94:	460d      	mov	r5, r1
 8006f96:	f7f9 fb3f 	bl	8000618 <__aeabi_dmul>
 8006f9a:	a353      	add	r3, pc, #332	; (adr r3, 80070e8 <__ieee754_pow+0x3d0>)
 8006f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	460f      	mov	r7, r1
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	f7f9 fb36 	bl	8000618 <__aeabi_dmul>
 8006fac:	4b57      	ldr	r3, [pc, #348]	; (800710c <__ieee754_pow+0x3f4>)
 8006fae:	4682      	mov	sl, r0
 8006fb0:	468b      	mov	fp, r1
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	f7f9 fb2e 	bl	8000618 <__aeabi_dmul>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	a14b      	add	r1, pc, #300	; (adr r1, 80070f0 <__ieee754_pow+0x3d8>)
 8006fc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fc6:	f7f9 f96f 	bl	80002a8 <__aeabi_dsub>
 8006fca:	4622      	mov	r2, r4
 8006fcc:	462b      	mov	r3, r5
 8006fce:	f7f9 fb23 	bl	8000618 <__aeabi_dmul>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	494d      	ldr	r1, [pc, #308]	; (8007110 <__ieee754_pow+0x3f8>)
 8006fda:	f7f9 f965 	bl	80002a8 <__aeabi_dsub>
 8006fde:	4622      	mov	r2, r4
 8006fe0:	4680      	mov	r8, r0
 8006fe2:	4689      	mov	r9, r1
 8006fe4:	462b      	mov	r3, r5
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	4629      	mov	r1, r5
 8006fea:	f7f9 fb15 	bl	8000618 <__aeabi_dmul>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	f7f9 fb0f 	bl	8000618 <__aeabi_dmul>
 8006ffa:	a33f      	add	r3, pc, #252	; (adr r3, 80070f8 <__ieee754_pow+0x3e0>)
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f7f9 fb0a 	bl	8000618 <__aeabi_dmul>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4650      	mov	r0, sl
 800700a:	4659      	mov	r1, fp
 800700c:	f7f9 f94c 	bl	80002a8 <__aeabi_dsub>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4680      	mov	r8, r0
 8007016:	4689      	mov	r9, r1
 8007018:	4630      	mov	r0, r6
 800701a:	4639      	mov	r1, r7
 800701c:	f7f9 f946 	bl	80002ac <__adddf3>
 8007020:	2000      	movs	r0, #0
 8007022:	4632      	mov	r2, r6
 8007024:	463b      	mov	r3, r7
 8007026:	4604      	mov	r4, r0
 8007028:	460d      	mov	r5, r1
 800702a:	f7f9 f93d 	bl	80002a8 <__aeabi_dsub>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4640      	mov	r0, r8
 8007034:	4649      	mov	r1, r9
 8007036:	f7f9 f937 	bl	80002a8 <__aeabi_dsub>
 800703a:	9b04      	ldr	r3, [sp, #16]
 800703c:	9a06      	ldr	r2, [sp, #24]
 800703e:	3b01      	subs	r3, #1
 8007040:	4313      	orrs	r3, r2
 8007042:	4682      	mov	sl, r0
 8007044:	468b      	mov	fp, r1
 8007046:	f040 81e7 	bne.w	8007418 <__ieee754_pow+0x700>
 800704a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007100 <__ieee754_pow+0x3e8>
 800704e:	eeb0 8a47 	vmov.f32	s16, s14
 8007052:	eef0 8a67 	vmov.f32	s17, s15
 8007056:	e9dd 6700 	ldrd	r6, r7, [sp]
 800705a:	2600      	movs	r6, #0
 800705c:	4632      	mov	r2, r6
 800705e:	463b      	mov	r3, r7
 8007060:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007064:	f7f9 f920 	bl	80002a8 <__aeabi_dsub>
 8007068:	4622      	mov	r2, r4
 800706a:	462b      	mov	r3, r5
 800706c:	f7f9 fad4 	bl	8000618 <__aeabi_dmul>
 8007070:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007074:	4680      	mov	r8, r0
 8007076:	4689      	mov	r9, r1
 8007078:	4650      	mov	r0, sl
 800707a:	4659      	mov	r1, fp
 800707c:	f7f9 facc 	bl	8000618 <__aeabi_dmul>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4640      	mov	r0, r8
 8007086:	4649      	mov	r1, r9
 8007088:	f7f9 f910 	bl	80002ac <__adddf3>
 800708c:	4632      	mov	r2, r6
 800708e:	463b      	mov	r3, r7
 8007090:	4680      	mov	r8, r0
 8007092:	4689      	mov	r9, r1
 8007094:	4620      	mov	r0, r4
 8007096:	4629      	mov	r1, r5
 8007098:	f7f9 fabe 	bl	8000618 <__aeabi_dmul>
 800709c:	460b      	mov	r3, r1
 800709e:	4604      	mov	r4, r0
 80070a0:	460d      	mov	r5, r1
 80070a2:	4602      	mov	r2, r0
 80070a4:	4649      	mov	r1, r9
 80070a6:	4640      	mov	r0, r8
 80070a8:	f7f9 f900 	bl	80002ac <__adddf3>
 80070ac:	4b19      	ldr	r3, [pc, #100]	; (8007114 <__ieee754_pow+0x3fc>)
 80070ae:	4299      	cmp	r1, r3
 80070b0:	ec45 4b19 	vmov	d9, r4, r5
 80070b4:	4606      	mov	r6, r0
 80070b6:	460f      	mov	r7, r1
 80070b8:	468b      	mov	fp, r1
 80070ba:	f340 82f1 	ble.w	80076a0 <__ieee754_pow+0x988>
 80070be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80070c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80070c6:	4303      	orrs	r3, r0
 80070c8:	f000 81e4 	beq.w	8007494 <__ieee754_pow+0x77c>
 80070cc:	ec51 0b18 	vmov	r0, r1, d8
 80070d0:	2200      	movs	r2, #0
 80070d2:	2300      	movs	r3, #0
 80070d4:	f7f9 fd12 	bl	8000afc <__aeabi_dcmplt>
 80070d8:	3800      	subs	r0, #0
 80070da:	bf18      	it	ne
 80070dc:	2001      	movne	r0, #1
 80070de:	e72b      	b.n	8006f38 <__ieee754_pow+0x220>
 80070e0:	60000000 	.word	0x60000000
 80070e4:	3ff71547 	.word	0x3ff71547
 80070e8:	f85ddf44 	.word	0xf85ddf44
 80070ec:	3e54ae0b 	.word	0x3e54ae0b
 80070f0:	55555555 	.word	0x55555555
 80070f4:	3fd55555 	.word	0x3fd55555
 80070f8:	652b82fe 	.word	0x652b82fe
 80070fc:	3ff71547 	.word	0x3ff71547
 8007100:	00000000 	.word	0x00000000
 8007104:	bff00000 	.word	0xbff00000
 8007108:	3ff00000 	.word	0x3ff00000
 800710c:	3fd00000 	.word	0x3fd00000
 8007110:	3fe00000 	.word	0x3fe00000
 8007114:	408fffff 	.word	0x408fffff
 8007118:	4bd5      	ldr	r3, [pc, #852]	; (8007470 <__ieee754_pow+0x758>)
 800711a:	402b      	ands	r3, r5
 800711c:	2200      	movs	r2, #0
 800711e:	b92b      	cbnz	r3, 800712c <__ieee754_pow+0x414>
 8007120:	4bd4      	ldr	r3, [pc, #848]	; (8007474 <__ieee754_pow+0x75c>)
 8007122:	f7f9 fa79 	bl	8000618 <__aeabi_dmul>
 8007126:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800712a:	460c      	mov	r4, r1
 800712c:	1523      	asrs	r3, r4, #20
 800712e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007132:	4413      	add	r3, r2
 8007134:	9305      	str	r3, [sp, #20]
 8007136:	4bd0      	ldr	r3, [pc, #832]	; (8007478 <__ieee754_pow+0x760>)
 8007138:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800713c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007140:	429c      	cmp	r4, r3
 8007142:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007146:	dd08      	ble.n	800715a <__ieee754_pow+0x442>
 8007148:	4bcc      	ldr	r3, [pc, #816]	; (800747c <__ieee754_pow+0x764>)
 800714a:	429c      	cmp	r4, r3
 800714c:	f340 8162 	ble.w	8007414 <__ieee754_pow+0x6fc>
 8007150:	9b05      	ldr	r3, [sp, #20]
 8007152:	3301      	adds	r3, #1
 8007154:	9305      	str	r3, [sp, #20]
 8007156:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800715a:	2400      	movs	r4, #0
 800715c:	00e3      	lsls	r3, r4, #3
 800715e:	9307      	str	r3, [sp, #28]
 8007160:	4bc7      	ldr	r3, [pc, #796]	; (8007480 <__ieee754_pow+0x768>)
 8007162:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007166:	ed93 7b00 	vldr	d7, [r3]
 800716a:	4629      	mov	r1, r5
 800716c:	ec53 2b17 	vmov	r2, r3, d7
 8007170:	eeb0 9a47 	vmov.f32	s18, s14
 8007174:	eef0 9a67 	vmov.f32	s19, s15
 8007178:	4682      	mov	sl, r0
 800717a:	f7f9 f895 	bl	80002a8 <__aeabi_dsub>
 800717e:	4652      	mov	r2, sl
 8007180:	4606      	mov	r6, r0
 8007182:	460f      	mov	r7, r1
 8007184:	462b      	mov	r3, r5
 8007186:	ec51 0b19 	vmov	r0, r1, d9
 800718a:	f7f9 f88f 	bl	80002ac <__adddf3>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	2000      	movs	r0, #0
 8007194:	49bb      	ldr	r1, [pc, #748]	; (8007484 <__ieee754_pow+0x76c>)
 8007196:	f7f9 fb69 	bl	800086c <__aeabi_ddiv>
 800719a:	ec41 0b1a 	vmov	d10, r0, r1
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4630      	mov	r0, r6
 80071a4:	4639      	mov	r1, r7
 80071a6:	f7f9 fa37 	bl	8000618 <__aeabi_dmul>
 80071aa:	2300      	movs	r3, #0
 80071ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071b0:	9302      	str	r3, [sp, #8]
 80071b2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80071b6:	46ab      	mov	fp, r5
 80071b8:	106d      	asrs	r5, r5, #1
 80071ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80071be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80071c2:	ec41 0b18 	vmov	d8, r0, r1
 80071c6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80071ca:	2200      	movs	r2, #0
 80071cc:	4640      	mov	r0, r8
 80071ce:	4649      	mov	r1, r9
 80071d0:	4614      	mov	r4, r2
 80071d2:	461d      	mov	r5, r3
 80071d4:	f7f9 fa20 	bl	8000618 <__aeabi_dmul>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4630      	mov	r0, r6
 80071de:	4639      	mov	r1, r7
 80071e0:	f7f9 f862 	bl	80002a8 <__aeabi_dsub>
 80071e4:	ec53 2b19 	vmov	r2, r3, d9
 80071e8:	4606      	mov	r6, r0
 80071ea:	460f      	mov	r7, r1
 80071ec:	4620      	mov	r0, r4
 80071ee:	4629      	mov	r1, r5
 80071f0:	f7f9 f85a 	bl	80002a8 <__aeabi_dsub>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4650      	mov	r0, sl
 80071fa:	4659      	mov	r1, fp
 80071fc:	f7f9 f854 	bl	80002a8 <__aeabi_dsub>
 8007200:	4642      	mov	r2, r8
 8007202:	464b      	mov	r3, r9
 8007204:	f7f9 fa08 	bl	8000618 <__aeabi_dmul>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4630      	mov	r0, r6
 800720e:	4639      	mov	r1, r7
 8007210:	f7f9 f84a 	bl	80002a8 <__aeabi_dsub>
 8007214:	ec53 2b1a 	vmov	r2, r3, d10
 8007218:	f7f9 f9fe 	bl	8000618 <__aeabi_dmul>
 800721c:	ec53 2b18 	vmov	r2, r3, d8
 8007220:	ec41 0b19 	vmov	d9, r0, r1
 8007224:	ec51 0b18 	vmov	r0, r1, d8
 8007228:	f7f9 f9f6 	bl	8000618 <__aeabi_dmul>
 800722c:	a37c      	add	r3, pc, #496	; (adr r3, 8007420 <__ieee754_pow+0x708>)
 800722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007232:	4604      	mov	r4, r0
 8007234:	460d      	mov	r5, r1
 8007236:	f7f9 f9ef 	bl	8000618 <__aeabi_dmul>
 800723a:	a37b      	add	r3, pc, #492	; (adr r3, 8007428 <__ieee754_pow+0x710>)
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	f7f9 f834 	bl	80002ac <__adddf3>
 8007244:	4622      	mov	r2, r4
 8007246:	462b      	mov	r3, r5
 8007248:	f7f9 f9e6 	bl	8000618 <__aeabi_dmul>
 800724c:	a378      	add	r3, pc, #480	; (adr r3, 8007430 <__ieee754_pow+0x718>)
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	f7f9 f82b 	bl	80002ac <__adddf3>
 8007256:	4622      	mov	r2, r4
 8007258:	462b      	mov	r3, r5
 800725a:	f7f9 f9dd 	bl	8000618 <__aeabi_dmul>
 800725e:	a376      	add	r3, pc, #472	; (adr r3, 8007438 <__ieee754_pow+0x720>)
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	f7f9 f822 	bl	80002ac <__adddf3>
 8007268:	4622      	mov	r2, r4
 800726a:	462b      	mov	r3, r5
 800726c:	f7f9 f9d4 	bl	8000618 <__aeabi_dmul>
 8007270:	a373      	add	r3, pc, #460	; (adr r3, 8007440 <__ieee754_pow+0x728>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f7f9 f819 	bl	80002ac <__adddf3>
 800727a:	4622      	mov	r2, r4
 800727c:	462b      	mov	r3, r5
 800727e:	f7f9 f9cb 	bl	8000618 <__aeabi_dmul>
 8007282:	a371      	add	r3, pc, #452	; (adr r3, 8007448 <__ieee754_pow+0x730>)
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f7f9 f810 	bl	80002ac <__adddf3>
 800728c:	4622      	mov	r2, r4
 800728e:	4606      	mov	r6, r0
 8007290:	460f      	mov	r7, r1
 8007292:	462b      	mov	r3, r5
 8007294:	4620      	mov	r0, r4
 8007296:	4629      	mov	r1, r5
 8007298:	f7f9 f9be 	bl	8000618 <__aeabi_dmul>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4630      	mov	r0, r6
 80072a2:	4639      	mov	r1, r7
 80072a4:	f7f9 f9b8 	bl	8000618 <__aeabi_dmul>
 80072a8:	4642      	mov	r2, r8
 80072aa:	4604      	mov	r4, r0
 80072ac:	460d      	mov	r5, r1
 80072ae:	464b      	mov	r3, r9
 80072b0:	ec51 0b18 	vmov	r0, r1, d8
 80072b4:	f7f8 fffa 	bl	80002ac <__adddf3>
 80072b8:	ec53 2b19 	vmov	r2, r3, d9
 80072bc:	f7f9 f9ac 	bl	8000618 <__aeabi_dmul>
 80072c0:	4622      	mov	r2, r4
 80072c2:	462b      	mov	r3, r5
 80072c4:	f7f8 fff2 	bl	80002ac <__adddf3>
 80072c8:	4642      	mov	r2, r8
 80072ca:	4682      	mov	sl, r0
 80072cc:	468b      	mov	fp, r1
 80072ce:	464b      	mov	r3, r9
 80072d0:	4640      	mov	r0, r8
 80072d2:	4649      	mov	r1, r9
 80072d4:	f7f9 f9a0 	bl	8000618 <__aeabi_dmul>
 80072d8:	4b6b      	ldr	r3, [pc, #428]	; (8007488 <__ieee754_pow+0x770>)
 80072da:	2200      	movs	r2, #0
 80072dc:	4606      	mov	r6, r0
 80072de:	460f      	mov	r7, r1
 80072e0:	f7f8 ffe4 	bl	80002ac <__adddf3>
 80072e4:	4652      	mov	r2, sl
 80072e6:	465b      	mov	r3, fp
 80072e8:	f7f8 ffe0 	bl	80002ac <__adddf3>
 80072ec:	2000      	movs	r0, #0
 80072ee:	4604      	mov	r4, r0
 80072f0:	460d      	mov	r5, r1
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	4640      	mov	r0, r8
 80072f8:	4649      	mov	r1, r9
 80072fa:	f7f9 f98d 	bl	8000618 <__aeabi_dmul>
 80072fe:	4b62      	ldr	r3, [pc, #392]	; (8007488 <__ieee754_pow+0x770>)
 8007300:	4680      	mov	r8, r0
 8007302:	4689      	mov	r9, r1
 8007304:	2200      	movs	r2, #0
 8007306:	4620      	mov	r0, r4
 8007308:	4629      	mov	r1, r5
 800730a:	f7f8 ffcd 	bl	80002a8 <__aeabi_dsub>
 800730e:	4632      	mov	r2, r6
 8007310:	463b      	mov	r3, r7
 8007312:	f7f8 ffc9 	bl	80002a8 <__aeabi_dsub>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4650      	mov	r0, sl
 800731c:	4659      	mov	r1, fp
 800731e:	f7f8 ffc3 	bl	80002a8 <__aeabi_dsub>
 8007322:	ec53 2b18 	vmov	r2, r3, d8
 8007326:	f7f9 f977 	bl	8000618 <__aeabi_dmul>
 800732a:	4622      	mov	r2, r4
 800732c:	4606      	mov	r6, r0
 800732e:	460f      	mov	r7, r1
 8007330:	462b      	mov	r3, r5
 8007332:	ec51 0b19 	vmov	r0, r1, d9
 8007336:	f7f9 f96f 	bl	8000618 <__aeabi_dmul>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4630      	mov	r0, r6
 8007340:	4639      	mov	r1, r7
 8007342:	f7f8 ffb3 	bl	80002ac <__adddf3>
 8007346:	4606      	mov	r6, r0
 8007348:	460f      	mov	r7, r1
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	4640      	mov	r0, r8
 8007350:	4649      	mov	r1, r9
 8007352:	f7f8 ffab 	bl	80002ac <__adddf3>
 8007356:	a33e      	add	r3, pc, #248	; (adr r3, 8007450 <__ieee754_pow+0x738>)
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	2000      	movs	r0, #0
 800735e:	4604      	mov	r4, r0
 8007360:	460d      	mov	r5, r1
 8007362:	f7f9 f959 	bl	8000618 <__aeabi_dmul>
 8007366:	4642      	mov	r2, r8
 8007368:	ec41 0b18 	vmov	d8, r0, r1
 800736c:	464b      	mov	r3, r9
 800736e:	4620      	mov	r0, r4
 8007370:	4629      	mov	r1, r5
 8007372:	f7f8 ff99 	bl	80002a8 <__aeabi_dsub>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	4630      	mov	r0, r6
 800737c:	4639      	mov	r1, r7
 800737e:	f7f8 ff93 	bl	80002a8 <__aeabi_dsub>
 8007382:	a335      	add	r3, pc, #212	; (adr r3, 8007458 <__ieee754_pow+0x740>)
 8007384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007388:	f7f9 f946 	bl	8000618 <__aeabi_dmul>
 800738c:	a334      	add	r3, pc, #208	; (adr r3, 8007460 <__ieee754_pow+0x748>)
 800738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007392:	4606      	mov	r6, r0
 8007394:	460f      	mov	r7, r1
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f9 f93d 	bl	8000618 <__aeabi_dmul>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4630      	mov	r0, r6
 80073a4:	4639      	mov	r1, r7
 80073a6:	f7f8 ff81 	bl	80002ac <__adddf3>
 80073aa:	9a07      	ldr	r2, [sp, #28]
 80073ac:	4b37      	ldr	r3, [pc, #220]	; (800748c <__ieee754_pow+0x774>)
 80073ae:	4413      	add	r3, r2
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	f7f8 ff7a 	bl	80002ac <__adddf3>
 80073b8:	4682      	mov	sl, r0
 80073ba:	9805      	ldr	r0, [sp, #20]
 80073bc:	468b      	mov	fp, r1
 80073be:	f7f9 f8c1 	bl	8000544 <__aeabi_i2d>
 80073c2:	9a07      	ldr	r2, [sp, #28]
 80073c4:	4b32      	ldr	r3, [pc, #200]	; (8007490 <__ieee754_pow+0x778>)
 80073c6:	4413      	add	r3, r2
 80073c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073cc:	4606      	mov	r6, r0
 80073ce:	460f      	mov	r7, r1
 80073d0:	4652      	mov	r2, sl
 80073d2:	465b      	mov	r3, fp
 80073d4:	ec51 0b18 	vmov	r0, r1, d8
 80073d8:	f7f8 ff68 	bl	80002ac <__adddf3>
 80073dc:	4642      	mov	r2, r8
 80073de:	464b      	mov	r3, r9
 80073e0:	f7f8 ff64 	bl	80002ac <__adddf3>
 80073e4:	4632      	mov	r2, r6
 80073e6:	463b      	mov	r3, r7
 80073e8:	f7f8 ff60 	bl	80002ac <__adddf3>
 80073ec:	2000      	movs	r0, #0
 80073ee:	4632      	mov	r2, r6
 80073f0:	463b      	mov	r3, r7
 80073f2:	4604      	mov	r4, r0
 80073f4:	460d      	mov	r5, r1
 80073f6:	f7f8 ff57 	bl	80002a8 <__aeabi_dsub>
 80073fa:	4642      	mov	r2, r8
 80073fc:	464b      	mov	r3, r9
 80073fe:	f7f8 ff53 	bl	80002a8 <__aeabi_dsub>
 8007402:	ec53 2b18 	vmov	r2, r3, d8
 8007406:	f7f8 ff4f 	bl	80002a8 <__aeabi_dsub>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	4650      	mov	r0, sl
 8007410:	4659      	mov	r1, fp
 8007412:	e610      	b.n	8007036 <__ieee754_pow+0x31e>
 8007414:	2401      	movs	r4, #1
 8007416:	e6a1      	b.n	800715c <__ieee754_pow+0x444>
 8007418:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007468 <__ieee754_pow+0x750>
 800741c:	e617      	b.n	800704e <__ieee754_pow+0x336>
 800741e:	bf00      	nop
 8007420:	4a454eef 	.word	0x4a454eef
 8007424:	3fca7e28 	.word	0x3fca7e28
 8007428:	93c9db65 	.word	0x93c9db65
 800742c:	3fcd864a 	.word	0x3fcd864a
 8007430:	a91d4101 	.word	0xa91d4101
 8007434:	3fd17460 	.word	0x3fd17460
 8007438:	518f264d 	.word	0x518f264d
 800743c:	3fd55555 	.word	0x3fd55555
 8007440:	db6fabff 	.word	0xdb6fabff
 8007444:	3fdb6db6 	.word	0x3fdb6db6
 8007448:	33333303 	.word	0x33333303
 800744c:	3fe33333 	.word	0x3fe33333
 8007450:	e0000000 	.word	0xe0000000
 8007454:	3feec709 	.word	0x3feec709
 8007458:	dc3a03fd 	.word	0xdc3a03fd
 800745c:	3feec709 	.word	0x3feec709
 8007460:	145b01f5 	.word	0x145b01f5
 8007464:	be3e2fe0 	.word	0xbe3e2fe0
 8007468:	00000000 	.word	0x00000000
 800746c:	3ff00000 	.word	0x3ff00000
 8007470:	7ff00000 	.word	0x7ff00000
 8007474:	43400000 	.word	0x43400000
 8007478:	0003988e 	.word	0x0003988e
 800747c:	000bb679 	.word	0x000bb679
 8007480:	080083f0 	.word	0x080083f0
 8007484:	3ff00000 	.word	0x3ff00000
 8007488:	40080000 	.word	0x40080000
 800748c:	08008410 	.word	0x08008410
 8007490:	08008400 	.word	0x08008400
 8007494:	a3b5      	add	r3, pc, #724	; (adr r3, 800776c <__ieee754_pow+0xa54>)
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	4640      	mov	r0, r8
 800749c:	4649      	mov	r1, r9
 800749e:	f7f8 ff05 	bl	80002ac <__adddf3>
 80074a2:	4622      	mov	r2, r4
 80074a4:	ec41 0b1a 	vmov	d10, r0, r1
 80074a8:	462b      	mov	r3, r5
 80074aa:	4630      	mov	r0, r6
 80074ac:	4639      	mov	r1, r7
 80074ae:	f7f8 fefb 	bl	80002a8 <__aeabi_dsub>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	ec51 0b1a 	vmov	r0, r1, d10
 80074ba:	f7f9 fb3d 	bl	8000b38 <__aeabi_dcmpgt>
 80074be:	2800      	cmp	r0, #0
 80074c0:	f47f ae04 	bne.w	80070cc <__ieee754_pow+0x3b4>
 80074c4:	4aa4      	ldr	r2, [pc, #656]	; (8007758 <__ieee754_pow+0xa40>)
 80074c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074ca:	4293      	cmp	r3, r2
 80074cc:	f340 8108 	ble.w	80076e0 <__ieee754_pow+0x9c8>
 80074d0:	151b      	asrs	r3, r3, #20
 80074d2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80074d6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80074da:	fa4a f303 	asr.w	r3, sl, r3
 80074de:	445b      	add	r3, fp
 80074e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80074e4:	4e9d      	ldr	r6, [pc, #628]	; (800775c <__ieee754_pow+0xa44>)
 80074e6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80074ea:	4116      	asrs	r6, r2
 80074ec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80074f0:	2000      	movs	r0, #0
 80074f2:	ea23 0106 	bic.w	r1, r3, r6
 80074f6:	f1c2 0214 	rsb	r2, r2, #20
 80074fa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80074fe:	fa4a fa02 	asr.w	sl, sl, r2
 8007502:	f1bb 0f00 	cmp.w	fp, #0
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	4620      	mov	r0, r4
 800750c:	4629      	mov	r1, r5
 800750e:	bfb8      	it	lt
 8007510:	f1ca 0a00 	rsblt	sl, sl, #0
 8007514:	f7f8 fec8 	bl	80002a8 <__aeabi_dsub>
 8007518:	ec41 0b19 	vmov	d9, r0, r1
 800751c:	4642      	mov	r2, r8
 800751e:	464b      	mov	r3, r9
 8007520:	ec51 0b19 	vmov	r0, r1, d9
 8007524:	f7f8 fec2 	bl	80002ac <__adddf3>
 8007528:	a37b      	add	r3, pc, #492	; (adr r3, 8007718 <__ieee754_pow+0xa00>)
 800752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752e:	2000      	movs	r0, #0
 8007530:	4604      	mov	r4, r0
 8007532:	460d      	mov	r5, r1
 8007534:	f7f9 f870 	bl	8000618 <__aeabi_dmul>
 8007538:	ec53 2b19 	vmov	r2, r3, d9
 800753c:	4606      	mov	r6, r0
 800753e:	460f      	mov	r7, r1
 8007540:	4620      	mov	r0, r4
 8007542:	4629      	mov	r1, r5
 8007544:	f7f8 feb0 	bl	80002a8 <__aeabi_dsub>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4640      	mov	r0, r8
 800754e:	4649      	mov	r1, r9
 8007550:	f7f8 feaa 	bl	80002a8 <__aeabi_dsub>
 8007554:	a372      	add	r3, pc, #456	; (adr r3, 8007720 <__ieee754_pow+0xa08>)
 8007556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755a:	f7f9 f85d 	bl	8000618 <__aeabi_dmul>
 800755e:	a372      	add	r3, pc, #456	; (adr r3, 8007728 <__ieee754_pow+0xa10>)
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	4680      	mov	r8, r0
 8007566:	4689      	mov	r9, r1
 8007568:	4620      	mov	r0, r4
 800756a:	4629      	mov	r1, r5
 800756c:	f7f9 f854 	bl	8000618 <__aeabi_dmul>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4640      	mov	r0, r8
 8007576:	4649      	mov	r1, r9
 8007578:	f7f8 fe98 	bl	80002ac <__adddf3>
 800757c:	4604      	mov	r4, r0
 800757e:	460d      	mov	r5, r1
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	4630      	mov	r0, r6
 8007586:	4639      	mov	r1, r7
 8007588:	f7f8 fe90 	bl	80002ac <__adddf3>
 800758c:	4632      	mov	r2, r6
 800758e:	463b      	mov	r3, r7
 8007590:	4680      	mov	r8, r0
 8007592:	4689      	mov	r9, r1
 8007594:	f7f8 fe88 	bl	80002a8 <__aeabi_dsub>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	4620      	mov	r0, r4
 800759e:	4629      	mov	r1, r5
 80075a0:	f7f8 fe82 	bl	80002a8 <__aeabi_dsub>
 80075a4:	4642      	mov	r2, r8
 80075a6:	4606      	mov	r6, r0
 80075a8:	460f      	mov	r7, r1
 80075aa:	464b      	mov	r3, r9
 80075ac:	4640      	mov	r0, r8
 80075ae:	4649      	mov	r1, r9
 80075b0:	f7f9 f832 	bl	8000618 <__aeabi_dmul>
 80075b4:	a35e      	add	r3, pc, #376	; (adr r3, 8007730 <__ieee754_pow+0xa18>)
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	4604      	mov	r4, r0
 80075bc:	460d      	mov	r5, r1
 80075be:	f7f9 f82b 	bl	8000618 <__aeabi_dmul>
 80075c2:	a35d      	add	r3, pc, #372	; (adr r3, 8007738 <__ieee754_pow+0xa20>)
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	f7f8 fe6e 	bl	80002a8 <__aeabi_dsub>
 80075cc:	4622      	mov	r2, r4
 80075ce:	462b      	mov	r3, r5
 80075d0:	f7f9 f822 	bl	8000618 <__aeabi_dmul>
 80075d4:	a35a      	add	r3, pc, #360	; (adr r3, 8007740 <__ieee754_pow+0xa28>)
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	f7f8 fe67 	bl	80002ac <__adddf3>
 80075de:	4622      	mov	r2, r4
 80075e0:	462b      	mov	r3, r5
 80075e2:	f7f9 f819 	bl	8000618 <__aeabi_dmul>
 80075e6:	a358      	add	r3, pc, #352	; (adr r3, 8007748 <__ieee754_pow+0xa30>)
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	f7f8 fe5c 	bl	80002a8 <__aeabi_dsub>
 80075f0:	4622      	mov	r2, r4
 80075f2:	462b      	mov	r3, r5
 80075f4:	f7f9 f810 	bl	8000618 <__aeabi_dmul>
 80075f8:	a355      	add	r3, pc, #340	; (adr r3, 8007750 <__ieee754_pow+0xa38>)
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	f7f8 fe55 	bl	80002ac <__adddf3>
 8007602:	4622      	mov	r2, r4
 8007604:	462b      	mov	r3, r5
 8007606:	f7f9 f807 	bl	8000618 <__aeabi_dmul>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	4640      	mov	r0, r8
 8007610:	4649      	mov	r1, r9
 8007612:	f7f8 fe49 	bl	80002a8 <__aeabi_dsub>
 8007616:	4604      	mov	r4, r0
 8007618:	460d      	mov	r5, r1
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4640      	mov	r0, r8
 8007620:	4649      	mov	r1, r9
 8007622:	f7f8 fff9 	bl	8000618 <__aeabi_dmul>
 8007626:	2200      	movs	r2, #0
 8007628:	ec41 0b19 	vmov	d9, r0, r1
 800762c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007630:	4620      	mov	r0, r4
 8007632:	4629      	mov	r1, r5
 8007634:	f7f8 fe38 	bl	80002a8 <__aeabi_dsub>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	ec51 0b19 	vmov	r0, r1, d9
 8007640:	f7f9 f914 	bl	800086c <__aeabi_ddiv>
 8007644:	4632      	mov	r2, r6
 8007646:	4604      	mov	r4, r0
 8007648:	460d      	mov	r5, r1
 800764a:	463b      	mov	r3, r7
 800764c:	4640      	mov	r0, r8
 800764e:	4649      	mov	r1, r9
 8007650:	f7f8 ffe2 	bl	8000618 <__aeabi_dmul>
 8007654:	4632      	mov	r2, r6
 8007656:	463b      	mov	r3, r7
 8007658:	f7f8 fe28 	bl	80002ac <__adddf3>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4620      	mov	r0, r4
 8007662:	4629      	mov	r1, r5
 8007664:	f7f8 fe20 	bl	80002a8 <__aeabi_dsub>
 8007668:	4642      	mov	r2, r8
 800766a:	464b      	mov	r3, r9
 800766c:	f7f8 fe1c 	bl	80002a8 <__aeabi_dsub>
 8007670:	460b      	mov	r3, r1
 8007672:	4602      	mov	r2, r0
 8007674:	493a      	ldr	r1, [pc, #232]	; (8007760 <__ieee754_pow+0xa48>)
 8007676:	2000      	movs	r0, #0
 8007678:	f7f8 fe16 	bl	80002a8 <__aeabi_dsub>
 800767c:	ec41 0b10 	vmov	d0, r0, r1
 8007680:	ee10 3a90 	vmov	r3, s1
 8007684:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800768c:	da2b      	bge.n	80076e6 <__ieee754_pow+0x9ce>
 800768e:	4650      	mov	r0, sl
 8007690:	f000 f966 	bl	8007960 <scalbn>
 8007694:	ec51 0b10 	vmov	r0, r1, d0
 8007698:	ec53 2b18 	vmov	r2, r3, d8
 800769c:	f7ff bbed 	b.w	8006e7a <__ieee754_pow+0x162>
 80076a0:	4b30      	ldr	r3, [pc, #192]	; (8007764 <__ieee754_pow+0xa4c>)
 80076a2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80076a6:	429e      	cmp	r6, r3
 80076a8:	f77f af0c 	ble.w	80074c4 <__ieee754_pow+0x7ac>
 80076ac:	4b2e      	ldr	r3, [pc, #184]	; (8007768 <__ieee754_pow+0xa50>)
 80076ae:	440b      	add	r3, r1
 80076b0:	4303      	orrs	r3, r0
 80076b2:	d009      	beq.n	80076c8 <__ieee754_pow+0x9b0>
 80076b4:	ec51 0b18 	vmov	r0, r1, d8
 80076b8:	2200      	movs	r2, #0
 80076ba:	2300      	movs	r3, #0
 80076bc:	f7f9 fa1e 	bl	8000afc <__aeabi_dcmplt>
 80076c0:	3800      	subs	r0, #0
 80076c2:	bf18      	it	ne
 80076c4:	2001      	movne	r0, #1
 80076c6:	e447      	b.n	8006f58 <__ieee754_pow+0x240>
 80076c8:	4622      	mov	r2, r4
 80076ca:	462b      	mov	r3, r5
 80076cc:	f7f8 fdec 	bl	80002a8 <__aeabi_dsub>
 80076d0:	4642      	mov	r2, r8
 80076d2:	464b      	mov	r3, r9
 80076d4:	f7f9 fa26 	bl	8000b24 <__aeabi_dcmpge>
 80076d8:	2800      	cmp	r0, #0
 80076da:	f43f aef3 	beq.w	80074c4 <__ieee754_pow+0x7ac>
 80076de:	e7e9      	b.n	80076b4 <__ieee754_pow+0x99c>
 80076e0:	f04f 0a00 	mov.w	sl, #0
 80076e4:	e71a      	b.n	800751c <__ieee754_pow+0x804>
 80076e6:	ec51 0b10 	vmov	r0, r1, d0
 80076ea:	4619      	mov	r1, r3
 80076ec:	e7d4      	b.n	8007698 <__ieee754_pow+0x980>
 80076ee:	491c      	ldr	r1, [pc, #112]	; (8007760 <__ieee754_pow+0xa48>)
 80076f0:	2000      	movs	r0, #0
 80076f2:	f7ff bb30 	b.w	8006d56 <__ieee754_pow+0x3e>
 80076f6:	2000      	movs	r0, #0
 80076f8:	2100      	movs	r1, #0
 80076fa:	f7ff bb2c 	b.w	8006d56 <__ieee754_pow+0x3e>
 80076fe:	4630      	mov	r0, r6
 8007700:	4639      	mov	r1, r7
 8007702:	f7ff bb28 	b.w	8006d56 <__ieee754_pow+0x3e>
 8007706:	9204      	str	r2, [sp, #16]
 8007708:	f7ff bb7a 	b.w	8006e00 <__ieee754_pow+0xe8>
 800770c:	2300      	movs	r3, #0
 800770e:	f7ff bb64 	b.w	8006dda <__ieee754_pow+0xc2>
 8007712:	bf00      	nop
 8007714:	f3af 8000 	nop.w
 8007718:	00000000 	.word	0x00000000
 800771c:	3fe62e43 	.word	0x3fe62e43
 8007720:	fefa39ef 	.word	0xfefa39ef
 8007724:	3fe62e42 	.word	0x3fe62e42
 8007728:	0ca86c39 	.word	0x0ca86c39
 800772c:	be205c61 	.word	0xbe205c61
 8007730:	72bea4d0 	.word	0x72bea4d0
 8007734:	3e663769 	.word	0x3e663769
 8007738:	c5d26bf1 	.word	0xc5d26bf1
 800773c:	3ebbbd41 	.word	0x3ebbbd41
 8007740:	af25de2c 	.word	0xaf25de2c
 8007744:	3f11566a 	.word	0x3f11566a
 8007748:	16bebd93 	.word	0x16bebd93
 800774c:	3f66c16c 	.word	0x3f66c16c
 8007750:	5555553e 	.word	0x5555553e
 8007754:	3fc55555 	.word	0x3fc55555
 8007758:	3fe00000 	.word	0x3fe00000
 800775c:	000fffff 	.word	0x000fffff
 8007760:	3ff00000 	.word	0x3ff00000
 8007764:	4090cbff 	.word	0x4090cbff
 8007768:	3f6f3400 	.word	0x3f6f3400
 800776c:	652b82fe 	.word	0x652b82fe
 8007770:	3c971547 	.word	0x3c971547

08007774 <__ieee754_sqrt>:
 8007774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007778:	ec55 4b10 	vmov	r4, r5, d0
 800777c:	4e55      	ldr	r6, [pc, #340]	; (80078d4 <__ieee754_sqrt+0x160>)
 800777e:	43ae      	bics	r6, r5
 8007780:	ee10 0a10 	vmov	r0, s0
 8007784:	ee10 3a10 	vmov	r3, s0
 8007788:	462a      	mov	r2, r5
 800778a:	4629      	mov	r1, r5
 800778c:	d110      	bne.n	80077b0 <__ieee754_sqrt+0x3c>
 800778e:	ee10 2a10 	vmov	r2, s0
 8007792:	462b      	mov	r3, r5
 8007794:	f7f8 ff40 	bl	8000618 <__aeabi_dmul>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4620      	mov	r0, r4
 800779e:	4629      	mov	r1, r5
 80077a0:	f7f8 fd84 	bl	80002ac <__adddf3>
 80077a4:	4604      	mov	r4, r0
 80077a6:	460d      	mov	r5, r1
 80077a8:	ec45 4b10 	vmov	d0, r4, r5
 80077ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077b0:	2d00      	cmp	r5, #0
 80077b2:	dc10      	bgt.n	80077d6 <__ieee754_sqrt+0x62>
 80077b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80077b8:	4330      	orrs	r0, r6
 80077ba:	d0f5      	beq.n	80077a8 <__ieee754_sqrt+0x34>
 80077bc:	b15d      	cbz	r5, 80077d6 <__ieee754_sqrt+0x62>
 80077be:	ee10 2a10 	vmov	r2, s0
 80077c2:	462b      	mov	r3, r5
 80077c4:	ee10 0a10 	vmov	r0, s0
 80077c8:	f7f8 fd6e 	bl	80002a8 <__aeabi_dsub>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	f7f9 f84c 	bl	800086c <__aeabi_ddiv>
 80077d4:	e7e6      	b.n	80077a4 <__ieee754_sqrt+0x30>
 80077d6:	1512      	asrs	r2, r2, #20
 80077d8:	d074      	beq.n	80078c4 <__ieee754_sqrt+0x150>
 80077da:	07d4      	lsls	r4, r2, #31
 80077dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80077e0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80077e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80077e8:	bf5e      	ittt	pl
 80077ea:	0fda      	lsrpl	r2, r3, #31
 80077ec:	005b      	lslpl	r3, r3, #1
 80077ee:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80077f2:	2400      	movs	r4, #0
 80077f4:	0fda      	lsrs	r2, r3, #31
 80077f6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80077fa:	107f      	asrs	r7, r7, #1
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	2516      	movs	r5, #22
 8007800:	4620      	mov	r0, r4
 8007802:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007806:	1886      	adds	r6, r0, r2
 8007808:	428e      	cmp	r6, r1
 800780a:	bfde      	ittt	le
 800780c:	1b89      	suble	r1, r1, r6
 800780e:	18b0      	addle	r0, r6, r2
 8007810:	18a4      	addle	r4, r4, r2
 8007812:	0049      	lsls	r1, r1, #1
 8007814:	3d01      	subs	r5, #1
 8007816:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800781a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800781e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007822:	d1f0      	bne.n	8007806 <__ieee754_sqrt+0x92>
 8007824:	462a      	mov	r2, r5
 8007826:	f04f 0e20 	mov.w	lr, #32
 800782a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800782e:	4281      	cmp	r1, r0
 8007830:	eb06 0c05 	add.w	ip, r6, r5
 8007834:	dc02      	bgt.n	800783c <__ieee754_sqrt+0xc8>
 8007836:	d113      	bne.n	8007860 <__ieee754_sqrt+0xec>
 8007838:	459c      	cmp	ip, r3
 800783a:	d811      	bhi.n	8007860 <__ieee754_sqrt+0xec>
 800783c:	f1bc 0f00 	cmp.w	ip, #0
 8007840:	eb0c 0506 	add.w	r5, ip, r6
 8007844:	da43      	bge.n	80078ce <__ieee754_sqrt+0x15a>
 8007846:	2d00      	cmp	r5, #0
 8007848:	db41      	blt.n	80078ce <__ieee754_sqrt+0x15a>
 800784a:	f100 0801 	add.w	r8, r0, #1
 800784e:	1a09      	subs	r1, r1, r0
 8007850:	459c      	cmp	ip, r3
 8007852:	bf88      	it	hi
 8007854:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007858:	eba3 030c 	sub.w	r3, r3, ip
 800785c:	4432      	add	r2, r6
 800785e:	4640      	mov	r0, r8
 8007860:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007864:	f1be 0e01 	subs.w	lr, lr, #1
 8007868:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800786c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007870:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007874:	d1db      	bne.n	800782e <__ieee754_sqrt+0xba>
 8007876:	430b      	orrs	r3, r1
 8007878:	d006      	beq.n	8007888 <__ieee754_sqrt+0x114>
 800787a:	1c50      	adds	r0, r2, #1
 800787c:	bf13      	iteet	ne
 800787e:	3201      	addne	r2, #1
 8007880:	3401      	addeq	r4, #1
 8007882:	4672      	moveq	r2, lr
 8007884:	f022 0201 	bicne.w	r2, r2, #1
 8007888:	1063      	asrs	r3, r4, #1
 800788a:	0852      	lsrs	r2, r2, #1
 800788c:	07e1      	lsls	r1, r4, #31
 800788e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007892:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007896:	bf48      	it	mi
 8007898:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800789c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80078a0:	4614      	mov	r4, r2
 80078a2:	e781      	b.n	80077a8 <__ieee754_sqrt+0x34>
 80078a4:	0ad9      	lsrs	r1, r3, #11
 80078a6:	3815      	subs	r0, #21
 80078a8:	055b      	lsls	r3, r3, #21
 80078aa:	2900      	cmp	r1, #0
 80078ac:	d0fa      	beq.n	80078a4 <__ieee754_sqrt+0x130>
 80078ae:	02cd      	lsls	r5, r1, #11
 80078b0:	d50a      	bpl.n	80078c8 <__ieee754_sqrt+0x154>
 80078b2:	f1c2 0420 	rsb	r4, r2, #32
 80078b6:	fa23 f404 	lsr.w	r4, r3, r4
 80078ba:	1e55      	subs	r5, r2, #1
 80078bc:	4093      	lsls	r3, r2
 80078be:	4321      	orrs	r1, r4
 80078c0:	1b42      	subs	r2, r0, r5
 80078c2:	e78a      	b.n	80077da <__ieee754_sqrt+0x66>
 80078c4:	4610      	mov	r0, r2
 80078c6:	e7f0      	b.n	80078aa <__ieee754_sqrt+0x136>
 80078c8:	0049      	lsls	r1, r1, #1
 80078ca:	3201      	adds	r2, #1
 80078cc:	e7ef      	b.n	80078ae <__ieee754_sqrt+0x13a>
 80078ce:	4680      	mov	r8, r0
 80078d0:	e7bd      	b.n	800784e <__ieee754_sqrt+0xda>
 80078d2:	bf00      	nop
 80078d4:	7ff00000 	.word	0x7ff00000

080078d8 <with_errno>:
 80078d8:	b570      	push	{r4, r5, r6, lr}
 80078da:	4604      	mov	r4, r0
 80078dc:	460d      	mov	r5, r1
 80078de:	4616      	mov	r6, r2
 80078e0:	f000 f8c4 	bl	8007a6c <__errno>
 80078e4:	4629      	mov	r1, r5
 80078e6:	6006      	str	r6, [r0, #0]
 80078e8:	4620      	mov	r0, r4
 80078ea:	bd70      	pop	{r4, r5, r6, pc}

080078ec <xflow>:
 80078ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078ee:	4614      	mov	r4, r2
 80078f0:	461d      	mov	r5, r3
 80078f2:	b108      	cbz	r0, 80078f8 <xflow+0xc>
 80078f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80078f8:	e9cd 2300 	strd	r2, r3, [sp]
 80078fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007900:	4620      	mov	r0, r4
 8007902:	4629      	mov	r1, r5
 8007904:	f7f8 fe88 	bl	8000618 <__aeabi_dmul>
 8007908:	2222      	movs	r2, #34	; 0x22
 800790a:	b003      	add	sp, #12
 800790c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007910:	f7ff bfe2 	b.w	80078d8 <with_errno>

08007914 <__math_uflow>:
 8007914:	b508      	push	{r3, lr}
 8007916:	2200      	movs	r2, #0
 8007918:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800791c:	f7ff ffe6 	bl	80078ec <xflow>
 8007920:	ec41 0b10 	vmov	d0, r0, r1
 8007924:	bd08      	pop	{r3, pc}

08007926 <__math_oflow>:
 8007926:	b508      	push	{r3, lr}
 8007928:	2200      	movs	r2, #0
 800792a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800792e:	f7ff ffdd 	bl	80078ec <xflow>
 8007932:	ec41 0b10 	vmov	d0, r0, r1
 8007936:	bd08      	pop	{r3, pc}

08007938 <fabs>:
 8007938:	ec51 0b10 	vmov	r0, r1, d0
 800793c:	ee10 2a10 	vmov	r2, s0
 8007940:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007944:	ec43 2b10 	vmov	d0, r2, r3
 8007948:	4770      	bx	lr

0800794a <finite>:
 800794a:	b082      	sub	sp, #8
 800794c:	ed8d 0b00 	vstr	d0, [sp]
 8007950:	9801      	ldr	r0, [sp, #4]
 8007952:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007956:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800795a:	0fc0      	lsrs	r0, r0, #31
 800795c:	b002      	add	sp, #8
 800795e:	4770      	bx	lr

08007960 <scalbn>:
 8007960:	b570      	push	{r4, r5, r6, lr}
 8007962:	ec55 4b10 	vmov	r4, r5, d0
 8007966:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800796a:	4606      	mov	r6, r0
 800796c:	462b      	mov	r3, r5
 800796e:	b99a      	cbnz	r2, 8007998 <scalbn+0x38>
 8007970:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007974:	4323      	orrs	r3, r4
 8007976:	d036      	beq.n	80079e6 <scalbn+0x86>
 8007978:	4b39      	ldr	r3, [pc, #228]	; (8007a60 <scalbn+0x100>)
 800797a:	4629      	mov	r1, r5
 800797c:	ee10 0a10 	vmov	r0, s0
 8007980:	2200      	movs	r2, #0
 8007982:	f7f8 fe49 	bl	8000618 <__aeabi_dmul>
 8007986:	4b37      	ldr	r3, [pc, #220]	; (8007a64 <scalbn+0x104>)
 8007988:	429e      	cmp	r6, r3
 800798a:	4604      	mov	r4, r0
 800798c:	460d      	mov	r5, r1
 800798e:	da10      	bge.n	80079b2 <scalbn+0x52>
 8007990:	a32b      	add	r3, pc, #172	; (adr r3, 8007a40 <scalbn+0xe0>)
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	e03a      	b.n	8007a0e <scalbn+0xae>
 8007998:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800799c:	428a      	cmp	r2, r1
 800799e:	d10c      	bne.n	80079ba <scalbn+0x5a>
 80079a0:	ee10 2a10 	vmov	r2, s0
 80079a4:	4620      	mov	r0, r4
 80079a6:	4629      	mov	r1, r5
 80079a8:	f7f8 fc80 	bl	80002ac <__adddf3>
 80079ac:	4604      	mov	r4, r0
 80079ae:	460d      	mov	r5, r1
 80079b0:	e019      	b.n	80079e6 <scalbn+0x86>
 80079b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80079b6:	460b      	mov	r3, r1
 80079b8:	3a36      	subs	r2, #54	; 0x36
 80079ba:	4432      	add	r2, r6
 80079bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80079c0:	428a      	cmp	r2, r1
 80079c2:	dd08      	ble.n	80079d6 <scalbn+0x76>
 80079c4:	2d00      	cmp	r5, #0
 80079c6:	a120      	add	r1, pc, #128	; (adr r1, 8007a48 <scalbn+0xe8>)
 80079c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079cc:	da1c      	bge.n	8007a08 <scalbn+0xa8>
 80079ce:	a120      	add	r1, pc, #128	; (adr r1, 8007a50 <scalbn+0xf0>)
 80079d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079d4:	e018      	b.n	8007a08 <scalbn+0xa8>
 80079d6:	2a00      	cmp	r2, #0
 80079d8:	dd08      	ble.n	80079ec <scalbn+0x8c>
 80079da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80079de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80079e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80079e6:	ec45 4b10 	vmov	d0, r4, r5
 80079ea:	bd70      	pop	{r4, r5, r6, pc}
 80079ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80079f0:	da19      	bge.n	8007a26 <scalbn+0xc6>
 80079f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80079f6:	429e      	cmp	r6, r3
 80079f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80079fc:	dd0a      	ble.n	8007a14 <scalbn+0xb4>
 80079fe:	a112      	add	r1, pc, #72	; (adr r1, 8007a48 <scalbn+0xe8>)
 8007a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e2      	bne.n	80079ce <scalbn+0x6e>
 8007a08:	a30f      	add	r3, pc, #60	; (adr r3, 8007a48 <scalbn+0xe8>)
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	f7f8 fe03 	bl	8000618 <__aeabi_dmul>
 8007a12:	e7cb      	b.n	80079ac <scalbn+0x4c>
 8007a14:	a10a      	add	r1, pc, #40	; (adr r1, 8007a40 <scalbn+0xe0>)
 8007a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0b8      	beq.n	8007990 <scalbn+0x30>
 8007a1e:	a10e      	add	r1, pc, #56	; (adr r1, 8007a58 <scalbn+0xf8>)
 8007a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a24:	e7b4      	b.n	8007990 <scalbn+0x30>
 8007a26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a2a:	3236      	adds	r2, #54	; 0x36
 8007a2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007a34:	4620      	mov	r0, r4
 8007a36:	4b0c      	ldr	r3, [pc, #48]	; (8007a68 <scalbn+0x108>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	e7e8      	b.n	8007a0e <scalbn+0xae>
 8007a3c:	f3af 8000 	nop.w
 8007a40:	c2f8f359 	.word	0xc2f8f359
 8007a44:	01a56e1f 	.word	0x01a56e1f
 8007a48:	8800759c 	.word	0x8800759c
 8007a4c:	7e37e43c 	.word	0x7e37e43c
 8007a50:	8800759c 	.word	0x8800759c
 8007a54:	fe37e43c 	.word	0xfe37e43c
 8007a58:	c2f8f359 	.word	0xc2f8f359
 8007a5c:	81a56e1f 	.word	0x81a56e1f
 8007a60:	43500000 	.word	0x43500000
 8007a64:	ffff3cb0 	.word	0xffff3cb0
 8007a68:	3c900000 	.word	0x3c900000

08007a6c <__errno>:
 8007a6c:	4b01      	ldr	r3, [pc, #4]	; (8007a74 <__errno+0x8>)
 8007a6e:	6818      	ldr	r0, [r3, #0]
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	2000000c 	.word	0x2000000c

08007a78 <__libc_init_array>:
 8007a78:	b570      	push	{r4, r5, r6, lr}
 8007a7a:	4d0d      	ldr	r5, [pc, #52]	; (8007ab0 <__libc_init_array+0x38>)
 8007a7c:	4c0d      	ldr	r4, [pc, #52]	; (8007ab4 <__libc_init_array+0x3c>)
 8007a7e:	1b64      	subs	r4, r4, r5
 8007a80:	10a4      	asrs	r4, r4, #2
 8007a82:	2600      	movs	r6, #0
 8007a84:	42a6      	cmp	r6, r4
 8007a86:	d109      	bne.n	8007a9c <__libc_init_array+0x24>
 8007a88:	4d0b      	ldr	r5, [pc, #44]	; (8007ab8 <__libc_init_array+0x40>)
 8007a8a:	4c0c      	ldr	r4, [pc, #48]	; (8007abc <__libc_init_array+0x44>)
 8007a8c:	f000 fc8e 	bl	80083ac <_init>
 8007a90:	1b64      	subs	r4, r4, r5
 8007a92:	10a4      	asrs	r4, r4, #2
 8007a94:	2600      	movs	r6, #0
 8007a96:	42a6      	cmp	r6, r4
 8007a98:	d105      	bne.n	8007aa6 <__libc_init_array+0x2e>
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
 8007a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa0:	4798      	blx	r3
 8007aa2:	3601      	adds	r6, #1
 8007aa4:	e7ee      	b.n	8007a84 <__libc_init_array+0xc>
 8007aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aaa:	4798      	blx	r3
 8007aac:	3601      	adds	r6, #1
 8007aae:	e7f2      	b.n	8007a96 <__libc_init_array+0x1e>
 8007ab0:	0800845c 	.word	0x0800845c
 8007ab4:	0800845c 	.word	0x0800845c
 8007ab8:	0800845c 	.word	0x0800845c
 8007abc:	08008464 	.word	0x08008464

08007ac0 <memset>:
 8007ac0:	4402      	add	r2, r0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d100      	bne.n	8007aca <memset+0xa>
 8007ac8:	4770      	bx	lr
 8007aca:	f803 1b01 	strb.w	r1, [r3], #1
 8007ace:	e7f9      	b.n	8007ac4 <memset+0x4>

08007ad0 <siprintf>:
 8007ad0:	b40e      	push	{r1, r2, r3}
 8007ad2:	b500      	push	{lr}
 8007ad4:	b09c      	sub	sp, #112	; 0x70
 8007ad6:	ab1d      	add	r3, sp, #116	; 0x74
 8007ad8:	9002      	str	r0, [sp, #8]
 8007ada:	9006      	str	r0, [sp, #24]
 8007adc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ae0:	4809      	ldr	r0, [pc, #36]	; (8007b08 <siprintf+0x38>)
 8007ae2:	9107      	str	r1, [sp, #28]
 8007ae4:	9104      	str	r1, [sp, #16]
 8007ae6:	4909      	ldr	r1, [pc, #36]	; (8007b0c <siprintf+0x3c>)
 8007ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aec:	9105      	str	r1, [sp, #20]
 8007aee:	6800      	ldr	r0, [r0, #0]
 8007af0:	9301      	str	r3, [sp, #4]
 8007af2:	a902      	add	r1, sp, #8
 8007af4:	f000 f868 	bl	8007bc8 <_svfiprintf_r>
 8007af8:	9b02      	ldr	r3, [sp, #8]
 8007afa:	2200      	movs	r2, #0
 8007afc:	701a      	strb	r2, [r3, #0]
 8007afe:	b01c      	add	sp, #112	; 0x70
 8007b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b04:	b003      	add	sp, #12
 8007b06:	4770      	bx	lr
 8007b08:	2000000c 	.word	0x2000000c
 8007b0c:	ffff0208 	.word	0xffff0208

08007b10 <__ssputs_r>:
 8007b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b14:	688e      	ldr	r6, [r1, #8]
 8007b16:	429e      	cmp	r6, r3
 8007b18:	4682      	mov	sl, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	4690      	mov	r8, r2
 8007b1e:	461f      	mov	r7, r3
 8007b20:	d838      	bhi.n	8007b94 <__ssputs_r+0x84>
 8007b22:	898a      	ldrh	r2, [r1, #12]
 8007b24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b28:	d032      	beq.n	8007b90 <__ssputs_r+0x80>
 8007b2a:	6825      	ldr	r5, [r4, #0]
 8007b2c:	6909      	ldr	r1, [r1, #16]
 8007b2e:	eba5 0901 	sub.w	r9, r5, r1
 8007b32:	6965      	ldr	r5, [r4, #20]
 8007b34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	444b      	add	r3, r9
 8007b40:	106d      	asrs	r5, r5, #1
 8007b42:	429d      	cmp	r5, r3
 8007b44:	bf38      	it	cc
 8007b46:	461d      	movcc	r5, r3
 8007b48:	0553      	lsls	r3, r2, #21
 8007b4a:	d531      	bpl.n	8007bb0 <__ssputs_r+0xa0>
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	f000 fb63 	bl	8008218 <_malloc_r>
 8007b52:	4606      	mov	r6, r0
 8007b54:	b950      	cbnz	r0, 8007b6c <__ssputs_r+0x5c>
 8007b56:	230c      	movs	r3, #12
 8007b58:	f8ca 3000 	str.w	r3, [sl]
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b62:	81a3      	strh	r3, [r4, #12]
 8007b64:	f04f 30ff 	mov.w	r0, #4294967295
 8007b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b6c:	6921      	ldr	r1, [r4, #16]
 8007b6e:	464a      	mov	r2, r9
 8007b70:	f000 fabe 	bl	80080f0 <memcpy>
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7e:	81a3      	strh	r3, [r4, #12]
 8007b80:	6126      	str	r6, [r4, #16]
 8007b82:	6165      	str	r5, [r4, #20]
 8007b84:	444e      	add	r6, r9
 8007b86:	eba5 0509 	sub.w	r5, r5, r9
 8007b8a:	6026      	str	r6, [r4, #0]
 8007b8c:	60a5      	str	r5, [r4, #8]
 8007b8e:	463e      	mov	r6, r7
 8007b90:	42be      	cmp	r6, r7
 8007b92:	d900      	bls.n	8007b96 <__ssputs_r+0x86>
 8007b94:	463e      	mov	r6, r7
 8007b96:	6820      	ldr	r0, [r4, #0]
 8007b98:	4632      	mov	r2, r6
 8007b9a:	4641      	mov	r1, r8
 8007b9c:	f000 fab6 	bl	800810c <memmove>
 8007ba0:	68a3      	ldr	r3, [r4, #8]
 8007ba2:	1b9b      	subs	r3, r3, r6
 8007ba4:	60a3      	str	r3, [r4, #8]
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	4433      	add	r3, r6
 8007baa:	6023      	str	r3, [r4, #0]
 8007bac:	2000      	movs	r0, #0
 8007bae:	e7db      	b.n	8007b68 <__ssputs_r+0x58>
 8007bb0:	462a      	mov	r2, r5
 8007bb2:	f000 fba5 	bl	8008300 <_realloc_r>
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d1e1      	bne.n	8007b80 <__ssputs_r+0x70>
 8007bbc:	6921      	ldr	r1, [r4, #16]
 8007bbe:	4650      	mov	r0, sl
 8007bc0:	f000 fabe 	bl	8008140 <_free_r>
 8007bc4:	e7c7      	b.n	8007b56 <__ssputs_r+0x46>
	...

08007bc8 <_svfiprintf_r>:
 8007bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bcc:	4698      	mov	r8, r3
 8007bce:	898b      	ldrh	r3, [r1, #12]
 8007bd0:	061b      	lsls	r3, r3, #24
 8007bd2:	b09d      	sub	sp, #116	; 0x74
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	460d      	mov	r5, r1
 8007bd8:	4614      	mov	r4, r2
 8007bda:	d50e      	bpl.n	8007bfa <_svfiprintf_r+0x32>
 8007bdc:	690b      	ldr	r3, [r1, #16]
 8007bde:	b963      	cbnz	r3, 8007bfa <_svfiprintf_r+0x32>
 8007be0:	2140      	movs	r1, #64	; 0x40
 8007be2:	f000 fb19 	bl	8008218 <_malloc_r>
 8007be6:	6028      	str	r0, [r5, #0]
 8007be8:	6128      	str	r0, [r5, #16]
 8007bea:	b920      	cbnz	r0, 8007bf6 <_svfiprintf_r+0x2e>
 8007bec:	230c      	movs	r3, #12
 8007bee:	603b      	str	r3, [r7, #0]
 8007bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf4:	e0d1      	b.n	8007d9a <_svfiprintf_r+0x1d2>
 8007bf6:	2340      	movs	r3, #64	; 0x40
 8007bf8:	616b      	str	r3, [r5, #20]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8007bfe:	2320      	movs	r3, #32
 8007c00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c04:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c08:	2330      	movs	r3, #48	; 0x30
 8007c0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007db4 <_svfiprintf_r+0x1ec>
 8007c0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c12:	f04f 0901 	mov.w	r9, #1
 8007c16:	4623      	mov	r3, r4
 8007c18:	469a      	mov	sl, r3
 8007c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c1e:	b10a      	cbz	r2, 8007c24 <_svfiprintf_r+0x5c>
 8007c20:	2a25      	cmp	r2, #37	; 0x25
 8007c22:	d1f9      	bne.n	8007c18 <_svfiprintf_r+0x50>
 8007c24:	ebba 0b04 	subs.w	fp, sl, r4
 8007c28:	d00b      	beq.n	8007c42 <_svfiprintf_r+0x7a>
 8007c2a:	465b      	mov	r3, fp
 8007c2c:	4622      	mov	r2, r4
 8007c2e:	4629      	mov	r1, r5
 8007c30:	4638      	mov	r0, r7
 8007c32:	f7ff ff6d 	bl	8007b10 <__ssputs_r>
 8007c36:	3001      	adds	r0, #1
 8007c38:	f000 80aa 	beq.w	8007d90 <_svfiprintf_r+0x1c8>
 8007c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c3e:	445a      	add	r2, fp
 8007c40:	9209      	str	r2, [sp, #36]	; 0x24
 8007c42:	f89a 3000 	ldrb.w	r3, [sl]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 80a2 	beq.w	8007d90 <_svfiprintf_r+0x1c8>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c56:	f10a 0a01 	add.w	sl, sl, #1
 8007c5a:	9304      	str	r3, [sp, #16]
 8007c5c:	9307      	str	r3, [sp, #28]
 8007c5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c62:	931a      	str	r3, [sp, #104]	; 0x68
 8007c64:	4654      	mov	r4, sl
 8007c66:	2205      	movs	r2, #5
 8007c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c6c:	4851      	ldr	r0, [pc, #324]	; (8007db4 <_svfiprintf_r+0x1ec>)
 8007c6e:	f7f8 fac7 	bl	8000200 <memchr>
 8007c72:	9a04      	ldr	r2, [sp, #16]
 8007c74:	b9d8      	cbnz	r0, 8007cae <_svfiprintf_r+0xe6>
 8007c76:	06d0      	lsls	r0, r2, #27
 8007c78:	bf44      	itt	mi
 8007c7a:	2320      	movmi	r3, #32
 8007c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c80:	0711      	lsls	r1, r2, #28
 8007c82:	bf44      	itt	mi
 8007c84:	232b      	movmi	r3, #43	; 0x2b
 8007c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c90:	d015      	beq.n	8007cbe <_svfiprintf_r+0xf6>
 8007c92:	9a07      	ldr	r2, [sp, #28]
 8007c94:	4654      	mov	r4, sl
 8007c96:	2000      	movs	r0, #0
 8007c98:	f04f 0c0a 	mov.w	ip, #10
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ca2:	3b30      	subs	r3, #48	; 0x30
 8007ca4:	2b09      	cmp	r3, #9
 8007ca6:	d94e      	bls.n	8007d46 <_svfiprintf_r+0x17e>
 8007ca8:	b1b0      	cbz	r0, 8007cd8 <_svfiprintf_r+0x110>
 8007caa:	9207      	str	r2, [sp, #28]
 8007cac:	e014      	b.n	8007cd8 <_svfiprintf_r+0x110>
 8007cae:	eba0 0308 	sub.w	r3, r0, r8
 8007cb2:	fa09 f303 	lsl.w	r3, r9, r3
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	9304      	str	r3, [sp, #16]
 8007cba:	46a2      	mov	sl, r4
 8007cbc:	e7d2      	b.n	8007c64 <_svfiprintf_r+0x9c>
 8007cbe:	9b03      	ldr	r3, [sp, #12]
 8007cc0:	1d19      	adds	r1, r3, #4
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	9103      	str	r1, [sp, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	bfbb      	ittet	lt
 8007cca:	425b      	neglt	r3, r3
 8007ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8007cd0:	9307      	strge	r3, [sp, #28]
 8007cd2:	9307      	strlt	r3, [sp, #28]
 8007cd4:	bfb8      	it	lt
 8007cd6:	9204      	strlt	r2, [sp, #16]
 8007cd8:	7823      	ldrb	r3, [r4, #0]
 8007cda:	2b2e      	cmp	r3, #46	; 0x2e
 8007cdc:	d10c      	bne.n	8007cf8 <_svfiprintf_r+0x130>
 8007cde:	7863      	ldrb	r3, [r4, #1]
 8007ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ce2:	d135      	bne.n	8007d50 <_svfiprintf_r+0x188>
 8007ce4:	9b03      	ldr	r3, [sp, #12]
 8007ce6:	1d1a      	adds	r2, r3, #4
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	9203      	str	r2, [sp, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bfb8      	it	lt
 8007cf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cf4:	3402      	adds	r4, #2
 8007cf6:	9305      	str	r3, [sp, #20]
 8007cf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007dc4 <_svfiprintf_r+0x1fc>
 8007cfc:	7821      	ldrb	r1, [r4, #0]
 8007cfe:	2203      	movs	r2, #3
 8007d00:	4650      	mov	r0, sl
 8007d02:	f7f8 fa7d 	bl	8000200 <memchr>
 8007d06:	b140      	cbz	r0, 8007d1a <_svfiprintf_r+0x152>
 8007d08:	2340      	movs	r3, #64	; 0x40
 8007d0a:	eba0 000a 	sub.w	r0, r0, sl
 8007d0e:	fa03 f000 	lsl.w	r0, r3, r0
 8007d12:	9b04      	ldr	r3, [sp, #16]
 8007d14:	4303      	orrs	r3, r0
 8007d16:	3401      	adds	r4, #1
 8007d18:	9304      	str	r3, [sp, #16]
 8007d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d1e:	4826      	ldr	r0, [pc, #152]	; (8007db8 <_svfiprintf_r+0x1f0>)
 8007d20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d24:	2206      	movs	r2, #6
 8007d26:	f7f8 fa6b 	bl	8000200 <memchr>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d038      	beq.n	8007da0 <_svfiprintf_r+0x1d8>
 8007d2e:	4b23      	ldr	r3, [pc, #140]	; (8007dbc <_svfiprintf_r+0x1f4>)
 8007d30:	bb1b      	cbnz	r3, 8007d7a <_svfiprintf_r+0x1b2>
 8007d32:	9b03      	ldr	r3, [sp, #12]
 8007d34:	3307      	adds	r3, #7
 8007d36:	f023 0307 	bic.w	r3, r3, #7
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	9303      	str	r3, [sp, #12]
 8007d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d40:	4433      	add	r3, r6
 8007d42:	9309      	str	r3, [sp, #36]	; 0x24
 8007d44:	e767      	b.n	8007c16 <_svfiprintf_r+0x4e>
 8007d46:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	2001      	movs	r0, #1
 8007d4e:	e7a5      	b.n	8007c9c <_svfiprintf_r+0xd4>
 8007d50:	2300      	movs	r3, #0
 8007d52:	3401      	adds	r4, #1
 8007d54:	9305      	str	r3, [sp, #20]
 8007d56:	4619      	mov	r1, r3
 8007d58:	f04f 0c0a 	mov.w	ip, #10
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d62:	3a30      	subs	r2, #48	; 0x30
 8007d64:	2a09      	cmp	r2, #9
 8007d66:	d903      	bls.n	8007d70 <_svfiprintf_r+0x1a8>
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d0c5      	beq.n	8007cf8 <_svfiprintf_r+0x130>
 8007d6c:	9105      	str	r1, [sp, #20]
 8007d6e:	e7c3      	b.n	8007cf8 <_svfiprintf_r+0x130>
 8007d70:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d74:	4604      	mov	r4, r0
 8007d76:	2301      	movs	r3, #1
 8007d78:	e7f0      	b.n	8007d5c <_svfiprintf_r+0x194>
 8007d7a:	ab03      	add	r3, sp, #12
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	462a      	mov	r2, r5
 8007d80:	4b0f      	ldr	r3, [pc, #60]	; (8007dc0 <_svfiprintf_r+0x1f8>)
 8007d82:	a904      	add	r1, sp, #16
 8007d84:	4638      	mov	r0, r7
 8007d86:	f3af 8000 	nop.w
 8007d8a:	1c42      	adds	r2, r0, #1
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	d1d6      	bne.n	8007d3e <_svfiprintf_r+0x176>
 8007d90:	89ab      	ldrh	r3, [r5, #12]
 8007d92:	065b      	lsls	r3, r3, #25
 8007d94:	f53f af2c 	bmi.w	8007bf0 <_svfiprintf_r+0x28>
 8007d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d9a:	b01d      	add	sp, #116	; 0x74
 8007d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da0:	ab03      	add	r3, sp, #12
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	462a      	mov	r2, r5
 8007da6:	4b06      	ldr	r3, [pc, #24]	; (8007dc0 <_svfiprintf_r+0x1f8>)
 8007da8:	a904      	add	r1, sp, #16
 8007daa:	4638      	mov	r0, r7
 8007dac:	f000 f87a 	bl	8007ea4 <_printf_i>
 8007db0:	e7eb      	b.n	8007d8a <_svfiprintf_r+0x1c2>
 8007db2:	bf00      	nop
 8007db4:	08008420 	.word	0x08008420
 8007db8:	0800842a 	.word	0x0800842a
 8007dbc:	00000000 	.word	0x00000000
 8007dc0:	08007b11 	.word	0x08007b11
 8007dc4:	08008426 	.word	0x08008426

08007dc8 <_printf_common>:
 8007dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dcc:	4616      	mov	r6, r2
 8007dce:	4699      	mov	r9, r3
 8007dd0:	688a      	ldr	r2, [r1, #8]
 8007dd2:	690b      	ldr	r3, [r1, #16]
 8007dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	bfb8      	it	lt
 8007ddc:	4613      	movlt	r3, r2
 8007dde:	6033      	str	r3, [r6, #0]
 8007de0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007de4:	4607      	mov	r7, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	b10a      	cbz	r2, 8007dee <_printf_common+0x26>
 8007dea:	3301      	adds	r3, #1
 8007dec:	6033      	str	r3, [r6, #0]
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	0699      	lsls	r1, r3, #26
 8007df2:	bf42      	ittt	mi
 8007df4:	6833      	ldrmi	r3, [r6, #0]
 8007df6:	3302      	addmi	r3, #2
 8007df8:	6033      	strmi	r3, [r6, #0]
 8007dfa:	6825      	ldr	r5, [r4, #0]
 8007dfc:	f015 0506 	ands.w	r5, r5, #6
 8007e00:	d106      	bne.n	8007e10 <_printf_common+0x48>
 8007e02:	f104 0a19 	add.w	sl, r4, #25
 8007e06:	68e3      	ldr	r3, [r4, #12]
 8007e08:	6832      	ldr	r2, [r6, #0]
 8007e0a:	1a9b      	subs	r3, r3, r2
 8007e0c:	42ab      	cmp	r3, r5
 8007e0e:	dc26      	bgt.n	8007e5e <_printf_common+0x96>
 8007e10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e14:	1e13      	subs	r3, r2, #0
 8007e16:	6822      	ldr	r2, [r4, #0]
 8007e18:	bf18      	it	ne
 8007e1a:	2301      	movne	r3, #1
 8007e1c:	0692      	lsls	r2, r2, #26
 8007e1e:	d42b      	bmi.n	8007e78 <_printf_common+0xb0>
 8007e20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e24:	4649      	mov	r1, r9
 8007e26:	4638      	mov	r0, r7
 8007e28:	47c0      	blx	r8
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	d01e      	beq.n	8007e6c <_printf_common+0xa4>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	68e5      	ldr	r5, [r4, #12]
 8007e32:	6832      	ldr	r2, [r6, #0]
 8007e34:	f003 0306 	and.w	r3, r3, #6
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	bf08      	it	eq
 8007e3c:	1aad      	subeq	r5, r5, r2
 8007e3e:	68a3      	ldr	r3, [r4, #8]
 8007e40:	6922      	ldr	r2, [r4, #16]
 8007e42:	bf0c      	ite	eq
 8007e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e48:	2500      	movne	r5, #0
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	bfc4      	itt	gt
 8007e4e:	1a9b      	subgt	r3, r3, r2
 8007e50:	18ed      	addgt	r5, r5, r3
 8007e52:	2600      	movs	r6, #0
 8007e54:	341a      	adds	r4, #26
 8007e56:	42b5      	cmp	r5, r6
 8007e58:	d11a      	bne.n	8007e90 <_printf_common+0xc8>
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	e008      	b.n	8007e70 <_printf_common+0xa8>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	4652      	mov	r2, sl
 8007e62:	4649      	mov	r1, r9
 8007e64:	4638      	mov	r0, r7
 8007e66:	47c0      	blx	r8
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d103      	bne.n	8007e74 <_printf_common+0xac>
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e74:	3501      	adds	r5, #1
 8007e76:	e7c6      	b.n	8007e06 <_printf_common+0x3e>
 8007e78:	18e1      	adds	r1, r4, r3
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	2030      	movs	r0, #48	; 0x30
 8007e7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e82:	4422      	add	r2, r4
 8007e84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e8c:	3302      	adds	r3, #2
 8007e8e:	e7c7      	b.n	8007e20 <_printf_common+0x58>
 8007e90:	2301      	movs	r3, #1
 8007e92:	4622      	mov	r2, r4
 8007e94:	4649      	mov	r1, r9
 8007e96:	4638      	mov	r0, r7
 8007e98:	47c0      	blx	r8
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	d0e6      	beq.n	8007e6c <_printf_common+0xa4>
 8007e9e:	3601      	adds	r6, #1
 8007ea0:	e7d9      	b.n	8007e56 <_printf_common+0x8e>
	...

08007ea4 <_printf_i>:
 8007ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea8:	7e0f      	ldrb	r7, [r1, #24]
 8007eaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007eac:	2f78      	cmp	r7, #120	; 0x78
 8007eae:	4691      	mov	r9, r2
 8007eb0:	4680      	mov	r8, r0
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	469a      	mov	sl, r3
 8007eb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007eba:	d807      	bhi.n	8007ecc <_printf_i+0x28>
 8007ebc:	2f62      	cmp	r7, #98	; 0x62
 8007ebe:	d80a      	bhi.n	8007ed6 <_printf_i+0x32>
 8007ec0:	2f00      	cmp	r7, #0
 8007ec2:	f000 80d8 	beq.w	8008076 <_printf_i+0x1d2>
 8007ec6:	2f58      	cmp	r7, #88	; 0x58
 8007ec8:	f000 80a3 	beq.w	8008012 <_printf_i+0x16e>
 8007ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ed0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ed4:	e03a      	b.n	8007f4c <_printf_i+0xa8>
 8007ed6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007eda:	2b15      	cmp	r3, #21
 8007edc:	d8f6      	bhi.n	8007ecc <_printf_i+0x28>
 8007ede:	a101      	add	r1, pc, #4	; (adr r1, 8007ee4 <_printf_i+0x40>)
 8007ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ee4:	08007f3d 	.word	0x08007f3d
 8007ee8:	08007f51 	.word	0x08007f51
 8007eec:	08007ecd 	.word	0x08007ecd
 8007ef0:	08007ecd 	.word	0x08007ecd
 8007ef4:	08007ecd 	.word	0x08007ecd
 8007ef8:	08007ecd 	.word	0x08007ecd
 8007efc:	08007f51 	.word	0x08007f51
 8007f00:	08007ecd 	.word	0x08007ecd
 8007f04:	08007ecd 	.word	0x08007ecd
 8007f08:	08007ecd 	.word	0x08007ecd
 8007f0c:	08007ecd 	.word	0x08007ecd
 8007f10:	0800805d 	.word	0x0800805d
 8007f14:	08007f81 	.word	0x08007f81
 8007f18:	0800803f 	.word	0x0800803f
 8007f1c:	08007ecd 	.word	0x08007ecd
 8007f20:	08007ecd 	.word	0x08007ecd
 8007f24:	0800807f 	.word	0x0800807f
 8007f28:	08007ecd 	.word	0x08007ecd
 8007f2c:	08007f81 	.word	0x08007f81
 8007f30:	08007ecd 	.word	0x08007ecd
 8007f34:	08007ecd 	.word	0x08007ecd
 8007f38:	08008047 	.word	0x08008047
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	1d1a      	adds	r2, r3, #4
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	602a      	str	r2, [r5, #0]
 8007f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e0a3      	b.n	8008098 <_printf_i+0x1f4>
 8007f50:	6820      	ldr	r0, [r4, #0]
 8007f52:	6829      	ldr	r1, [r5, #0]
 8007f54:	0606      	lsls	r6, r0, #24
 8007f56:	f101 0304 	add.w	r3, r1, #4
 8007f5a:	d50a      	bpl.n	8007f72 <_printf_i+0xce>
 8007f5c:	680e      	ldr	r6, [r1, #0]
 8007f5e:	602b      	str	r3, [r5, #0]
 8007f60:	2e00      	cmp	r6, #0
 8007f62:	da03      	bge.n	8007f6c <_printf_i+0xc8>
 8007f64:	232d      	movs	r3, #45	; 0x2d
 8007f66:	4276      	negs	r6, r6
 8007f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f6c:	485e      	ldr	r0, [pc, #376]	; (80080e8 <_printf_i+0x244>)
 8007f6e:	230a      	movs	r3, #10
 8007f70:	e019      	b.n	8007fa6 <_printf_i+0x102>
 8007f72:	680e      	ldr	r6, [r1, #0]
 8007f74:	602b      	str	r3, [r5, #0]
 8007f76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f7a:	bf18      	it	ne
 8007f7c:	b236      	sxthne	r6, r6
 8007f7e:	e7ef      	b.n	8007f60 <_printf_i+0xbc>
 8007f80:	682b      	ldr	r3, [r5, #0]
 8007f82:	6820      	ldr	r0, [r4, #0]
 8007f84:	1d19      	adds	r1, r3, #4
 8007f86:	6029      	str	r1, [r5, #0]
 8007f88:	0601      	lsls	r1, r0, #24
 8007f8a:	d501      	bpl.n	8007f90 <_printf_i+0xec>
 8007f8c:	681e      	ldr	r6, [r3, #0]
 8007f8e:	e002      	b.n	8007f96 <_printf_i+0xf2>
 8007f90:	0646      	lsls	r6, r0, #25
 8007f92:	d5fb      	bpl.n	8007f8c <_printf_i+0xe8>
 8007f94:	881e      	ldrh	r6, [r3, #0]
 8007f96:	4854      	ldr	r0, [pc, #336]	; (80080e8 <_printf_i+0x244>)
 8007f98:	2f6f      	cmp	r7, #111	; 0x6f
 8007f9a:	bf0c      	ite	eq
 8007f9c:	2308      	moveq	r3, #8
 8007f9e:	230a      	movne	r3, #10
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fa6:	6865      	ldr	r5, [r4, #4]
 8007fa8:	60a5      	str	r5, [r4, #8]
 8007faa:	2d00      	cmp	r5, #0
 8007fac:	bfa2      	ittt	ge
 8007fae:	6821      	ldrge	r1, [r4, #0]
 8007fb0:	f021 0104 	bicge.w	r1, r1, #4
 8007fb4:	6021      	strge	r1, [r4, #0]
 8007fb6:	b90e      	cbnz	r6, 8007fbc <_printf_i+0x118>
 8007fb8:	2d00      	cmp	r5, #0
 8007fba:	d04d      	beq.n	8008058 <_printf_i+0x1b4>
 8007fbc:	4615      	mov	r5, r2
 8007fbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fc2:	fb03 6711 	mls	r7, r3, r1, r6
 8007fc6:	5dc7      	ldrb	r7, [r0, r7]
 8007fc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fcc:	4637      	mov	r7, r6
 8007fce:	42bb      	cmp	r3, r7
 8007fd0:	460e      	mov	r6, r1
 8007fd2:	d9f4      	bls.n	8007fbe <_printf_i+0x11a>
 8007fd4:	2b08      	cmp	r3, #8
 8007fd6:	d10b      	bne.n	8007ff0 <_printf_i+0x14c>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	07de      	lsls	r6, r3, #31
 8007fdc:	d508      	bpl.n	8007ff0 <_printf_i+0x14c>
 8007fde:	6923      	ldr	r3, [r4, #16]
 8007fe0:	6861      	ldr	r1, [r4, #4]
 8007fe2:	4299      	cmp	r1, r3
 8007fe4:	bfde      	ittt	le
 8007fe6:	2330      	movle	r3, #48	; 0x30
 8007fe8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ff0:	1b52      	subs	r2, r2, r5
 8007ff2:	6122      	str	r2, [r4, #16]
 8007ff4:	f8cd a000 	str.w	sl, [sp]
 8007ff8:	464b      	mov	r3, r9
 8007ffa:	aa03      	add	r2, sp, #12
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4640      	mov	r0, r8
 8008000:	f7ff fee2 	bl	8007dc8 <_printf_common>
 8008004:	3001      	adds	r0, #1
 8008006:	d14c      	bne.n	80080a2 <_printf_i+0x1fe>
 8008008:	f04f 30ff 	mov.w	r0, #4294967295
 800800c:	b004      	add	sp, #16
 800800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008012:	4835      	ldr	r0, [pc, #212]	; (80080e8 <_printf_i+0x244>)
 8008014:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008018:	6829      	ldr	r1, [r5, #0]
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008020:	6029      	str	r1, [r5, #0]
 8008022:	061d      	lsls	r5, r3, #24
 8008024:	d514      	bpl.n	8008050 <_printf_i+0x1ac>
 8008026:	07df      	lsls	r7, r3, #31
 8008028:	bf44      	itt	mi
 800802a:	f043 0320 	orrmi.w	r3, r3, #32
 800802e:	6023      	strmi	r3, [r4, #0]
 8008030:	b91e      	cbnz	r6, 800803a <_printf_i+0x196>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	f023 0320 	bic.w	r3, r3, #32
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	2310      	movs	r3, #16
 800803c:	e7b0      	b.n	8007fa0 <_printf_i+0xfc>
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	f043 0320 	orr.w	r3, r3, #32
 8008044:	6023      	str	r3, [r4, #0]
 8008046:	2378      	movs	r3, #120	; 0x78
 8008048:	4828      	ldr	r0, [pc, #160]	; (80080ec <_printf_i+0x248>)
 800804a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800804e:	e7e3      	b.n	8008018 <_printf_i+0x174>
 8008050:	0659      	lsls	r1, r3, #25
 8008052:	bf48      	it	mi
 8008054:	b2b6      	uxthmi	r6, r6
 8008056:	e7e6      	b.n	8008026 <_printf_i+0x182>
 8008058:	4615      	mov	r5, r2
 800805a:	e7bb      	b.n	8007fd4 <_printf_i+0x130>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	6826      	ldr	r6, [r4, #0]
 8008060:	6961      	ldr	r1, [r4, #20]
 8008062:	1d18      	adds	r0, r3, #4
 8008064:	6028      	str	r0, [r5, #0]
 8008066:	0635      	lsls	r5, r6, #24
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	d501      	bpl.n	8008070 <_printf_i+0x1cc>
 800806c:	6019      	str	r1, [r3, #0]
 800806e:	e002      	b.n	8008076 <_printf_i+0x1d2>
 8008070:	0670      	lsls	r0, r6, #25
 8008072:	d5fb      	bpl.n	800806c <_printf_i+0x1c8>
 8008074:	8019      	strh	r1, [r3, #0]
 8008076:	2300      	movs	r3, #0
 8008078:	6123      	str	r3, [r4, #16]
 800807a:	4615      	mov	r5, r2
 800807c:	e7ba      	b.n	8007ff4 <_printf_i+0x150>
 800807e:	682b      	ldr	r3, [r5, #0]
 8008080:	1d1a      	adds	r2, r3, #4
 8008082:	602a      	str	r2, [r5, #0]
 8008084:	681d      	ldr	r5, [r3, #0]
 8008086:	6862      	ldr	r2, [r4, #4]
 8008088:	2100      	movs	r1, #0
 800808a:	4628      	mov	r0, r5
 800808c:	f7f8 f8b8 	bl	8000200 <memchr>
 8008090:	b108      	cbz	r0, 8008096 <_printf_i+0x1f2>
 8008092:	1b40      	subs	r0, r0, r5
 8008094:	6060      	str	r0, [r4, #4]
 8008096:	6863      	ldr	r3, [r4, #4]
 8008098:	6123      	str	r3, [r4, #16]
 800809a:	2300      	movs	r3, #0
 800809c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a0:	e7a8      	b.n	8007ff4 <_printf_i+0x150>
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	462a      	mov	r2, r5
 80080a6:	4649      	mov	r1, r9
 80080a8:	4640      	mov	r0, r8
 80080aa:	47d0      	blx	sl
 80080ac:	3001      	adds	r0, #1
 80080ae:	d0ab      	beq.n	8008008 <_printf_i+0x164>
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	079b      	lsls	r3, r3, #30
 80080b4:	d413      	bmi.n	80080de <_printf_i+0x23a>
 80080b6:	68e0      	ldr	r0, [r4, #12]
 80080b8:	9b03      	ldr	r3, [sp, #12]
 80080ba:	4298      	cmp	r0, r3
 80080bc:	bfb8      	it	lt
 80080be:	4618      	movlt	r0, r3
 80080c0:	e7a4      	b.n	800800c <_printf_i+0x168>
 80080c2:	2301      	movs	r3, #1
 80080c4:	4632      	mov	r2, r6
 80080c6:	4649      	mov	r1, r9
 80080c8:	4640      	mov	r0, r8
 80080ca:	47d0      	blx	sl
 80080cc:	3001      	adds	r0, #1
 80080ce:	d09b      	beq.n	8008008 <_printf_i+0x164>
 80080d0:	3501      	adds	r5, #1
 80080d2:	68e3      	ldr	r3, [r4, #12]
 80080d4:	9903      	ldr	r1, [sp, #12]
 80080d6:	1a5b      	subs	r3, r3, r1
 80080d8:	42ab      	cmp	r3, r5
 80080da:	dcf2      	bgt.n	80080c2 <_printf_i+0x21e>
 80080dc:	e7eb      	b.n	80080b6 <_printf_i+0x212>
 80080de:	2500      	movs	r5, #0
 80080e0:	f104 0619 	add.w	r6, r4, #25
 80080e4:	e7f5      	b.n	80080d2 <_printf_i+0x22e>
 80080e6:	bf00      	nop
 80080e8:	08008431 	.word	0x08008431
 80080ec:	08008442 	.word	0x08008442

080080f0 <memcpy>:
 80080f0:	440a      	add	r2, r1
 80080f2:	4291      	cmp	r1, r2
 80080f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80080f8:	d100      	bne.n	80080fc <memcpy+0xc>
 80080fa:	4770      	bx	lr
 80080fc:	b510      	push	{r4, lr}
 80080fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008106:	4291      	cmp	r1, r2
 8008108:	d1f9      	bne.n	80080fe <memcpy+0xe>
 800810a:	bd10      	pop	{r4, pc}

0800810c <memmove>:
 800810c:	4288      	cmp	r0, r1
 800810e:	b510      	push	{r4, lr}
 8008110:	eb01 0402 	add.w	r4, r1, r2
 8008114:	d902      	bls.n	800811c <memmove+0x10>
 8008116:	4284      	cmp	r4, r0
 8008118:	4623      	mov	r3, r4
 800811a:	d807      	bhi.n	800812c <memmove+0x20>
 800811c:	1e43      	subs	r3, r0, #1
 800811e:	42a1      	cmp	r1, r4
 8008120:	d008      	beq.n	8008134 <memmove+0x28>
 8008122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008126:	f803 2f01 	strb.w	r2, [r3, #1]!
 800812a:	e7f8      	b.n	800811e <memmove+0x12>
 800812c:	4402      	add	r2, r0
 800812e:	4601      	mov	r1, r0
 8008130:	428a      	cmp	r2, r1
 8008132:	d100      	bne.n	8008136 <memmove+0x2a>
 8008134:	bd10      	pop	{r4, pc}
 8008136:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800813a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800813e:	e7f7      	b.n	8008130 <memmove+0x24>

08008140 <_free_r>:
 8008140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008142:	2900      	cmp	r1, #0
 8008144:	d044      	beq.n	80081d0 <_free_r+0x90>
 8008146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800814a:	9001      	str	r0, [sp, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	f1a1 0404 	sub.w	r4, r1, #4
 8008152:	bfb8      	it	lt
 8008154:	18e4      	addlt	r4, r4, r3
 8008156:	f000 f913 	bl	8008380 <__malloc_lock>
 800815a:	4a1e      	ldr	r2, [pc, #120]	; (80081d4 <_free_r+0x94>)
 800815c:	9801      	ldr	r0, [sp, #4]
 800815e:	6813      	ldr	r3, [r2, #0]
 8008160:	b933      	cbnz	r3, 8008170 <_free_r+0x30>
 8008162:	6063      	str	r3, [r4, #4]
 8008164:	6014      	str	r4, [r2, #0]
 8008166:	b003      	add	sp, #12
 8008168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800816c:	f000 b90e 	b.w	800838c <__malloc_unlock>
 8008170:	42a3      	cmp	r3, r4
 8008172:	d908      	bls.n	8008186 <_free_r+0x46>
 8008174:	6825      	ldr	r5, [r4, #0]
 8008176:	1961      	adds	r1, r4, r5
 8008178:	428b      	cmp	r3, r1
 800817a:	bf01      	itttt	eq
 800817c:	6819      	ldreq	r1, [r3, #0]
 800817e:	685b      	ldreq	r3, [r3, #4]
 8008180:	1949      	addeq	r1, r1, r5
 8008182:	6021      	streq	r1, [r4, #0]
 8008184:	e7ed      	b.n	8008162 <_free_r+0x22>
 8008186:	461a      	mov	r2, r3
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	b10b      	cbz	r3, 8008190 <_free_r+0x50>
 800818c:	42a3      	cmp	r3, r4
 800818e:	d9fa      	bls.n	8008186 <_free_r+0x46>
 8008190:	6811      	ldr	r1, [r2, #0]
 8008192:	1855      	adds	r5, r2, r1
 8008194:	42a5      	cmp	r5, r4
 8008196:	d10b      	bne.n	80081b0 <_free_r+0x70>
 8008198:	6824      	ldr	r4, [r4, #0]
 800819a:	4421      	add	r1, r4
 800819c:	1854      	adds	r4, r2, r1
 800819e:	42a3      	cmp	r3, r4
 80081a0:	6011      	str	r1, [r2, #0]
 80081a2:	d1e0      	bne.n	8008166 <_free_r+0x26>
 80081a4:	681c      	ldr	r4, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	6053      	str	r3, [r2, #4]
 80081aa:	4421      	add	r1, r4
 80081ac:	6011      	str	r1, [r2, #0]
 80081ae:	e7da      	b.n	8008166 <_free_r+0x26>
 80081b0:	d902      	bls.n	80081b8 <_free_r+0x78>
 80081b2:	230c      	movs	r3, #12
 80081b4:	6003      	str	r3, [r0, #0]
 80081b6:	e7d6      	b.n	8008166 <_free_r+0x26>
 80081b8:	6825      	ldr	r5, [r4, #0]
 80081ba:	1961      	adds	r1, r4, r5
 80081bc:	428b      	cmp	r3, r1
 80081be:	bf04      	itt	eq
 80081c0:	6819      	ldreq	r1, [r3, #0]
 80081c2:	685b      	ldreq	r3, [r3, #4]
 80081c4:	6063      	str	r3, [r4, #4]
 80081c6:	bf04      	itt	eq
 80081c8:	1949      	addeq	r1, r1, r5
 80081ca:	6021      	streq	r1, [r4, #0]
 80081cc:	6054      	str	r4, [r2, #4]
 80081ce:	e7ca      	b.n	8008166 <_free_r+0x26>
 80081d0:	b003      	add	sp, #12
 80081d2:	bd30      	pop	{r4, r5, pc}
 80081d4:	20000908 	.word	0x20000908

080081d8 <sbrk_aligned>:
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	4e0e      	ldr	r6, [pc, #56]	; (8008214 <sbrk_aligned+0x3c>)
 80081dc:	460c      	mov	r4, r1
 80081de:	6831      	ldr	r1, [r6, #0]
 80081e0:	4605      	mov	r5, r0
 80081e2:	b911      	cbnz	r1, 80081ea <sbrk_aligned+0x12>
 80081e4:	f000 f8bc 	bl	8008360 <_sbrk_r>
 80081e8:	6030      	str	r0, [r6, #0]
 80081ea:	4621      	mov	r1, r4
 80081ec:	4628      	mov	r0, r5
 80081ee:	f000 f8b7 	bl	8008360 <_sbrk_r>
 80081f2:	1c43      	adds	r3, r0, #1
 80081f4:	d00a      	beq.n	800820c <sbrk_aligned+0x34>
 80081f6:	1cc4      	adds	r4, r0, #3
 80081f8:	f024 0403 	bic.w	r4, r4, #3
 80081fc:	42a0      	cmp	r0, r4
 80081fe:	d007      	beq.n	8008210 <sbrk_aligned+0x38>
 8008200:	1a21      	subs	r1, r4, r0
 8008202:	4628      	mov	r0, r5
 8008204:	f000 f8ac 	bl	8008360 <_sbrk_r>
 8008208:	3001      	adds	r0, #1
 800820a:	d101      	bne.n	8008210 <sbrk_aligned+0x38>
 800820c:	f04f 34ff 	mov.w	r4, #4294967295
 8008210:	4620      	mov	r0, r4
 8008212:	bd70      	pop	{r4, r5, r6, pc}
 8008214:	2000090c 	.word	0x2000090c

08008218 <_malloc_r>:
 8008218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800821c:	1ccd      	adds	r5, r1, #3
 800821e:	f025 0503 	bic.w	r5, r5, #3
 8008222:	3508      	adds	r5, #8
 8008224:	2d0c      	cmp	r5, #12
 8008226:	bf38      	it	cc
 8008228:	250c      	movcc	r5, #12
 800822a:	2d00      	cmp	r5, #0
 800822c:	4607      	mov	r7, r0
 800822e:	db01      	blt.n	8008234 <_malloc_r+0x1c>
 8008230:	42a9      	cmp	r1, r5
 8008232:	d905      	bls.n	8008240 <_malloc_r+0x28>
 8008234:	230c      	movs	r3, #12
 8008236:	603b      	str	r3, [r7, #0]
 8008238:	2600      	movs	r6, #0
 800823a:	4630      	mov	r0, r6
 800823c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008240:	4e2e      	ldr	r6, [pc, #184]	; (80082fc <_malloc_r+0xe4>)
 8008242:	f000 f89d 	bl	8008380 <__malloc_lock>
 8008246:	6833      	ldr	r3, [r6, #0]
 8008248:	461c      	mov	r4, r3
 800824a:	bb34      	cbnz	r4, 800829a <_malloc_r+0x82>
 800824c:	4629      	mov	r1, r5
 800824e:	4638      	mov	r0, r7
 8008250:	f7ff ffc2 	bl	80081d8 <sbrk_aligned>
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	4604      	mov	r4, r0
 8008258:	d14d      	bne.n	80082f6 <_malloc_r+0xde>
 800825a:	6834      	ldr	r4, [r6, #0]
 800825c:	4626      	mov	r6, r4
 800825e:	2e00      	cmp	r6, #0
 8008260:	d140      	bne.n	80082e4 <_malloc_r+0xcc>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	4631      	mov	r1, r6
 8008266:	4638      	mov	r0, r7
 8008268:	eb04 0803 	add.w	r8, r4, r3
 800826c:	f000 f878 	bl	8008360 <_sbrk_r>
 8008270:	4580      	cmp	r8, r0
 8008272:	d13a      	bne.n	80082ea <_malloc_r+0xd2>
 8008274:	6821      	ldr	r1, [r4, #0]
 8008276:	3503      	adds	r5, #3
 8008278:	1a6d      	subs	r5, r5, r1
 800827a:	f025 0503 	bic.w	r5, r5, #3
 800827e:	3508      	adds	r5, #8
 8008280:	2d0c      	cmp	r5, #12
 8008282:	bf38      	it	cc
 8008284:	250c      	movcc	r5, #12
 8008286:	4629      	mov	r1, r5
 8008288:	4638      	mov	r0, r7
 800828a:	f7ff ffa5 	bl	80081d8 <sbrk_aligned>
 800828e:	3001      	adds	r0, #1
 8008290:	d02b      	beq.n	80082ea <_malloc_r+0xd2>
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	442b      	add	r3, r5
 8008296:	6023      	str	r3, [r4, #0]
 8008298:	e00e      	b.n	80082b8 <_malloc_r+0xa0>
 800829a:	6822      	ldr	r2, [r4, #0]
 800829c:	1b52      	subs	r2, r2, r5
 800829e:	d41e      	bmi.n	80082de <_malloc_r+0xc6>
 80082a0:	2a0b      	cmp	r2, #11
 80082a2:	d916      	bls.n	80082d2 <_malloc_r+0xba>
 80082a4:	1961      	adds	r1, r4, r5
 80082a6:	42a3      	cmp	r3, r4
 80082a8:	6025      	str	r5, [r4, #0]
 80082aa:	bf18      	it	ne
 80082ac:	6059      	strne	r1, [r3, #4]
 80082ae:	6863      	ldr	r3, [r4, #4]
 80082b0:	bf08      	it	eq
 80082b2:	6031      	streq	r1, [r6, #0]
 80082b4:	5162      	str	r2, [r4, r5]
 80082b6:	604b      	str	r3, [r1, #4]
 80082b8:	4638      	mov	r0, r7
 80082ba:	f104 060b 	add.w	r6, r4, #11
 80082be:	f000 f865 	bl	800838c <__malloc_unlock>
 80082c2:	f026 0607 	bic.w	r6, r6, #7
 80082c6:	1d23      	adds	r3, r4, #4
 80082c8:	1af2      	subs	r2, r6, r3
 80082ca:	d0b6      	beq.n	800823a <_malloc_r+0x22>
 80082cc:	1b9b      	subs	r3, r3, r6
 80082ce:	50a3      	str	r3, [r4, r2]
 80082d0:	e7b3      	b.n	800823a <_malloc_r+0x22>
 80082d2:	6862      	ldr	r2, [r4, #4]
 80082d4:	42a3      	cmp	r3, r4
 80082d6:	bf0c      	ite	eq
 80082d8:	6032      	streq	r2, [r6, #0]
 80082da:	605a      	strne	r2, [r3, #4]
 80082dc:	e7ec      	b.n	80082b8 <_malloc_r+0xa0>
 80082de:	4623      	mov	r3, r4
 80082e0:	6864      	ldr	r4, [r4, #4]
 80082e2:	e7b2      	b.n	800824a <_malloc_r+0x32>
 80082e4:	4634      	mov	r4, r6
 80082e6:	6876      	ldr	r6, [r6, #4]
 80082e8:	e7b9      	b.n	800825e <_malloc_r+0x46>
 80082ea:	230c      	movs	r3, #12
 80082ec:	603b      	str	r3, [r7, #0]
 80082ee:	4638      	mov	r0, r7
 80082f0:	f000 f84c 	bl	800838c <__malloc_unlock>
 80082f4:	e7a1      	b.n	800823a <_malloc_r+0x22>
 80082f6:	6025      	str	r5, [r4, #0]
 80082f8:	e7de      	b.n	80082b8 <_malloc_r+0xa0>
 80082fa:	bf00      	nop
 80082fc:	20000908 	.word	0x20000908

08008300 <_realloc_r>:
 8008300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008304:	4680      	mov	r8, r0
 8008306:	4614      	mov	r4, r2
 8008308:	460e      	mov	r6, r1
 800830a:	b921      	cbnz	r1, 8008316 <_realloc_r+0x16>
 800830c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008310:	4611      	mov	r1, r2
 8008312:	f7ff bf81 	b.w	8008218 <_malloc_r>
 8008316:	b92a      	cbnz	r2, 8008324 <_realloc_r+0x24>
 8008318:	f7ff ff12 	bl	8008140 <_free_r>
 800831c:	4625      	mov	r5, r4
 800831e:	4628      	mov	r0, r5
 8008320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008324:	f000 f838 	bl	8008398 <_malloc_usable_size_r>
 8008328:	4284      	cmp	r4, r0
 800832a:	4607      	mov	r7, r0
 800832c:	d802      	bhi.n	8008334 <_realloc_r+0x34>
 800832e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008332:	d812      	bhi.n	800835a <_realloc_r+0x5a>
 8008334:	4621      	mov	r1, r4
 8008336:	4640      	mov	r0, r8
 8008338:	f7ff ff6e 	bl	8008218 <_malloc_r>
 800833c:	4605      	mov	r5, r0
 800833e:	2800      	cmp	r0, #0
 8008340:	d0ed      	beq.n	800831e <_realloc_r+0x1e>
 8008342:	42bc      	cmp	r4, r7
 8008344:	4622      	mov	r2, r4
 8008346:	4631      	mov	r1, r6
 8008348:	bf28      	it	cs
 800834a:	463a      	movcs	r2, r7
 800834c:	f7ff fed0 	bl	80080f0 <memcpy>
 8008350:	4631      	mov	r1, r6
 8008352:	4640      	mov	r0, r8
 8008354:	f7ff fef4 	bl	8008140 <_free_r>
 8008358:	e7e1      	b.n	800831e <_realloc_r+0x1e>
 800835a:	4635      	mov	r5, r6
 800835c:	e7df      	b.n	800831e <_realloc_r+0x1e>
	...

08008360 <_sbrk_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d06      	ldr	r5, [pc, #24]	; (800837c <_sbrk_r+0x1c>)
 8008364:	2300      	movs	r3, #0
 8008366:	4604      	mov	r4, r0
 8008368:	4608      	mov	r0, r1
 800836a:	602b      	str	r3, [r5, #0]
 800836c:	f7fa f81a 	bl	80023a4 <_sbrk>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d102      	bne.n	800837a <_sbrk_r+0x1a>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	b103      	cbz	r3, 800837a <_sbrk_r+0x1a>
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	20000910 	.word	0x20000910

08008380 <__malloc_lock>:
 8008380:	4801      	ldr	r0, [pc, #4]	; (8008388 <__malloc_lock+0x8>)
 8008382:	f000 b811 	b.w	80083a8 <__retarget_lock_acquire_recursive>
 8008386:	bf00      	nop
 8008388:	20000914 	.word	0x20000914

0800838c <__malloc_unlock>:
 800838c:	4801      	ldr	r0, [pc, #4]	; (8008394 <__malloc_unlock+0x8>)
 800838e:	f000 b80c 	b.w	80083aa <__retarget_lock_release_recursive>
 8008392:	bf00      	nop
 8008394:	20000914 	.word	0x20000914

08008398 <_malloc_usable_size_r>:
 8008398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800839c:	1f18      	subs	r0, r3, #4
 800839e:	2b00      	cmp	r3, #0
 80083a0:	bfbc      	itt	lt
 80083a2:	580b      	ldrlt	r3, [r1, r0]
 80083a4:	18c0      	addlt	r0, r0, r3
 80083a6:	4770      	bx	lr

080083a8 <__retarget_lock_acquire_recursive>:
 80083a8:	4770      	bx	lr

080083aa <__retarget_lock_release_recursive>:
 80083aa:	4770      	bx	lr

080083ac <_init>:
 80083ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ae:	bf00      	nop
 80083b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083b2:	bc08      	pop	{r3}
 80083b4:	469e      	mov	lr, r3
 80083b6:	4770      	bx	lr

080083b8 <_fini>:
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ba:	bf00      	nop
 80083bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083be:	bc08      	pop	{r3}
 80083c0:	469e      	mov	lr, r3
 80083c2:	4770      	bx	lr
